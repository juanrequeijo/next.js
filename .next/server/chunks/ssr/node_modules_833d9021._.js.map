{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/src/build/webpack/loaders/next-flight-loader/server-reference.ts"],"sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\nexport { registerServerReference } from 'react-server-dom-webpack/server'\n"],"names":["registerServerReference"],"mappings":"AAAA,oDAAoD;;;+BAC3CA,2BAAAA;;;eAAAA,QAAAA,uBAAuB;;;wBAAQ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/postgres/src/query.js"],"sourcesContent":["const originCache = new Map()\n    , originStackCache = new Map()\n    , originError = Symbol('OriginError')\n\nexport const CLOSE = {}\nexport class Query extends Promise {\n  constructor(strings, args, handler, canceller, options = {}) {\n    let resolve\n      , reject\n\n    super((a, b) => {\n      resolve = a\n      reject = b\n    })\n\n    this.tagged = Array.isArray(strings.raw)\n    this.strings = strings\n    this.args = args\n    this.handler = handler\n    this.canceller = canceller\n    this.options = options\n\n    this.state = null\n    this.statement = null\n\n    this.resolve = x => (this.active = false, resolve(x))\n    this.reject = x => (this.active = false, reject(x))\n\n    this.active = false\n    this.cancelled = null\n    this.executed = false\n    this.signature = ''\n\n    this[originError] = this.handler.debug\n      ? new Error()\n      : this.tagged && cachedError(this.strings)\n  }\n\n  get origin() {\n    return (this.handler.debug\n      ? this[originError].stack\n      : this.tagged && originStackCache.has(this.strings)\n        ? originStackCache.get(this.strings)\n        : originStackCache.set(this.strings, this[originError].stack).get(this.strings)\n    ) || ''\n  }\n\n  static get [Symbol.species]() {\n    return Promise\n  }\n\n  cancel() {\n    return this.canceller && (this.canceller(this), this.canceller = null)\n  }\n\n  simple() {\n    this.options.simple = true\n    this.options.prepare = false\n    return this\n  }\n\n  async readable() {\n    this.simple()\n    this.streaming = true\n    return this\n  }\n\n  async writable() {\n    this.simple()\n    this.streaming = true\n    return this\n  }\n\n  cursor(rows = 1, fn) {\n    this.options.simple = false\n    if (typeof rows === 'function') {\n      fn = rows\n      rows = 1\n    }\n\n    this.cursorRows = rows\n\n    if (typeof fn === 'function')\n      return (this.cursorFn = fn, this)\n\n    let prev\n    return {\n      [Symbol.asyncIterator]: () => ({\n        next: () => {\n          if (this.executed && !this.active)\n            return { done: true }\n\n          prev && prev()\n          const promise = new Promise((resolve, reject) => {\n            this.cursorFn = value => {\n              resolve({ value, done: false })\n              return new Promise(r => prev = r)\n            }\n            this.resolve = () => (this.active = false, resolve({ done: true }))\n            this.reject = x => (this.active = false, reject(x))\n          })\n          this.execute()\n          return promise\n        },\n        return() {\n          prev && prev(CLOSE)\n          return { done: true }\n        }\n      })\n    }\n  }\n\n  describe() {\n    this.options.simple = false\n    this.onlyDescribe = this.options.prepare = true\n    return this\n  }\n\n  stream() {\n    throw new Error('.stream has been renamed to .forEach')\n  }\n\n  forEach(fn) {\n    this.forEachFn = fn\n    this.handle()\n    return this\n  }\n\n  raw() {\n    this.isRaw = true\n    return this\n  }\n\n  values() {\n    this.isRaw = 'values'\n    return this\n  }\n\n  async handle() {\n    !this.executed && (this.executed = true) && await 1 && this.handler(this)\n  }\n\n  execute() {\n    this.handle()\n    return this\n  }\n\n  then() {\n    this.handle()\n    return super.then.apply(this, arguments)\n  }\n\n  catch() {\n    this.handle()\n    return super.catch.apply(this, arguments)\n  }\n\n  finally() {\n    this.handle()\n    return super.finally.apply(this, arguments)\n  }\n}\n\nfunction cachedError(xs) {\n  if (originCache.has(xs))\n    return originCache.get(xs)\n\n  const x = Error.stackTraceLimit\n  Error.stackTraceLimit = 4\n  originCache.set(xs, new Error())\n  Error.stackTraceLimit = x\n  return originCache.get(xs)\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/postgres/src/errors.js"],"sourcesContent":["export class PostgresError extends Error {\n  constructor(x) {\n    super(x.message)\n    this.name = this.constructor.name\n    Object.assign(this, x)\n  }\n}\n\nexport const Errors = {\n  connection,\n  postgres,\n  generic,\n  notSupported\n}\n\nfunction connection(x, options, socket) {\n  const { host, port } = socket || options\n  const error = Object.assign(\n    new Error(('write ' + x + ' ' + (options.path || (host + ':' + port)))),\n    {\n      code: x,\n      errno: x,\n      address: options.path || host\n    }, options.path ? {} : { port: port }\n  )\n  Error.captureStackTrace(error, connection)\n  return error\n}\n\nfunction postgres(x) {\n  const error = new PostgresError(x)\n  Error.captureStackTrace(error, postgres)\n  return error\n}\n\nfunction generic(code, message) {\n  const error = Object.assign(new Error(code + ': ' + message), { code })\n  Error.captureStackTrace(error, generic)\n  return error\n}\n\n/* c8 ignore next 10 */\nfunction notSupported(x) {\n  const error = Object.assign(\n    new Error(x + ' (B) is not supported'),\n    {\n      code: 'MESSAGE_NOT_SUPPORTED',\n      name: x\n    }\n  )\n  Error.captureStackTrace(error, notSupported)\n  return error\n}\n"],"names":[],"mappings":";;;;AAAO,MAAM,sBAAsB;IACjC,YAAY,CAAC,CAAE;QACb,KAAK,CAAC,EAAE,OAAO;QACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI;QACjC,OAAO,MAAM,CAAC,IAAI,EAAE;IACtB;AACF;AAEO,MAAM,SAAS;IACpB;IACA;IACA;IACA;AACF;AAEA,SAAS,WAAW,CAAC,EAAE,OAAO,EAAE,MAAM;IACpC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,UAAU;IACjC,MAAM,QAAQ,OAAO,MAAM,CACzB,IAAI,MAAO,WAAW,IAAI,MAAM,CAAC,QAAQ,IAAI,IAAK,OAAO,MAAM,IAAK,IACpE;QACE,MAAM;QACN,OAAO;QACP,SAAS,QAAQ,IAAI,IAAI;IAC3B,GAAG,QAAQ,IAAI,GAAG,CAAC,IAAI;QAAE,MAAM;IAAK;IAEtC,MAAM,iBAAiB,CAAC,OAAO;IAC/B,OAAO;AACT;AAEA,SAAS,SAAS,CAAC;IACjB,MAAM,QAAQ,IAAI,cAAc;IAChC,MAAM,iBAAiB,CAAC,OAAO;IAC/B,OAAO;AACT;AAEA,SAAS,QAAQ,IAAI,EAAE,OAAO;IAC5B,MAAM,QAAQ,OAAO,MAAM,CAAC,IAAI,MAAM,OAAO,OAAO,UAAU;QAAE;IAAK;IACrE,MAAM,iBAAiB,CAAC,OAAO;IAC/B,OAAO;AACT;AAEA,qBAAqB,GACrB,SAAS,aAAa,CAAC;IACrB,MAAM,QAAQ,OAAO,MAAM,CACzB,IAAI,MAAM,IAAI,0BACd;QACE,MAAM;QACN,MAAM;IACR;IAEF,MAAM,iBAAiB,CAAC,OAAO;IAC/B,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/postgres/src/types.js"],"sourcesContent":["import { Query } from './query.js'\nimport { Errors } from './errors.js'\n\nexport const types = {\n  string: {\n    to: 25,\n    from: null,             // defaults to string\n    serialize: x => '' + x\n  },\n  number: {\n    to: 0,\n    from: [21, 23, 26, 700, 701],\n    serialize: x => '' + x,\n    parse: x => +x\n  },\n  json: {\n    to: 114,\n    from: [114, 3802],\n    serialize: x => JSON.stringify(x),\n    parse: x => JSON.parse(x)\n  },\n  boolean: {\n    to: 16,\n    from: 16,\n    serialize: x => x === true ? 't' : 'f',\n    parse: x => x === 't'\n  },\n  date: {\n    to: 1184,\n    from: [1082, 1114, 1184],\n    serialize: x => (x instanceof Date ? x : new Date(x)).toISOString(),\n    parse: x => new Date(x)\n  },\n  bytea: {\n    to: 17,\n    from: 17,\n    serialize: x => '\\\\x' + Buffer.from(x).toString('hex'),\n    parse: x => Buffer.from(x.slice(2), 'hex')\n  }\n}\n\nclass NotTagged { then() { notTagged() } catch() { notTagged() } finally() { notTagged() }}\n\nexport class Identifier extends NotTagged {\n  constructor(value) {\n    super()\n    this.value = escapeIdentifier(value)\n  }\n}\n\nexport class Parameter extends NotTagged {\n  constructor(value, type, array) {\n    super()\n    this.value = value\n    this.type = type\n    this.array = array\n  }\n}\n\nexport class Builder extends NotTagged {\n  constructor(first, rest) {\n    super()\n    this.first = first\n    this.rest = rest\n  }\n\n  build(before, parameters, types, options) {\n    const keyword = builders.map(([x, fn]) => ({ fn, i: before.search(x) })).sort((a, b) => a.i - b.i).pop()\n    return keyword.i === -1\n      ? escapeIdentifiers(this.first, options)\n      : keyword.fn(this.first, this.rest, parameters, types, options)\n  }\n}\n\nexport function handleValue(x, parameters, types, options) {\n  let value = x instanceof Parameter ? x.value : x\n  if (value === undefined) {\n    x instanceof Parameter\n      ? x.value = options.transform.undefined\n      : value = x = options.transform.undefined\n\n    if (value === undefined)\n      throw Errors.generic('UNDEFINED_VALUE', 'Undefined values are not allowed')\n  }\n\n  return '$' + (types.push(\n    x instanceof Parameter\n      ? (parameters.push(x.value), x.array\n        ? x.array[x.type || inferType(x.value)] || x.type || firstIsString(x.value)\n        : x.type\n      )\n      : (parameters.push(x), inferType(x))\n  ))\n}\n\nconst defaultHandlers = typeHandlers(types)\n\nexport function stringify(q, string, value, parameters, types, options) { // eslint-disable-line\n  for (let i = 1; i < q.strings.length; i++) {\n    string += (stringifyValue(string, value, parameters, types, options)) + q.strings[i]\n    value = q.args[i]\n  }\n\n  return string\n}\n\nfunction stringifyValue(string, value, parameters, types, o) {\n  return (\n    value instanceof Builder ? value.build(string, parameters, types, o) :\n    value instanceof Query ? fragment(value, parameters, types, o) :\n    value instanceof Identifier ? value.value :\n    value && value[0] instanceof Query ? value.reduce((acc, x) => acc + ' ' + fragment(x, parameters, types, o), '') :\n    handleValue(value, parameters, types, o)\n  )\n}\n\nfunction fragment(q, parameters, types, options) {\n  q.fragment = true\n  return stringify(q, q.strings[0], q.args[0], parameters, types, options)\n}\n\nfunction valuesBuilder(first, parameters, types, columns, options) {\n  return first.map(row =>\n    '(' + columns.map(column =>\n      stringifyValue('values', row[column], parameters, types, options)\n    ).join(',') + ')'\n  ).join(',')\n}\n\nfunction values(first, rest, parameters, types, options) {\n  const multi = Array.isArray(first[0])\n  const columns = rest.length ? rest.flat() : Object.keys(multi ? first[0] : first)\n  return valuesBuilder(multi ? first : [first], parameters, types, columns, options)\n}\n\nfunction select(first, rest, parameters, types, options) {\n  typeof first === 'string' && (first = [first].concat(rest))\n  if (Array.isArray(first))\n    return escapeIdentifiers(first, options)\n\n  let value\n  const columns = rest.length ? rest.flat() : Object.keys(first)\n  return columns.map(x => {\n    value = first[x]\n    return (\n      value instanceof Query ? fragment(value, parameters, types, options) :\n      value instanceof Identifier ? value.value :\n      handleValue(value, parameters, types, options)\n    ) + ' as ' + escapeIdentifier(options.transform.column.to ? options.transform.column.to(x) : x)\n  }).join(',')\n}\n\nconst builders = Object.entries({\n  values,\n  in: (...xs) => {\n    const x = values(...xs)\n    return x === '()' ? '(null)' : x\n  },\n  select,\n  as: select,\n  returning: select,\n  '\\\\(': select,\n\n  update(first, rest, parameters, types, options) {\n    return (rest.length ? rest.flat() : Object.keys(first)).map(x =>\n      escapeIdentifier(options.transform.column.to ? options.transform.column.to(x) : x) +\n      '=' + stringifyValue('values', first[x], parameters, types, options)\n    )\n  },\n\n  insert(first, rest, parameters, types, options) {\n    const columns = rest.length ? rest.flat() : Object.keys(Array.isArray(first) ? first[0] : first)\n    return '(' + escapeIdentifiers(columns, options) + ')values' +\n    valuesBuilder(Array.isArray(first) ? first : [first], parameters, types, columns, options)\n  }\n}).map(([x, fn]) => ([new RegExp('((?:^|[\\\\s(])' + x + '(?:$|[\\\\s(]))(?![\\\\s\\\\S]*\\\\1)', 'i'), fn]))\n\nfunction notTagged() {\n  throw Errors.generic('NOT_TAGGED_CALL', 'Query not called as a tagged template literal')\n}\n\nexport const serializers = defaultHandlers.serializers\nexport const parsers = defaultHandlers.parsers\n\nexport const END = {}\n\nfunction firstIsString(x) {\n  if (Array.isArray(x))\n    return firstIsString(x[0])\n  return typeof x === 'string' ? 1009 : 0\n}\n\nexport const mergeUserTypes = function(types) {\n  const user = typeHandlers(types || {})\n  return {\n    serializers: Object.assign({}, serializers, user.serializers),\n    parsers: Object.assign({}, parsers, user.parsers)\n  }\n}\n\nfunction typeHandlers(types) {\n  return Object.keys(types).reduce((acc, k) => {\n    types[k].from && [].concat(types[k].from).forEach(x => acc.parsers[x] = types[k].parse)\n    if (types[k].serialize) {\n      acc.serializers[types[k].to] = types[k].serialize\n      types[k].from && [].concat(types[k].from).forEach(x => acc.serializers[x] = types[k].serialize)\n    }\n    return acc\n  }, { parsers: {}, serializers: {} })\n}\n\nfunction escapeIdentifiers(xs, { transform: { column } }) {\n  return xs.map(x => escapeIdentifier(column.to ? column.to(x) : x)).join(',')\n}\n\nexport const escapeIdentifier = function escape(str) {\n  return '\"' + str.replace(/\"/g, '\"\"').replace(/\\./g, '\".\"') + '\"'\n}\n\nexport const inferType = function inferType(x) {\n  return (\n    x instanceof Parameter ? x.type :\n    x instanceof Date ? 1184 :\n    x instanceof Uint8Array ? 17 :\n    (x === true || x === false) ? 16 :\n    typeof x === 'bigint' ? 20 :\n    Array.isArray(x) ? inferType(x[0]) :\n    0\n  )\n}\n\nconst escapeBackslash = /\\\\/g\nconst escapeQuote = /\"/g\n\nfunction arrayEscape(x) {\n  return x\n    .replace(escapeBackslash, '\\\\\\\\')\n    .replace(escapeQuote, '\\\\\"')\n}\n\nexport const arraySerializer = function arraySerializer(xs, serializer, options, typarray) {\n  if (Array.isArray(xs) === false)\n    return xs\n\n  if (!xs.length)\n    return '{}'\n\n  const first = xs[0]\n  // Only _box (1020) has the ';' delimiter for arrays, all other types use the ',' delimiter\n  const delimiter = typarray === 1020 ? ';' : ','\n\n  if (Array.isArray(first) && !first.type)\n    return '{' + xs.map(x => arraySerializer(x, serializer, options, typarray)).join(delimiter) + '}'\n\n  return '{' + xs.map(x => {\n    if (x === undefined) {\n      x = options.transform.undefined\n      if (x === undefined)\n        throw Errors.generic('UNDEFINED_VALUE', 'Undefined values are not allowed')\n    }\n\n    return x === null\n      ? 'null'\n      : '\"' + arrayEscape(serializer ? serializer(x.type ? x.value : x) : '' + x) + '\"'\n  }).join(delimiter) + '}'\n}\n\nconst arrayParserState = {\n  i: 0,\n  char: null,\n  str: '',\n  quoted: false,\n  last: 0\n}\n\nexport const arrayParser = function arrayParser(x, parser, typarray) {\n  arrayParserState.i = arrayParserState.last = 0\n  return arrayParserLoop(arrayParserState, x, parser, typarray)\n}\n\nfunction arrayParserLoop(s, x, parser, typarray) {\n  const xs = []\n  // Only _box (1020) has the ';' delimiter for arrays, all other types use the ',' delimiter\n  const delimiter = typarray === 1020 ? ';' : ','\n  for (; s.i < x.length; s.i++) {\n    s.char = x[s.i]\n    if (s.quoted) {\n      if (s.char === '\\\\') {\n        s.str += x[++s.i]\n      } else if (s.char === '\"') {\n        xs.push(parser ? parser(s.str) : s.str)\n        s.str = ''\n        s.quoted = x[s.i + 1] === '\"'\n        s.last = s.i + 2\n      } else {\n        s.str += s.char\n      }\n    } else if (s.char === '\"') {\n      s.quoted = true\n    } else if (s.char === '{') {\n      s.last = ++s.i\n      xs.push(arrayParserLoop(s, x, parser, typarray))\n    } else if (s.char === '}') {\n      s.quoted = false\n      s.last < s.i && xs.push(parser ? parser(x.slice(s.last, s.i)) : x.slice(s.last, s.i))\n      s.last = s.i + 1\n      break\n    } else if (s.char === delimiter && s.p !== '}' && s.p !== '\"') {\n      xs.push(parser ? parser(x.slice(s.last, s.i)) : x.slice(s.last, s.i))\n      s.last = s.i + 1\n    }\n    s.p = s.char\n  }\n  s.last < s.i && xs.push(parser ? parser(x.slice(s.last, s.i + 1)) : x.slice(s.last, s.i + 1))\n  return xs\n}\n\nexport const toCamel = x => {\n  let str = x[0]\n  for (let i = 1; i < x.length; i++)\n    str += x[i] === '_' ? x[++i].toUpperCase() : x[i]\n  return str\n}\n\nexport const toPascal = x => {\n  let str = x[0].toUpperCase()\n  for (let i = 1; i < x.length; i++)\n    str += x[i] === '_' ? x[++i].toUpperCase() : x[i]\n  return str\n}\n\nexport const toKebab = x => x.replace(/_/g, '-')\n\nexport const fromCamel = x => x.replace(/([A-Z])/g, '_$1').toLowerCase()\nexport const fromPascal = x => (x.slice(0, 1) + x.slice(1).replace(/([A-Z])/g, '_$1')).toLowerCase()\nexport const fromKebab = x => x.replace(/-/g, '_')\n\nfunction createJsonTransform(fn) {\n  return function jsonTransform(x, column) {\n    return typeof x === 'object' && x !== null && (column.type === 114 || column.type === 3802)\n      ? Array.isArray(x)\n        ? x.map(x => jsonTransform(x, column))\n        : Object.entries(x).reduce((acc, [k, v]) => Object.assign(acc, { [fn(k)]: jsonTransform(v, column) }), {})\n      : x\n  }\n}\n\ntoCamel.column = { from: toCamel }\ntoCamel.value = { from: createJsonTransform(toCamel) }\nfromCamel.column = { to: fromCamel }\n\nexport const camel = { ...toCamel }\ncamel.column.to = fromCamel\n\ntoPascal.column = { from: toPascal }\ntoPascal.value = { from: createJsonTransform(toPascal) }\nfromPascal.column = { to: fromPascal }\n\nexport const pascal = { ...toPascal }\npascal.column.to = fromPascal\n\ntoKebab.column = { from: toKebab }\ntoKebab.value = { from: createJsonTransform(toKebab) }\nfromKebab.column = { to: fromKebab }\n\nexport const kebab = { ...toKebab }\nkebab.column.to = fromKebab\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 577, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/postgres/src/result.js"],"sourcesContent":["export default class Result extends Array {\n  constructor() {\n    super()\n    Object.defineProperties(this, {\n      count: { value: null, writable: true },\n      state: { value: null, writable: true },\n      command: { value: null, writable: true },\n      columns: { value: null, writable: true },\n      statement: { value: null, writable: true }\n    })\n  }\n\n  static get [Symbol.species]() {\n    return Array\n  }\n}\n"],"names":[],"mappings":";;;AAAe,MAAM,eAAe;IAClC,aAAc;QACZ,KAAK;QACL,OAAO,gBAAgB,CAAC,IAAI,EAAE;YAC5B,OAAO;gBAAE,OAAO;gBAAM,UAAU;YAAK;YACrC,OAAO;gBAAE,OAAO;gBAAM,UAAU;YAAK;YACrC,SAAS;gBAAE,OAAO;gBAAM,UAAU;YAAK;YACvC,SAAS;gBAAE,OAAO;gBAAM,UAAU;YAAK;YACvC,WAAW;gBAAE,OAAO;gBAAM,UAAU;YAAK;QAC3C;IACF;IAEA,WAAW,CAAC,OAAO,OAAO,CAAC,GAAG;QAC5B,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 614, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/postgres/src/queue.js"],"sourcesContent":["export default Queue\n\nfunction Queue(initial = []) {\n  let xs = initial.slice()\n  let index = 0\n\n  return {\n    get length() {\n      return xs.length - index\n    },\n    remove: (x) => {\n      const index = xs.indexOf(x)\n      return index === -1\n        ? null\n        : (xs.splice(index, 1), x)\n    },\n    push: (x) => (xs.push(x), x),\n    shift: () => {\n      const out = xs[index++]\n\n      if (index === xs.length) {\n        index = 0\n        xs = []\n      } else {\n        xs[index - 1] = undefined\n      }\n\n      return out\n    }\n  }\n}\n"],"names":[],"mappings":";;;uCAAe;AAEf,SAAS,MAAM,UAAU,EAAE;IACzB,IAAI,KAAK,QAAQ,KAAK;IACtB,IAAI,QAAQ;IAEZ,OAAO;QACL,IAAI,UAAS;YACX,OAAO,GAAG,MAAM,GAAG;QACrB;QACA,QAAQ,CAAC;YACP,MAAM,QAAQ,GAAG,OAAO,CAAC;YACzB,OAAO,UAAU,CAAC,IACd,OACA,CAAC,GAAG,MAAM,CAAC,OAAO,IAAI,CAAC;QAC7B;QACA,MAAM,CAAC,IAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;QAC3B,OAAO;YACL,MAAM,MAAM,EAAE,CAAC,QAAQ;YAEvB,IAAI,UAAU,GAAG,MAAM,EAAE;gBACvB,QAAQ;gBACR,KAAK,EAAE;YACT,OAAO;gBACL,EAAE,CAAC,QAAQ,EAAE,GAAG;YAClB;YAEA,OAAO;QACT;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 646, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/postgres/src/bytes.js"],"sourcesContent":["const size = 256\nlet buffer = Buffer.allocUnsafe(size)\n\nconst messages = 'BCcDdEFfHPpQSX'.split('').reduce((acc, x) => {\n  const v = x.charCodeAt(0)\n  acc[x] = () => {\n    buffer[0] = v\n    b.i = 5\n    return b\n  }\n  return acc\n}, {})\n\nconst b = Object.assign(reset, messages, {\n  N: String.fromCharCode(0),\n  i: 0,\n  inc(x) {\n    b.i += x\n    return b\n  },\n  str(x) {\n    const length = Buffer.byteLength(x)\n    fit(length)\n    b.i += buffer.write(x, b.i, length, 'utf8')\n    return b\n  },\n  i16(x) {\n    fit(2)\n    buffer.writeUInt16BE(x, b.i)\n    b.i += 2\n    return b\n  },\n  i32(x, i) {\n    if (i || i === 0) {\n      buffer.writeUInt32BE(x, i)\n      return b\n    }\n    fit(4)\n    buffer.writeUInt32BE(x, b.i)\n    b.i += 4\n    return b\n  },\n  z(x) {\n    fit(x)\n    buffer.fill(0, b.i, b.i + x)\n    b.i += x\n    return b\n  },\n  raw(x) {\n    buffer = Buffer.concat([buffer.subarray(0, b.i), x])\n    b.i = buffer.length\n    return b\n  },\n  end(at = 1) {\n    buffer.writeUInt32BE(b.i - at, at)\n    const out = buffer.subarray(0, b.i)\n    b.i = 0\n    buffer = Buffer.allocUnsafe(size)\n    return out\n  }\n})\n\nexport default b\n\nfunction fit(x) {\n  if (buffer.length - b.i < x) {\n    const prev = buffer\n        , length = prev.length\n\n    buffer = Buffer.allocUnsafe(length + (length >> 1) + x)\n    prev.copy(buffer)\n  }\n}\n\nfunction reset() {\n  b.i = 0\n  return b\n}\n"],"names":[],"mappings":";;;AAAA,MAAM,OAAO;AACb,IAAI,SAAS,OAAO,WAAW,CAAC;AAEhC,MAAM,WAAW,iBAAiB,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,KAAK;IACvD,MAAM,IAAI,EAAE,UAAU,CAAC;IACvB,GAAG,CAAC,EAAE,GAAG;QACP,MAAM,CAAC,EAAE,GAAG;QACZ,EAAE,CAAC,GAAG;QACN,OAAO;IACT;IACA,OAAO;AACT,GAAG,CAAC;AAEJ,MAAM,IAAI,OAAO,MAAM,CAAC,OAAO,UAAU;IACvC,GAAG,OAAO,YAAY,CAAC;IACvB,GAAG;IACH,KAAI,CAAC;QACH,EAAE,CAAC,IAAI;QACP,OAAO;IACT;IACA,KAAI,CAAC;QACH,MAAM,SAAS,OAAO,UAAU,CAAC;QACjC,IAAI;QACJ,EAAE,CAAC,IAAI,OAAO,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,QAAQ;QACpC,OAAO;IACT;IACA,KAAI,CAAC;QACH,IAAI;QACJ,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC;QAC3B,EAAE,CAAC,IAAI;QACP,OAAO;IACT;IACA,KAAI,CAAC,EAAE,CAAC;QACN,IAAI,KAAK,MAAM,GAAG;YAChB,OAAO,aAAa,CAAC,GAAG;YACxB,OAAO;QACT;QACA,IAAI;QACJ,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC;QAC3B,EAAE,CAAC,IAAI;QACP,OAAO;IACT;IACA,GAAE,CAAC;QACD,IAAI;QACJ,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG;QAC1B,EAAE,CAAC,IAAI;QACP,OAAO;IACT;IACA,KAAI,CAAC;QACH,SAAS,OAAO,MAAM,CAAC;YAAC,OAAO,QAAQ,CAAC,GAAG,EAAE,CAAC;YAAG;SAAE;QACnD,EAAE,CAAC,GAAG,OAAO,MAAM;QACnB,OAAO;IACT;IACA,KAAI,KAAK,CAAC;QACR,OAAO,aAAa,CAAC,EAAE,CAAC,GAAG,IAAI;QAC/B,MAAM,MAAM,OAAO,QAAQ,CAAC,GAAG,EAAE,CAAC;QAClC,EAAE,CAAC,GAAG;QACN,SAAS,OAAO,WAAW,CAAC;QAC5B,OAAO;IACT;AACF;uCAEe;AAEf,SAAS,IAAI,CAAC;IACZ,IAAI,OAAO,MAAM,GAAG,EAAE,CAAC,GAAG,GAAG;QAC3B,MAAM,OAAO,QACP,SAAS,KAAK,MAAM;QAE1B,SAAS,OAAO,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI;QACrD,KAAK,IAAI,CAAC;IACZ;AACF;AAEA,SAAS;IACP,EAAE,CAAC,GAAG;IACN,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 727, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/postgres/src/connection.js"],"sourcesContent":["import net from 'net'\nimport tls from 'tls'\nimport crypto from 'crypto'\nimport Stream from 'stream'\nimport { performance } from 'perf_hooks'\n\nimport { stringify, handleValue, arrayParser, arraySerializer } from './types.js'\nimport { Errors } from './errors.js'\nimport Result from './result.js'\nimport Queue from './queue.js'\nimport { Query, CLOSE } from './query.js'\nimport b from './bytes.js'\n\nexport default Connection\n\nlet uid = 1\n\nconst Sync = b().S().end()\n    , Flush = b().H().end()\n    , SSLRequest = b().i32(8).i32(80877103).end(8)\n    , ExecuteUnnamed = Buffer.concat([b().E().str(b.N).i32(0).end(), Sync])\n    , DescribeUnnamed = b().D().str('S').str(b.N).end()\n    , noop = () => { /* noop */ }\n\nconst retryRoutines = new Set([\n  'FetchPreparedStatement',\n  'RevalidateCachedQuery',\n  'transformAssignedExpr'\n])\n\nconst errorFields = {\n  83  : 'severity_local',    // S\n  86  : 'severity',          // V\n  67  : 'code',              // C\n  77  : 'message',           // M\n  68  : 'detail',            // D\n  72  : 'hint',              // H\n  80  : 'position',          // P\n  112 : 'internal_position', // p\n  113 : 'internal_query',    // q\n  87  : 'where',             // W\n  115 : 'schema_name',       // s\n  116 : 'table_name',        // t\n  99  : 'column_name',       // c\n  100 : 'data type_name',    // d\n  110 : 'constraint_name',   // n\n  70  : 'file',              // F\n  76  : 'line',              // L\n  82  : 'routine'            // R\n}\n\nfunction Connection(options, queues = {}, { onopen = noop, onend = noop, onclose = noop } = {}) {\n  const {\n    ssl,\n    max,\n    user,\n    host,\n    port,\n    database,\n    parsers,\n    transform,\n    onnotice,\n    onnotify,\n    onparameter,\n    max_pipeline,\n    keep_alive,\n    backoff,\n    target_session_attrs\n  } = options\n\n  const sent = Queue()\n      , id = uid++\n      , backend = { pid: null, secret: null }\n      , idleTimer = timer(end, options.idle_timeout)\n      , lifeTimer = timer(end, options.max_lifetime)\n      , connectTimer = timer(connectTimedOut, options.connect_timeout)\n\n  let socket = null\n    , cancelMessage\n    , result = new Result()\n    , incoming = Buffer.alloc(0)\n    , needsTypes = options.fetch_types\n    , backendParameters = {}\n    , statements = {}\n    , statementId = Math.random().toString(36).slice(2)\n    , statementCount = 1\n    , closedDate = 0\n    , remaining = 0\n    , hostIndex = 0\n    , retries = 0\n    , length = 0\n    , delay = 0\n    , rows = 0\n    , serverSignature = null\n    , nextWriteTimer = null\n    , terminated = false\n    , incomings = null\n    , results = null\n    , initial = null\n    , ending = null\n    , stream = null\n    , chunk = null\n    , ended = null\n    , nonce = null\n    , query = null\n    , final = null\n\n  const connection = {\n    queue: queues.closed,\n    idleTimer,\n    connect(query) {\n      initial = query\n      reconnect()\n    },\n    terminate,\n    execute,\n    cancel,\n    end,\n    count: 0,\n    id\n  }\n\n  queues.closed && queues.closed.push(connection)\n\n  return connection\n\n  async function createSocket() {\n    let x\n    try {\n      x = options.socket\n        ? (await Promise.resolve(options.socket(options)))\n        : new net.Socket()\n    } catch (e) {\n      error(e)\n      return\n    }\n    x.on('error', error)\n    x.on('close', closed)\n    x.on('drain', drain)\n    return x\n  }\n\n  async function cancel({ pid, secret }, resolve, reject) {\n    try {\n      cancelMessage = b().i32(16).i32(80877102).i32(pid).i32(secret).end(16)\n      await connect()\n      socket.once('error', reject)\n      socket.once('close', resolve)\n    } catch (error) {\n      reject(error)\n    }\n  }\n\n  function execute(q) {\n    if (terminated)\n      return queryError(q, Errors.connection('CONNECTION_DESTROYED', options))\n\n    if (q.cancelled)\n      return\n\n    try {\n      q.state = backend\n      query\n        ? sent.push(q)\n        : (query = q, query.active = true)\n\n      build(q)\n      return write(toBuffer(q))\n        && !q.describeFirst\n        && !q.cursorFn\n        && sent.length < max_pipeline\n        && (!q.options.onexecute || q.options.onexecute(connection))\n    } catch (error) {\n      sent.length === 0 && write(Sync)\n      errored(error)\n      return true\n    }\n  }\n\n  function toBuffer(q) {\n    if (q.parameters.length >= 65534)\n      throw Errors.generic('MAX_PARAMETERS_EXCEEDED', 'Max number of parameters (65534) exceeded')\n\n    return q.options.simple\n      ? b().Q().str(q.statement.string + b.N).end()\n      : q.describeFirst\n        ? Buffer.concat([describe(q), Flush])\n        : q.prepare\n          ? q.prepared\n            ? prepared(q)\n            : Buffer.concat([describe(q), prepared(q)])\n          : unnamed(q)\n  }\n\n  function describe(q) {\n    return Buffer.concat([\n      Parse(q.statement.string, q.parameters, q.statement.types, q.statement.name),\n      Describe('S', q.statement.name)\n    ])\n  }\n\n  function prepared(q) {\n    return Buffer.concat([\n      Bind(q.parameters, q.statement.types, q.statement.name, q.cursorName),\n      q.cursorFn\n        ? Execute('', q.cursorRows)\n        : ExecuteUnnamed\n    ])\n  }\n\n  function unnamed(q) {\n    return Buffer.concat([\n      Parse(q.statement.string, q.parameters, q.statement.types),\n      DescribeUnnamed,\n      prepared(q)\n    ])\n  }\n\n  function build(q) {\n    const parameters = []\n        , types = []\n\n    const string = stringify(q, q.strings[0], q.args[0], parameters, types, options)\n\n    !q.tagged && q.args.forEach(x => handleValue(x, parameters, types, options))\n\n    q.prepare = options.prepare && ('prepare' in q.options ? q.options.prepare : true)\n    q.string = string\n    q.signature = q.prepare && types + string\n    q.onlyDescribe && (delete statements[q.signature])\n    q.parameters = q.parameters || parameters\n    q.prepared = q.prepare && q.signature in statements\n    q.describeFirst = q.onlyDescribe || (parameters.length && !q.prepared)\n    q.statement = q.prepared\n      ? statements[q.signature]\n      : { string, types, name: q.prepare ? statementId + statementCount++ : '' }\n\n    typeof options.debug === 'function' && options.debug(id, string, parameters, types)\n  }\n\n  function write(x, fn) {\n    chunk = chunk ? Buffer.concat([chunk, x]) : Buffer.from(x)\n    if (fn || chunk.length >= 1024)\n      return nextWrite(fn)\n    nextWriteTimer === null && (nextWriteTimer = setImmediate(nextWrite))\n    return true\n  }\n\n  function nextWrite(fn) {\n    const x = socket.write(chunk, fn)\n    nextWriteTimer !== null && clearImmediate(nextWriteTimer)\n    chunk = nextWriteTimer = null\n    return x\n  }\n\n  function connectTimedOut() {\n    errored(Errors.connection('CONNECT_TIMEOUT', options, socket))\n    socket.destroy()\n  }\n\n  async function secure() {\n    write(SSLRequest)\n    const canSSL = await new Promise(r => socket.once('data', x => r(x[0] === 83))) // S\n\n    if (!canSSL && ssl === 'prefer')\n      return connected()\n\n    socket.removeAllListeners()\n    socket = tls.connect({\n      socket,\n      servername: net.isIP(socket.host) ? undefined : socket.host,\n      ...(ssl === 'require' || ssl === 'allow' || ssl === 'prefer'\n        ? { rejectUnauthorized: false }\n        : ssl === 'verify-full'\n          ? {}\n          : typeof ssl === 'object'\n            ? ssl\n            : {}\n      )\n    })\n    socket.on('secureConnect', connected)\n    socket.on('error', error)\n    socket.on('close', closed)\n    socket.on('drain', drain)\n  }\n\n  /* c8 ignore next 3 */\n  function drain() {\n    !query && onopen(connection)\n  }\n\n  function data(x) {\n    if (incomings) {\n      incomings.push(x)\n      remaining -= x.length\n      if (remaining > 0)\n        return\n    }\n\n    incoming = incomings\n      ? Buffer.concat(incomings, length - remaining)\n      : incoming.length === 0\n        ? x\n        : Buffer.concat([incoming, x], incoming.length + x.length)\n\n    while (incoming.length > 4) {\n      length = incoming.readUInt32BE(1)\n      if (length >= incoming.length) {\n        remaining = length - incoming.length\n        incomings = [incoming]\n        break\n      }\n\n      try {\n        handle(incoming.subarray(0, length + 1))\n      } catch (e) {\n        query && (query.cursorFn || query.describeFirst) && write(Sync)\n        errored(e)\n      }\n      incoming = incoming.subarray(length + 1)\n      remaining = 0\n      incomings = null\n    }\n  }\n\n  async function connect() {\n    terminated = false\n    backendParameters = {}\n    socket || (socket = await createSocket())\n\n    if (!socket)\n      return\n\n    connectTimer.start()\n\n    if (options.socket)\n      return ssl ? secure() : connected()\n\n    socket.on('connect', ssl ? secure : connected)\n\n    if (options.path)\n      return socket.connect(options.path)\n\n    socket.ssl = ssl\n    socket.connect(port[hostIndex], host[hostIndex])\n    socket.host = host[hostIndex]\n    socket.port = port[hostIndex]\n\n    hostIndex = (hostIndex + 1) % port.length\n  }\n\n  function reconnect() {\n    setTimeout(connect, closedDate ? closedDate + delay - performance.now() : 0)\n  }\n\n  function connected() {\n    try {\n      statements = {}\n      needsTypes = options.fetch_types\n      statementId = Math.random().toString(36).slice(2)\n      statementCount = 1\n      lifeTimer.start()\n      socket.on('data', data)\n      keep_alive && socket.setKeepAlive && socket.setKeepAlive(true, 1000 * keep_alive)\n      const s = StartupMessage()\n      write(s)\n    } catch (err) {\n      error(err)\n    }\n  }\n\n  function error(err) {\n    if (connection.queue === queues.connecting && options.host[retries + 1])\n      return\n\n    errored(err)\n    while (sent.length)\n      queryError(sent.shift(), err)\n  }\n\n  function errored(err) {\n    stream && (stream.destroy(err), stream = null)\n    query && queryError(query, err)\n    initial && (queryError(initial, err), initial = null)\n  }\n\n  function queryError(query, err) {\n    if (query.reserve)\n      return query.reject(err)\n\n    if (!err || typeof err !== 'object')\n      err = new Error(err)\n\n    'query' in err || 'parameters' in err || Object.defineProperties(err, {\n      stack: { value: err.stack + query.origin.replace(/.*\\n/, '\\n'), enumerable: options.debug },\n      query: { value: query.string, enumerable: options.debug },\n      parameters: { value: query.parameters, enumerable: options.debug },\n      args: { value: query.args, enumerable: options.debug },\n      types: { value: query.statement && query.statement.types, enumerable: options.debug }\n    })\n    query.reject(err)\n  }\n\n  function end() {\n    return ending || (\n      !connection.reserved && onend(connection),\n      !connection.reserved && !initial && !query && sent.length === 0\n        ? (terminate(), new Promise(r => socket && socket.readyState !== 'closed' ? socket.once('close', r) : r()))\n        : ending = new Promise(r => ended = r)\n    )\n  }\n\n  function terminate() {\n    terminated = true\n    if (stream || query || initial || sent.length)\n      error(Errors.connection('CONNECTION_DESTROYED', options))\n\n    clearImmediate(nextWriteTimer)\n    if (socket) {\n      socket.removeListener('data', data)\n      socket.removeListener('connect', connected)\n      socket.readyState === 'open' && socket.end(b().X().end())\n    }\n    ended && (ended(), ending = ended = null)\n  }\n\n  async function closed(hadError) {\n    incoming = Buffer.alloc(0)\n    remaining = 0\n    incomings = null\n    clearImmediate(nextWriteTimer)\n    socket.removeListener('data', data)\n    socket.removeListener('connect', connected)\n    idleTimer.cancel()\n    lifeTimer.cancel()\n    connectTimer.cancel()\n\n    socket.removeAllListeners()\n    socket = null\n\n    if (initial)\n      return reconnect()\n\n    !hadError && (query || sent.length) && error(Errors.connection('CONNECTION_CLOSED', options, socket))\n    closedDate = performance.now()\n    hadError && options.shared.retries++\n    delay = (typeof backoff === 'function' ? backoff(options.shared.retries) : backoff) * 1000\n    onclose(connection, Errors.connection('CONNECTION_CLOSED', options, socket))\n  }\n\n  /* Handlers */\n  function handle(xs, x = xs[0]) {\n    (\n      x === 68 ? DataRow :                   // D\n      x === 100 ? CopyData :                 // d\n      x === 65 ? NotificationResponse :      // A\n      x === 83 ? ParameterStatus :           // S\n      x === 90 ? ReadyForQuery :             // Z\n      x === 67 ? CommandComplete :           // C\n      x === 50 ? BindComplete :              // 2\n      x === 49 ? ParseComplete :             // 1\n      x === 116 ? ParameterDescription :     // t\n      x === 84 ? RowDescription :            // T\n      x === 82 ? Authentication :            // R\n      x === 110 ? NoData :                   // n\n      x === 75 ? BackendKeyData :            // K\n      x === 69 ? ErrorResponse :             // E\n      x === 115 ? PortalSuspended :          // s\n      x === 51 ? CloseComplete :             // 3\n      x === 71 ? CopyInResponse :            // G\n      x === 78 ? NoticeResponse :            // N\n      x === 72 ? CopyOutResponse :           // H\n      x === 99 ? CopyDone :                  // c\n      x === 73 ? EmptyQueryResponse :        // I\n      x === 86 ? FunctionCallResponse :      // V\n      x === 118 ? NegotiateProtocolVersion : // v\n      x === 87 ? CopyBothResponse :          // W\n      /* c8 ignore next */\n      UnknownMessage\n    )(xs)\n  }\n\n  function DataRow(x) {\n    let index = 7\n    let length\n    let column\n    let value\n\n    const row = query.isRaw ? new Array(query.statement.columns.length) : {}\n    for (let i = 0; i < query.statement.columns.length; i++) {\n      column = query.statement.columns[i]\n      length = x.readInt32BE(index)\n      index += 4\n\n      value = length === -1\n        ? null\n        : query.isRaw === true\n          ? x.subarray(index, index += length)\n          : column.parser === undefined\n            ? x.toString('utf8', index, index += length)\n            : column.parser.array === true\n              ? column.parser(x.toString('utf8', index + 1, index += length))\n              : column.parser(x.toString('utf8', index, index += length))\n\n      query.isRaw\n        ? (row[i] = query.isRaw === true\n          ? value\n          : transform.value.from ? transform.value.from(value, column) : value)\n        : (row[column.name] = transform.value.from ? transform.value.from(value, column) : value)\n    }\n\n    query.forEachFn\n      ? query.forEachFn(transform.row.from ? transform.row.from(row) : row, result)\n      : (result[rows++] = transform.row.from ? transform.row.from(row) : row)\n  }\n\n  function ParameterStatus(x) {\n    const [k, v] = x.toString('utf8', 5, x.length - 1).split(b.N)\n    backendParameters[k] = v\n    if (options.parameters[k] !== v) {\n      options.parameters[k] = v\n      onparameter && onparameter(k, v)\n    }\n  }\n\n  function ReadyForQuery(x) {\n    query && query.options.simple && query.resolve(results || result)\n    query = results = null\n    result = new Result()\n    connectTimer.cancel()\n\n    if (initial) {\n      if (target_session_attrs) {\n        if (!backendParameters.in_hot_standby || !backendParameters.default_transaction_read_only)\n          return fetchState()\n        else if (tryNext(target_session_attrs, backendParameters))\n          return terminate()\n      }\n\n      if (needsTypes) {\n        initial.reserve && (initial = null)\n        return fetchArrayTypes()\n      }\n\n      initial && !initial.reserve && execute(initial)\n      options.shared.retries = retries = 0\n      initial = null\n      return\n    }\n\n    while (sent.length && (query = sent.shift()) && (query.active = true, query.cancelled))\n      Connection(options).cancel(query.state, query.cancelled.resolve, query.cancelled.reject)\n\n    if (query)\n      return // Consider opening if able and sent.length < 50\n\n    connection.reserved\n      ? !connection.reserved.release && x[5] === 73 // I\n        ? ending\n          ? terminate()\n          : (connection.reserved = null, onopen(connection))\n        : connection.reserved()\n      : ending\n        ? terminate()\n        : onopen(connection)\n  }\n\n  function CommandComplete(x) {\n    rows = 0\n\n    for (let i = x.length - 1; i > 0; i--) {\n      if (x[i] === 32 && x[i + 1] < 58 && result.count === null)\n        result.count = +x.toString('utf8', i + 1, x.length - 1)\n      if (x[i - 1] >= 65) {\n        result.command = x.toString('utf8', 5, i)\n        result.state = backend\n        break\n      }\n    }\n\n    final && (final(), final = null)\n\n    if (result.command === 'BEGIN' && max !== 1 && !connection.reserved)\n      return errored(Errors.generic('UNSAFE_TRANSACTION', 'Only use sql.begin, sql.reserved or max: 1'))\n\n    if (query.options.simple)\n      return BindComplete()\n\n    if (query.cursorFn) {\n      result.count && query.cursorFn(result)\n      write(Sync)\n    }\n\n    query.resolve(result)\n  }\n\n  function ParseComplete() {\n    query.parsing = false\n  }\n\n  function BindComplete() {\n    !result.statement && (result.statement = query.statement)\n    result.columns = query.statement.columns\n  }\n\n  function ParameterDescription(x) {\n    const length = x.readUInt16BE(5)\n\n    for (let i = 0; i < length; ++i)\n      !query.statement.types[i] && (query.statement.types[i] = x.readUInt32BE(7 + i * 4))\n\n    query.prepare && (statements[query.signature] = query.statement)\n    query.describeFirst && !query.onlyDescribe && (write(prepared(query)), query.describeFirst = false)\n  }\n\n  function RowDescription(x) {\n    if (result.command) {\n      results = results || [result]\n      results.push(result = new Result())\n      result.count = null\n      query.statement.columns = null\n    }\n\n    const length = x.readUInt16BE(5)\n    let index = 7\n    let start\n\n    query.statement.columns = Array(length)\n\n    for (let i = 0; i < length; ++i) {\n      start = index\n      while (x[index++] !== 0);\n      const table = x.readUInt32BE(index)\n      const number = x.readUInt16BE(index + 4)\n      const type = x.readUInt32BE(index + 6)\n      query.statement.columns[i] = {\n        name: transform.column.from\n          ? transform.column.from(x.toString('utf8', start, index - 1))\n          : x.toString('utf8', start, index - 1),\n        parser: parsers[type],\n        table,\n        number,\n        type\n      }\n      index += 18\n    }\n\n    result.statement = query.statement\n    if (query.onlyDescribe)\n      return (query.resolve(query.statement), write(Sync))\n  }\n\n  async function Authentication(x, type = x.readUInt32BE(5)) {\n    (\n      type === 3 ? AuthenticationCleartextPassword :\n      type === 5 ? AuthenticationMD5Password :\n      type === 10 ? SASL :\n      type === 11 ? SASLContinue :\n      type === 12 ? SASLFinal :\n      type !== 0 ? UnknownAuth :\n      noop\n    )(x, type)\n  }\n\n  /* c8 ignore next 5 */\n  async function AuthenticationCleartextPassword() {\n    const payload = await Pass()\n    write(\n      b().p().str(payload).z(1).end()\n    )\n  }\n\n  async function AuthenticationMD5Password(x) {\n    const payload = 'md5' + (\n      await md5(\n        Buffer.concat([\n          Buffer.from(await md5((await Pass()) + user)),\n          x.subarray(9)\n        ])\n      )\n    )\n    write(\n      b().p().str(payload).z(1).end()\n    )\n  }\n\n  async function SASL() {\n    nonce = (await crypto.randomBytes(18)).toString('base64')\n    b().p().str('SCRAM-SHA-256' + b.N)\n    const i = b.i\n    write(b.inc(4).str('n,,n=*,r=' + nonce).i32(b.i - i - 4, i).end())\n  }\n\n  async function SASLContinue(x) {\n    const res = x.toString('utf8', 9).split(',').reduce((acc, x) => (acc[x[0]] = x.slice(2), acc), {})\n\n    const saltedPassword = await crypto.pbkdf2Sync(\n      await Pass(),\n      Buffer.from(res.s, 'base64'),\n      parseInt(res.i), 32,\n      'sha256'\n    )\n\n    const clientKey = await hmac(saltedPassword, 'Client Key')\n\n    const auth = 'n=*,r=' + nonce + ','\n               + 'r=' + res.r + ',s=' + res.s + ',i=' + res.i\n               + ',c=biws,r=' + res.r\n\n    serverSignature = (await hmac(await hmac(saltedPassword, 'Server Key'), auth)).toString('base64')\n\n    const payload = 'c=biws,r=' + res.r + ',p=' + xor(\n      clientKey, Buffer.from(await hmac(await sha256(clientKey), auth))\n    ).toString('base64')\n\n    write(\n      b().p().str(payload).end()\n    )\n  }\n\n  function SASLFinal(x) {\n    if (x.toString('utf8', 9).split(b.N, 1)[0].slice(2) === serverSignature)\n      return\n    /* c8 ignore next 5 */\n    errored(Errors.generic('SASL_SIGNATURE_MISMATCH', 'The server did not return the correct signature'))\n    socket.destroy()\n  }\n\n  function Pass() {\n    return Promise.resolve(typeof options.pass === 'function'\n      ? options.pass()\n      : options.pass\n    )\n  }\n\n  function NoData() {\n    result.statement = query.statement\n    result.statement.columns = []\n    if (query.onlyDescribe)\n      return (query.resolve(query.statement), write(Sync))\n  }\n\n  function BackendKeyData(x) {\n    backend.pid = x.readUInt32BE(5)\n    backend.secret = x.readUInt32BE(9)\n  }\n\n  async function fetchArrayTypes() {\n    needsTypes = false\n    const types = await new Query([`\n      select b.oid, b.typarray\n      from pg_catalog.pg_type a\n      left join pg_catalog.pg_type b on b.oid = a.typelem\n      where a.typcategory = 'A'\n      group by b.oid, b.typarray\n      order by b.oid\n    `], [], execute)\n    types.forEach(({ oid, typarray }) => addArrayType(oid, typarray))\n  }\n\n  function addArrayType(oid, typarray) {\n    if (!!options.parsers[typarray] && !!options.serializers[typarray]) return\n    const parser = options.parsers[oid]\n    options.shared.typeArrayMap[oid] = typarray\n    options.parsers[typarray] = (xs) => arrayParser(xs, parser, typarray)\n    options.parsers[typarray].array = true\n    options.serializers[typarray] = (xs) => arraySerializer(xs, options.serializers[oid], options, typarray)\n  }\n\n  function tryNext(x, xs) {\n    return (\n      (x === 'read-write' && xs.default_transaction_read_only === 'on') ||\n      (x === 'read-only' && xs.default_transaction_read_only === 'off') ||\n      (x === 'primary' && xs.in_hot_standby === 'on') ||\n      (x === 'standby' && xs.in_hot_standby === 'off') ||\n      (x === 'prefer-standby' && xs.in_hot_standby === 'off' && options.host[retries])\n    )\n  }\n\n  function fetchState() {\n    const query = new Query([`\n      show transaction_read_only;\n      select pg_catalog.pg_is_in_recovery()\n    `], [], execute, null, { simple: true })\n    query.resolve = ([[a], [b]]) => {\n      backendParameters.default_transaction_read_only = a.transaction_read_only\n      backendParameters.in_hot_standby = b.pg_is_in_recovery ? 'on' : 'off'\n    }\n    query.execute()\n  }\n\n  function ErrorResponse(x) {\n    query && (query.cursorFn || query.describeFirst) && write(Sync)\n    const error = Errors.postgres(parseError(x))\n    query && query.retried\n      ? errored(query.retried)\n      : query && query.prepared && retryRoutines.has(error.routine)\n        ? retry(query, error)\n        : errored(error)\n  }\n\n  function retry(q, error) {\n    delete statements[q.signature]\n    q.retried = error\n    execute(q)\n  }\n\n  function NotificationResponse(x) {\n    if (!onnotify)\n      return\n\n    let index = 9\n    while (x[index++] !== 0);\n    onnotify(\n      x.toString('utf8', 9, index - 1),\n      x.toString('utf8', index, x.length - 1)\n    )\n  }\n\n  async function PortalSuspended() {\n    try {\n      const x = await Promise.resolve(query.cursorFn(result))\n      rows = 0\n      x === CLOSE\n        ? write(Close(query.portal))\n        : (result = new Result(), write(Execute('', query.cursorRows)))\n    } catch (err) {\n      write(Sync)\n      query.reject(err)\n    }\n  }\n\n  function CloseComplete() {\n    result.count && query.cursorFn(result)\n    query.resolve(result)\n  }\n\n  function CopyInResponse() {\n    stream = new Stream.Writable({\n      autoDestroy: true,\n      write(chunk, encoding, callback) {\n        socket.write(b().d().raw(chunk).end(), callback)\n      },\n      destroy(error, callback) {\n        callback(error)\n        socket.write(b().f().str(error + b.N).end())\n        stream = null\n      },\n      final(callback) {\n        socket.write(b().c().end())\n        final = callback\n      }\n    })\n    query.resolve(stream)\n  }\n\n  function CopyOutResponse() {\n    stream = new Stream.Readable({\n      read() { socket.resume() }\n    })\n    query.resolve(stream)\n  }\n\n  /* c8 ignore next 3 */\n  function CopyBothResponse() {\n    stream = new Stream.Duplex({\n      autoDestroy: true,\n      read() { socket.resume() },\n      /* c8 ignore next 11 */\n      write(chunk, encoding, callback) {\n        socket.write(b().d().raw(chunk).end(), callback)\n      },\n      destroy(error, callback) {\n        callback(error)\n        socket.write(b().f().str(error + b.N).end())\n        stream = null\n      },\n      final(callback) {\n        socket.write(b().c().end())\n        final = callback\n      }\n    })\n    query.resolve(stream)\n  }\n\n  function CopyData(x) {\n    stream && (stream.push(x.subarray(5)) || socket.pause())\n  }\n\n  function CopyDone() {\n    stream && stream.push(null)\n    stream = null\n  }\n\n  function NoticeResponse(x) {\n    onnotice\n      ? onnotice(parseError(x))\n      : console.log(parseError(x)) // eslint-disable-line\n\n  }\n\n  /* c8 ignore next 3 */\n  function EmptyQueryResponse() {\n    /* noop */\n  }\n\n  /* c8 ignore next 3 */\n  function FunctionCallResponse() {\n    errored(Errors.notSupported('FunctionCallResponse'))\n  }\n\n  /* c8 ignore next 3 */\n  function NegotiateProtocolVersion() {\n    errored(Errors.notSupported('NegotiateProtocolVersion'))\n  }\n\n  /* c8 ignore next 3 */\n  function UnknownMessage(x) {\n    console.error('Postgres.js : Unknown Message:', x[0]) // eslint-disable-line\n  }\n\n  /* c8 ignore next 3 */\n  function UnknownAuth(x, type) {\n    console.error('Postgres.js : Unknown Auth:', type) // eslint-disable-line\n  }\n\n  /* Messages */\n  function Bind(parameters, types, statement = '', portal = '') {\n    let prev\n      , type\n\n    b().B().str(portal + b.N).str(statement + b.N).i16(0).i16(parameters.length)\n\n    parameters.forEach((x, i) => {\n      if (x === null)\n        return b.i32(0xFFFFFFFF)\n\n      type = types[i]\n      parameters[i] = x = type in options.serializers\n        ? options.serializers[type](x)\n        : '' + x\n\n      prev = b.i\n      b.inc(4).str(x).i32(b.i - prev - 4, prev)\n    })\n\n    b.i16(0)\n\n    return b.end()\n  }\n\n  function Parse(str, parameters, types, name = '') {\n    b().P().str(name + b.N).str(str + b.N).i16(parameters.length)\n    parameters.forEach((x, i) => b.i32(types[i] || 0))\n    return b.end()\n  }\n\n  function Describe(x, name = '') {\n    return b().D().str(x).str(name + b.N).end()\n  }\n\n  function Execute(portal = '', rows = 0) {\n    return Buffer.concat([\n      b().E().str(portal + b.N).i32(rows).end(),\n      Flush\n    ])\n  }\n\n  function Close(portal = '') {\n    return Buffer.concat([\n      b().C().str('P').str(portal + b.N).end(),\n      b().S().end()\n    ])\n  }\n\n  function StartupMessage() {\n    return cancelMessage || b().inc(4).i16(3).z(2).str(\n      Object.entries(Object.assign({\n        user,\n        database,\n        client_encoding: 'UTF8'\n      },\n        options.connection\n      )).filter(([, v]) => v).map(([k, v]) => k + b.N + v).join(b.N)\n    ).z(2).end(0)\n  }\n\n}\n\nfunction parseError(x) {\n  const error = {}\n  let start = 5\n  for (let i = 5; i < x.length - 1; i++) {\n    if (x[i] === 0) {\n      error[errorFields[x[start]]] = x.toString('utf8', start + 1, i)\n      start = i + 1\n    }\n  }\n  return error\n}\n\nfunction md5(x) {\n  return crypto.createHash('md5').update(x).digest('hex')\n}\n\nfunction hmac(key, x) {\n  return crypto.createHmac('sha256', key).update(x).digest()\n}\n\nfunction sha256(x) {\n  return crypto.createHash('sha256').update(x).digest()\n}\n\nfunction xor(a, b) {\n  const length = Math.max(a.length, b.length)\n  const buffer = Buffer.allocUnsafe(length)\n  for (let i = 0; i < length; i++)\n    buffer[i] = a[i] ^ b[i]\n  return buffer\n}\n\nfunction timer(fn, seconds) {\n  seconds = typeof seconds === 'function' ? seconds() : seconds\n  if (!seconds)\n    return { cancel: noop, start: noop }\n\n  let timer\n  return {\n    cancel() {\n      timer && (clearTimeout(timer), timer = null)\n    },\n    start() {\n      timer && clearTimeout(timer)\n      timer = setTimeout(done, seconds * 1000, arguments)\n    }\n  }\n\n  function done(args) {\n    fn.apply(null, args)\n    timer = null\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1459, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/postgres/src/subscribe.js"],"sourcesContent":["const noop = () => { /* noop */ }\n\nexport default function Subscribe(postgres, options) {\n  const subscribers = new Map()\n      , slot = 'postgresjs_' + Math.random().toString(36).slice(2)\n      , state = {}\n\n  let connection\n    , stream\n    , ended = false\n\n  const sql = subscribe.sql = postgres({\n    ...options,\n    transform: { column: {}, value: {}, row: {} },\n    max: 1,\n    fetch_types: false,\n    idle_timeout: null,\n    max_lifetime: null,\n    connection: {\n      ...options.connection,\n      replication: 'database'\n    },\n    onclose: async function() {\n      if (ended)\n        return\n      stream = null\n      state.pid = state.secret = undefined\n      connected(await init(sql, slot, options.publications))\n      subscribers.forEach(event => event.forEach(({ onsubscribe }) => onsubscribe()))\n    },\n    no_subscribe: true\n  })\n\n  const end = sql.end\n      , close = sql.close\n\n  sql.end = async() => {\n    ended = true\n    stream && (await new Promise(r => (stream.once('close', r), stream.end())))\n    return end()\n  }\n\n  sql.close = async() => {\n    stream && (await new Promise(r => (stream.once('close', r), stream.end())))\n    return close()\n  }\n\n  return subscribe\n\n  async function subscribe(event, fn, onsubscribe = noop, onerror = noop) {\n    event = parseEvent(event)\n\n    if (!connection)\n      connection = init(sql, slot, options.publications)\n\n    const subscriber = { fn, onsubscribe }\n    const fns = subscribers.has(event)\n      ? subscribers.get(event).add(subscriber)\n      : subscribers.set(event, new Set([subscriber])).get(event)\n\n    const unsubscribe = () => {\n      fns.delete(subscriber)\n      fns.size === 0 && subscribers.delete(event)\n    }\n\n    return connection.then(x => {\n      connected(x)\n      onsubscribe()\n      stream && stream.on('error', onerror)\n      return { unsubscribe, state, sql }\n    })\n  }\n\n  function connected(x) {\n    stream = x.stream\n    state.pid = x.state.pid\n    state.secret = x.state.secret\n  }\n\n  async function init(sql, slot, publications) {\n    if (!publications)\n      throw new Error('Missing publication names')\n\n    const xs = await sql.unsafe(\n      `CREATE_REPLICATION_SLOT ${ slot } TEMPORARY LOGICAL pgoutput NOEXPORT_SNAPSHOT`\n    )\n\n    const [x] = xs\n\n    const stream = await sql.unsafe(\n      `START_REPLICATION SLOT ${ slot } LOGICAL ${\n        x.consistent_point\n      } (proto_version '1', publication_names '${ publications }')`\n    ).writable()\n\n    const state = {\n      lsn: Buffer.concat(x.consistent_point.split('/').map(x => Buffer.from(('00000000' + x).slice(-8), 'hex')))\n    }\n\n    stream.on('data', data)\n    stream.on('error', error)\n    stream.on('close', sql.close)\n\n    return { stream, state: xs.state }\n\n    function error(e) {\n      console.error('Unexpected error during logical streaming - reconnecting', e) // eslint-disable-line\n    }\n\n    function data(x) {\n      if (x[0] === 0x77) {\n        parse(x.subarray(25), state, sql.options.parsers, handle, options.transform)\n      } else if (x[0] === 0x6b && x[17]) {\n        state.lsn = x.subarray(1, 9)\n        pong()\n      }\n    }\n\n    function handle(a, b) {\n      const path = b.relation.schema + '.' + b.relation.table\n      call('*', a, b)\n      call('*:' + path, a, b)\n      b.relation.keys.length && call('*:' + path + '=' + b.relation.keys.map(x => a[x.name]), a, b)\n      call(b.command, a, b)\n      call(b.command + ':' + path, a, b)\n      b.relation.keys.length && call(b.command + ':' + path + '=' + b.relation.keys.map(x => a[x.name]), a, b)\n    }\n\n    function pong() {\n      const x = Buffer.alloc(34)\n      x[0] = 'r'.charCodeAt(0)\n      x.fill(state.lsn, 1)\n      x.writeBigInt64BE(BigInt(Date.now() - Date.UTC(2000, 0, 1)) * BigInt(1000), 25)\n      stream.write(x)\n    }\n  }\n\n  function call(x, a, b) {\n    subscribers.has(x) && subscribers.get(x).forEach(({ fn }) => fn(a, b, x))\n  }\n}\n\nfunction Time(x) {\n  return new Date(Date.UTC(2000, 0, 1) + Number(x / BigInt(1000)))\n}\n\nfunction parse(x, state, parsers, handle, transform) {\n  const char = (acc, [k, v]) => (acc[k.charCodeAt(0)] = v, acc)\n\n  Object.entries({\n    R: x => {  // Relation\n      let i = 1\n      const r = state[x.readUInt32BE(i)] = {\n        schema: x.toString('utf8', i += 4, i = x.indexOf(0, i)) || 'pg_catalog',\n        table: x.toString('utf8', i + 1, i = x.indexOf(0, i + 1)),\n        columns: Array(x.readUInt16BE(i += 2)),\n        keys: []\n      }\n      i += 2\n\n      let columnIndex = 0\n        , column\n\n      while (i < x.length) {\n        column = r.columns[columnIndex++] = {\n          key: x[i++],\n          name: transform.column.from\n            ? transform.column.from(x.toString('utf8', i, i = x.indexOf(0, i)))\n            : x.toString('utf8', i, i = x.indexOf(0, i)),\n          type: x.readUInt32BE(i += 1),\n          parser: parsers[x.readUInt32BE(i)],\n          atttypmod: x.readUInt32BE(i += 4)\n        }\n\n        column.key && r.keys.push(column)\n        i += 4\n      }\n    },\n    Y: () => { /* noop */ }, // Type\n    O: () => { /* noop */ }, // Origin\n    B: x => { // Begin\n      state.date = Time(x.readBigInt64BE(9))\n      state.lsn = x.subarray(1, 9)\n    },\n    I: x => { // Insert\n      let i = 1\n      const relation = state[x.readUInt32BE(i)]\n      const { row } = tuples(x, relation.columns, i += 7, transform)\n\n      handle(row, {\n        command: 'insert',\n        relation\n      })\n    },\n    D: x => { // Delete\n      let i = 1\n      const relation = state[x.readUInt32BE(i)]\n      i += 4\n      const key = x[i] === 75\n      handle(key || x[i] === 79\n        ? tuples(x, relation.columns, i += 3, transform).row\n        : null\n      , {\n        command: 'delete',\n        relation,\n        key\n      })\n    },\n    U: x => { // Update\n      let i = 1\n      const relation = state[x.readUInt32BE(i)]\n      i += 4\n      const key = x[i] === 75\n      const xs = key || x[i] === 79\n        ? tuples(x, relation.columns, i += 3, transform)\n        : null\n\n      xs && (i = xs.i)\n\n      const { row } = tuples(x, relation.columns, i + 3, transform)\n\n      handle(row, {\n        command: 'update',\n        relation,\n        key,\n        old: xs && xs.row\n      })\n    },\n    T: () => { /* noop */ }, // Truncate,\n    C: () => { /* noop */ }  // Commit\n  }).reduce(char, {})[x[0]](x)\n}\n\nfunction tuples(x, columns, xi, transform) {\n  let type\n    , column\n    , value\n\n  const row = transform.raw ? new Array(columns.length) : {}\n  for (let i = 0; i < columns.length; i++) {\n    type = x[xi++]\n    column = columns[i]\n    value = type === 110 // n\n      ? null\n      : type === 117 // u\n        ? undefined\n        : column.parser === undefined\n          ? x.toString('utf8', xi + 4, xi += 4 + x.readUInt32BE(xi))\n          : column.parser.array === true\n            ? column.parser(x.toString('utf8', xi + 5, xi += 4 + x.readUInt32BE(xi)))\n            : column.parser(x.toString('utf8', xi + 4, xi += 4 + x.readUInt32BE(xi)))\n\n    transform.raw\n      ? (row[i] = transform.raw === true\n        ? value\n        : transform.value.from ? transform.value.from(value, column) : value)\n      : (row[column.name] = transform.value.from\n        ? transform.value.from(value, column)\n        : value\n      )\n  }\n\n  return { i: xi, row: transform.row.from ? transform.row.from(row) : row }\n}\n\nfunction parseEvent(x) {\n  const xs = x.match(/^(\\*|insert|update|delete)?:?([^.]+?\\.?[^=]+)?=?(.+)?/i) || []\n\n  if (!xs)\n    throw new Error('Malformed subscribe pattern: ' + x)\n\n  const [, command, path, key] = xs\n\n  return (command || '*')\n       + (path ? ':' + (path.indexOf('.') === -1 ? 'public.' + path : path) : '')\n       + (key ? '=' + key : '')\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1682, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/postgres/src/large.js"],"sourcesContent":["import Stream from 'stream'\n\nexport default function largeObject(sql, oid, mode = 0x00020000 | 0x00040000) {\n  return new Promise(async(resolve, reject) => {\n    await sql.begin(async sql => {\n      let finish\n      !oid && ([{ oid }] = await sql`select lo_creat(-1) as oid`)\n      const [{ fd }] = await sql`select lo_open(${ oid }, ${ mode }) as fd`\n\n      const lo = {\n        writable,\n        readable,\n        close     : () => sql`select lo_close(${ fd })`.then(finish),\n        tell      : () => sql`select lo_tell64(${ fd })`,\n        read      : (x) => sql`select loread(${ fd }, ${ x }) as data`,\n        write     : (x) => sql`select lowrite(${ fd }, ${ x })`,\n        truncate  : (x) => sql`select lo_truncate64(${ fd }, ${ x })`,\n        seek      : (x, whence = 0) => sql`select lo_lseek64(${ fd }, ${ x }, ${ whence })`,\n        size      : () => sql`\n          select\n            lo_lseek64(${ fd }, location, 0) as position,\n            seek.size\n          from (\n            select\n              lo_lseek64($1, 0, 2) as size,\n              tell.location\n            from (select lo_tell64($1) as location) tell\n          ) seek\n        `\n      }\n\n      resolve(lo)\n\n      return new Promise(async r => finish = r)\n\n      async function readable({\n        highWaterMark = 2048 * 8,\n        start = 0,\n        end = Infinity\n      } = {}) {\n        let max = end - start\n        start && await lo.seek(start)\n        return new Stream.Readable({\n          highWaterMark,\n          async read(size) {\n            const l = size > max ? size - max : size\n            max -= size\n            const [{ data }] = await lo.read(l)\n            this.push(data)\n            if (data.length < size)\n              this.push(null)\n          }\n        })\n      }\n\n      async function writable({\n        highWaterMark = 2048 * 8,\n        start = 0\n      } = {}) {\n        start && await lo.seek(start)\n        return new Stream.Writable({\n          highWaterMark,\n          write(chunk, encoding, callback) {\n            lo.write(chunk).then(() => callback(), callback)\n          }\n        })\n      }\n    }).catch(reject)\n  })\n}\n"],"names":[],"mappings":";;;AAAA;;AAEe,SAAS,YAAY,GAAG,EAAE,GAAG,EAAE,OAAO,aAAa,UAAU;IAC1E,OAAO,IAAI,QAAQ,OAAM,SAAS;QAChC,MAAM,IAAI,KAAK,CAAC,OAAM;YACpB,IAAI;YACJ,CAAC,OAAO,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,MAAM,GAAG,CAAC,0BAA0B,CAAC;YAC1D,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,MAAM,GAAG,CAAC,eAAe,EAAG,IAAK,EAAE,EAAG,KAAM,OAAO,CAAC;YAErE,MAAM,KAAK;gBACT;gBACA;gBACA,OAAY,IAAM,GAAG,CAAC,gBAAgB,EAAG,GAAI,CAAC,CAAC,CAAC,IAAI,CAAC;gBACrD,MAAY,IAAM,GAAG,CAAC,iBAAiB,EAAG,GAAI,CAAC,CAAC;gBAChD,MAAY,CAAC,IAAM,GAAG,CAAC,cAAc,EAAG,GAAI,EAAE,EAAG,EAAG,SAAS,CAAC;gBAC9D,OAAY,CAAC,IAAM,GAAG,CAAC,eAAe,EAAG,GAAI,EAAE,EAAG,EAAG,CAAC,CAAC;gBACvD,UAAY,CAAC,IAAM,GAAG,CAAC,qBAAqB,EAAG,GAAI,EAAE,EAAG,EAAG,CAAC,CAAC;gBAC7D,MAAY,CAAC,GAAG,SAAS,CAAC,GAAK,GAAG,CAAC,kBAAkB,EAAG,GAAI,EAAE,EAAG,EAAG,EAAE,EAAG,OAAQ,CAAC,CAAC;gBACnF,MAAY,IAAM,GAAG,CAAC;;uBAEP,EAAG,GAAI;;;;;;;;QAQtB,CAAC;YACH;YAEA,QAAQ;YAER,OAAO,IAAI,QAAQ,OAAM,IAAK,SAAS;;;YAEvC,eAAe,SAAS,EACtB,gBAAgB,OAAO,CAAC,EACxB,QAAQ,CAAC,EACT,MAAM,QAAQ,EACf,GAAG,CAAC,CAAC;gBACJ,IAAI,MAAM,MAAM;gBAChB,SAAS,MAAM,GAAG,IAAI,CAAC;gBACvB,OAAO,IAAI,qGAAA,CAAA,UAAM,CAAC,QAAQ,CAAC;oBACzB;oBACA,MAAM,MAAK,IAAI;wBACb,MAAM,IAAI,OAAO,MAAM,OAAO,MAAM;wBACpC,OAAO;wBACP,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC;wBACjC,IAAI,CAAC,IAAI,CAAC;wBACV,IAAI,KAAK,MAAM,GAAG,MAChB,IAAI,CAAC,IAAI,CAAC;oBACd;gBACF;YACF;YAEA,eAAe,SAAS,EACtB,gBAAgB,OAAO,CAAC,EACxB,QAAQ,CAAC,EACV,GAAG,CAAC,CAAC;gBACJ,SAAS,MAAM,GAAG,IAAI,CAAC;gBACvB,OAAO,IAAI,qGAAA,CAAA,UAAM,CAAC,QAAQ,CAAC;oBACzB;oBACA,OAAM,KAAK,EAAE,QAAQ,EAAE,QAAQ;wBAC7B,GAAG,KAAK,CAAC,OAAO,IAAI,CAAC,IAAM,YAAY;oBACzC;gBACF;YACF;QACF,GAAG,KAAK,CAAC;IACX;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1748, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/postgres/src/index.js"],"sourcesContent":["import os from 'os'\nimport fs from 'fs'\n\nimport {\n  mergeUserTypes,\n  inferType,\n  Parameter,\n  Identifier,\n  Builder,\n  toPascal,\n  pascal,\n  toCamel,\n  camel,\n  toKebab,\n  kebab,\n  fromPascal,\n  fromCamel,\n  fromKebab\n} from './types.js'\n\nimport Connection from './connection.js'\nimport { Query, CLOSE } from './query.js'\nimport Queue from './queue.js'\nimport { Errors, PostgresError } from './errors.js'\nimport Subscribe from './subscribe.js'\nimport largeObject from './large.js'\n\nObject.assign(Postgres, {\n  PostgresError,\n  toPascal,\n  pascal,\n  toCamel,\n  camel,\n  toKebab,\n  kebab,\n  fromPascal,\n  fromCamel,\n  fromKebab,\n  BigInt: {\n    to: 20,\n    from: [20],\n    parse: x => BigInt(x), // eslint-disable-line\n    serialize: x => x.toString()\n  }\n})\n\nexport default Postgres\n\nfunction Postgres(a, b) {\n  const options = parseOptions(a, b)\n      , subscribe = options.no_subscribe || Subscribe(Postgres, { ...options })\n\n  let ending = false\n\n  const queries = Queue()\n      , connecting = Queue()\n      , reserved = Queue()\n      , closed = Queue()\n      , ended = Queue()\n      , open = Queue()\n      , busy = Queue()\n      , full = Queue()\n      , queues = { connecting, reserved, closed, ended, open, busy, full }\n\n  const connections = [...Array(options.max)].map(() => Connection(options, queues, { onopen, onend, onclose }))\n\n  const sql = Sql(handler)\n\n  Object.assign(sql, {\n    get parameters() { return options.parameters },\n    largeObject: largeObject.bind(null, sql),\n    subscribe,\n    CLOSE,\n    END: CLOSE,\n    PostgresError,\n    options,\n    reserve,\n    listen,\n    begin,\n    close,\n    end\n  })\n\n  return sql\n\n  function Sql(handler) {\n    handler.debug = options.debug\n\n    Object.entries(options.types).reduce((acc, [name, type]) => {\n      acc[name] = (x) => new Parameter(x, type.to)\n      return acc\n    }, typed)\n\n    Object.assign(sql, {\n      types: typed,\n      typed,\n      unsafe,\n      notify,\n      array,\n      json,\n      file\n    })\n\n    return sql\n\n    function typed(value, type) {\n      return new Parameter(value, type)\n    }\n\n    function sql(strings, ...args) {\n      const query = strings && Array.isArray(strings.raw)\n        ? new Query(strings, args, handler, cancel)\n        : typeof strings === 'string' && !args.length\n          ? new Identifier(options.transform.column.to ? options.transform.column.to(strings) : strings)\n          : new Builder(strings, args)\n      return query\n    }\n\n    function unsafe(string, args = [], options = {}) {\n      arguments.length === 2 && !Array.isArray(args) && (options = args, args = [])\n      const query = new Query([string], args, handler, cancel, {\n        prepare: false,\n        ...options,\n        simple: 'simple' in options ? options.simple : args.length === 0\n      })\n      return query\n    }\n\n    function file(path, args = [], options = {}) {\n      arguments.length === 2 && !Array.isArray(args) && (options = args, args = [])\n      const query = new Query([], args, (query) => {\n        fs.readFile(path, 'utf8', (err, string) => {\n          if (err)\n            return query.reject(err)\n\n          query.strings = [string]\n          handler(query)\n        })\n      }, cancel, {\n        ...options,\n        simple: 'simple' in options ? options.simple : args.length === 0\n      })\n      return query\n    }\n  }\n\n  async function listen(name, fn, onlisten) {\n    const listener = { fn, onlisten }\n\n    const sql = listen.sql || (listen.sql = Postgres({\n      ...options,\n      max: 1,\n      idle_timeout: null,\n      max_lifetime: null,\n      fetch_types: false,\n      onclose() {\n        Object.entries(listen.channels).forEach(([name, { listeners }]) => {\n          delete listen.channels[name]\n          Promise.all(listeners.map(l => listen(name, l.fn, l.onlisten).catch(() => { /* noop */ })))\n        })\n      },\n      onnotify(c, x) {\n        c in listen.channels && listen.channels[c].listeners.forEach(l => l.fn(x))\n      }\n    }))\n\n    const channels = listen.channels || (listen.channels = {})\n        , exists = name in channels\n\n    if (exists) {\n      channels[name].listeners.push(listener)\n      const result = await channels[name].result\n      listener.onlisten && listener.onlisten()\n      return { state: result.state, unlisten }\n    }\n\n    channels[name] = { result: sql`listen ${\n      sql.unsafe('\"' + name.replace(/\"/g, '\"\"') + '\"')\n    }`, listeners: [listener] }\n    const result = await channels[name].result\n    listener.onlisten && listener.onlisten()\n    return { state: result.state, unlisten }\n\n    async function unlisten() {\n      if (name in channels === false)\n        return\n\n      channels[name].listeners = channels[name].listeners.filter(x => x !== listener)\n      if (channels[name].listeners.length)\n        return\n\n      delete channels[name]\n      return sql`unlisten ${\n        sql.unsafe('\"' + name.replace(/\"/g, '\"\"') + '\"')\n      }`\n    }\n  }\n\n  async function notify(channel, payload) {\n    return await sql`select pg_notify(${ channel }, ${ '' + payload })`\n  }\n\n  async function reserve() {\n    const queue = Queue()\n    const c = open.length\n      ? open.shift()\n      : await new Promise((resolve, reject) => {\n        const query = { reserve: resolve, reject }\n        queries.push(query)\n        closed.length && connect(closed.shift(), query)\n      })\n\n    move(c, reserved)\n    c.reserved = () => queue.length\n      ? c.execute(queue.shift())\n      : move(c, reserved)\n    c.reserved.release = true\n\n    const sql = Sql(handler)\n    sql.release = () => {\n      c.reserved = null\n      onopen(c)\n    }\n\n    return sql\n\n    function handler(q) {\n      c.queue === full\n        ? queue.push(q)\n        : c.execute(q) || move(c, full)\n    }\n  }\n\n  async function begin(options, fn) {\n    !fn && (fn = options, options = '')\n    const queries = Queue()\n    let savepoints = 0\n      , connection\n      , prepare = null\n\n    try {\n      await sql.unsafe('begin ' + options.replace(/[^a-z ]/ig, ''), [], { onexecute }).execute()\n      return await Promise.race([\n        scope(connection, fn),\n        new Promise((_, reject) => connection.onclose = reject)\n      ])\n    } catch (error) {\n      throw error\n    }\n\n    async function scope(c, fn, name) {\n      const sql = Sql(handler)\n      sql.savepoint = savepoint\n      sql.prepare = x => prepare = x.replace(/[^a-z0-9$-_. ]/gi)\n      let uncaughtError\n        , result\n\n      name && await sql`savepoint ${ sql(name) }`\n      try {\n        result = await new Promise((resolve, reject) => {\n          const x = fn(sql)\n          Promise.resolve(Array.isArray(x) ? Promise.all(x) : x).then(resolve, reject)\n        })\n\n        if (uncaughtError)\n          throw uncaughtError\n      } catch (e) {\n        await (name\n          ? sql`rollback to ${ sql(name) }`\n          : sql`rollback`\n        )\n        throw e instanceof PostgresError && e.code === '25P02' && uncaughtError || e\n      }\n\n      if (!name) {\n        prepare\n          ? await sql`prepare transaction '${ sql.unsafe(prepare) }'`\n          : await sql`commit`\n      }\n\n      return result\n\n      function savepoint(name, fn) {\n        if (name && Array.isArray(name.raw))\n          return savepoint(sql => sql.apply(sql, arguments))\n\n        arguments.length === 1 && (fn = name, name = null)\n        return scope(c, fn, 's' + savepoints++ + (name ? '_' + name : ''))\n      }\n\n      function handler(q) {\n        q.catch(e => uncaughtError || (uncaughtError = e))\n        c.queue === full\n          ? queries.push(q)\n          : c.execute(q) || move(c, full)\n      }\n    }\n\n    function onexecute(c) {\n      connection = c\n      move(c, reserved)\n      c.reserved = () => queries.length\n        ? c.execute(queries.shift())\n        : move(c, reserved)\n    }\n  }\n\n  function move(c, queue) {\n    c.queue.remove(c)\n    queue.push(c)\n    c.queue = queue\n    queue === open\n      ? c.idleTimer.start()\n      : c.idleTimer.cancel()\n    return c\n  }\n\n  function json(x) {\n    return new Parameter(x, 3802)\n  }\n\n  function array(x, type) {\n    if (!Array.isArray(x))\n      return array(Array.from(arguments))\n\n    return new Parameter(x, type || (x.length ? inferType(x) || 25 : 0), options.shared.typeArrayMap)\n  }\n\n  function handler(query) {\n    if (ending)\n      return query.reject(Errors.connection('CONNECTION_ENDED', options, options))\n\n    if (open.length)\n      return go(open.shift(), query)\n\n    if (closed.length)\n      return connect(closed.shift(), query)\n\n    busy.length\n      ? go(busy.shift(), query)\n      : queries.push(query)\n  }\n\n  function go(c, query) {\n    return c.execute(query)\n      ? move(c, busy)\n      : move(c, full)\n  }\n\n  function cancel(query) {\n    return new Promise((resolve, reject) => {\n      query.state\n        ? query.active\n          ? Connection(options).cancel(query.state, resolve, reject)\n          : query.cancelled = { resolve, reject }\n        : (\n          queries.remove(query),\n          query.cancelled = true,\n          query.reject(Errors.generic('57014', 'canceling statement due to user request')),\n          resolve()\n        )\n    })\n  }\n\n  async function end({ timeout = null } = {}) {\n    if (ending)\n      return ending\n\n    await 1\n    let timer\n    return ending = Promise.race([\n      new Promise(r => timeout !== null && (timer = setTimeout(destroy, timeout * 1000, r))),\n      Promise.all(connections.map(c => c.end()).concat(\n        listen.sql ? listen.sql.end({ timeout: 0 }) : [],\n        subscribe.sql ? subscribe.sql.end({ timeout: 0 }) : []\n      ))\n    ]).then(() => clearTimeout(timer))\n  }\n\n  async function close() {\n    await Promise.all(connections.map(c => c.end()))\n  }\n\n  async function destroy(resolve) {\n    await Promise.all(connections.map(c => c.terminate()))\n    while (queries.length)\n      queries.shift().reject(Errors.connection('CONNECTION_DESTROYED', options))\n    resolve()\n  }\n\n  function connect(c, query) {\n    move(c, connecting)\n    c.connect(query)\n    return c\n  }\n\n  function onend(c) {\n    move(c, ended)\n  }\n\n  function onopen(c) {\n    if (queries.length === 0)\n      return move(c, open)\n\n    let max = Math.ceil(queries.length / (connecting.length + 1))\n      , ready = true\n\n    while (ready && queries.length && max-- > 0) {\n      const query = queries.shift()\n      if (query.reserve)\n        return query.reserve(c)\n\n      ready = c.execute(query)\n    }\n\n    ready\n      ? move(c, busy)\n      : move(c, full)\n  }\n\n  function onclose(c, e) {\n    move(c, closed)\n    c.reserved = null\n    c.onclose && (c.onclose(e), c.onclose = null)\n    options.onclose && options.onclose(c.id)\n    queries.length && connect(c, queries.shift())\n  }\n}\n\nfunction parseOptions(a, b) {\n  if (a && a.shared)\n    return a\n\n  const env = process.env // eslint-disable-line\n      , o = (!a || typeof a === 'string' ? b : a) || {}\n      , { url, multihost } = parseUrl(a)\n      , query = [...url.searchParams].reduce((a, [b, c]) => (a[b] = c, a), {})\n      , host = o.hostname || o.host || multihost || url.hostname || env.PGHOST || 'localhost'\n      , port = o.port || url.port || env.PGPORT || 5432\n      , user = o.user || o.username || url.username || env.PGUSERNAME || env.PGUSER || osUsername()\n\n  o.no_prepare && (o.prepare = false)\n  query.sslmode && (query.ssl = query.sslmode, delete query.sslmode)\n  'timeout' in o && (console.log('The timeout option is deprecated, use idle_timeout instead'), o.idle_timeout = o.timeout) // eslint-disable-line\n  query.sslrootcert === 'system' && (query.ssl = 'verify-full')\n\n  const ints = ['idle_timeout', 'connect_timeout', 'max_lifetime', 'max_pipeline', 'backoff', 'keep_alive']\n  const defaults = {\n    max             : 10,\n    ssl             : false,\n    idle_timeout    : null,\n    connect_timeout : 30,\n    max_lifetime    : max_lifetime,\n    max_pipeline    : 100,\n    backoff         : backoff,\n    keep_alive      : 60,\n    prepare         : true,\n    debug           : false,\n    fetch_types     : true,\n    publications    : 'alltables',\n    target_session_attrs: null\n  }\n\n  return {\n    host            : Array.isArray(host) ? host : host.split(',').map(x => x.split(':')[0]),\n    port            : Array.isArray(port) ? port : host.split(',').map(x => parseInt(x.split(':')[1] || port)),\n    path            : o.path || host.indexOf('/') > -1 && host + '/.s.PGSQL.' + port,\n    database        : o.database || o.db || (url.pathname || '').slice(1) || env.PGDATABASE || user,\n    user            : user,\n    pass            : o.pass || o.password || url.password || env.PGPASSWORD || '',\n    ...Object.entries(defaults).reduce(\n      (acc, [k, d]) => {\n        const value = k in o ? o[k] : k in query\n          ? (query[k] === 'disable' || query[k] === 'false' ? false : query[k])\n          : env['PG' + k.toUpperCase()] || d\n        acc[k] = typeof value === 'string' && ints.includes(k)\n          ? +value\n          : value\n        return acc\n      },\n      {}\n    ),\n    connection      : {\n      application_name: env.PGAPPNAME || 'postgres.js',\n      ...o.connection,\n      ...Object.entries(query).reduce((acc, [k, v]) => (k in defaults || (acc[k] = v), acc), {})\n    },\n    types           : o.types || {},\n    target_session_attrs: tsa(o, url, env),\n    onnotice        : o.onnotice,\n    onnotify        : o.onnotify,\n    onclose         : o.onclose,\n    onparameter     : o.onparameter,\n    socket          : o.socket,\n    transform       : parseTransform(o.transform || { undefined: undefined }),\n    parameters      : {},\n    shared          : { retries: 0, typeArrayMap: {} },\n    ...mergeUserTypes(o.types)\n  }\n}\n\nfunction tsa(o, url, env) {\n  const x = o.target_session_attrs || url.searchParams.get('target_session_attrs') || env.PGTARGETSESSIONATTRS\n  if (!x || ['read-write', 'read-only', 'primary', 'standby', 'prefer-standby'].includes(x))\n    return x\n\n  throw new Error('target_session_attrs ' + x + ' is not supported')\n}\n\nfunction backoff(retries) {\n  return (0.5 + Math.random() / 2) * Math.min(3 ** retries / 100, 20)\n}\n\nfunction max_lifetime() {\n  return 60 * (30 + Math.random() * 30)\n}\n\nfunction parseTransform(x) {\n  return {\n    undefined: x.undefined,\n    column: {\n      from: typeof x.column === 'function' ? x.column : x.column && x.column.from,\n      to: x.column && x.column.to\n    },\n    value: {\n      from: typeof x.value === 'function' ? x.value : x.value && x.value.from,\n      to: x.value && x.value.to\n    },\n    row: {\n      from: typeof x.row === 'function' ? x.row : x.row && x.row.from,\n      to: x.row && x.row.to\n    }\n  }\n}\n\nfunction parseUrl(url) {\n  if (!url || typeof url !== 'string')\n    return { url: { searchParams: new Map() } }\n\n  let host = url\n  host = host.slice(host.indexOf('://') + 3).split(/[?/]/)[0]\n  host = decodeURIComponent(host.slice(host.indexOf('@') + 1))\n\n  const urlObj = new URL(url.replace(host, host.split(',')[0]))\n\n  return {\n    url: {\n      username: decodeURIComponent(urlObj.username),\n      password: decodeURIComponent(urlObj.password),\n      host: urlObj.host,\n      hostname: urlObj.hostname,\n      port: urlObj.port,\n      pathname: urlObj.pathname,\n      searchParams: urlObj.searchParams\n    },\n    multihost: host.indexOf(',') > -1 && host\n  }\n}\n\nfunction osUsername() {\n  try {\n    return os.userInfo().username // eslint-disable-line\n  } catch (_) {\n    return process.env.USERNAME || process.env.USER || process.env.LOGNAME  // eslint-disable-line\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2234, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/entity.ts"],"sourcesContent":["export const entityKind = Symbol.for('drizzle:entityKind');\nexport const hasOwnEntityKind = Symbol.for('drizzle:hasOwnEntityKind');\n\nexport interface DrizzleEntity {\n\t[entityKind]: string;\n}\n\nexport type DrizzleEntityClass<T> =\n\t& ((abstract new(...args: any[]) => T) | (new(...args: any[]) => T))\n\t& DrizzleEntity;\n\nexport function is<T extends DrizzleEntityClass<any>>(value: any, type: T): value is InstanceType<T> {\n\tif (!value || typeof value !== 'object') {\n\t\treturn false;\n\t}\n\n\tif (value instanceof type) { // eslint-disable-line no-instanceof/no-instanceof\n\t\treturn true;\n\t}\n\n\tif (!Object.prototype.hasOwnProperty.call(type, entityKind)) {\n\t\tthrow new Error(\n\t\t\t`Class \"${\n\t\t\t\ttype.name ?? '<unknown>'\n\t\t\t}\" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`,\n\t\t);\n\t}\n\n\tlet cls = Object.getPrototypeOf(value).constructor;\n\tif (cls) {\n\t\t// Traverse the prototype chain to find the entityKind\n\t\twhile (cls) {\n\t\t\tif (entityKind in cls && cls[entityKind] === type[entityKind]) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tcls = Object.getPrototypeOf(cls);\n\t\t}\n\t}\n\n\treturn false;\n}\n"],"names":[],"mappings":";;;;;AAAO,MAAM,aAAa,OAAO,GAAA,CAAI,oBAAoB;AAClD,MAAM,mBAAmB,OAAO,GAAA,CAAI,0BAA0B;AAU9D,SAAS,GAAsC,KAAA,EAAY,IAAA,EAAmC;IACpG,IAAI,CAAC,SAAS,OAAO,UAAU,UAAU;QACxC,OAAO;IACR;IAEA,IAAI,iBAAiB,MAAM;QAC1B,OAAO;IACR;IAEA,IAAI,CAAC,OAAO,SAAA,CAAU,cAAA,CAAe,IAAA,CAAK,MAAM,UAAU,GAAG;QAC5D,MAAM,IAAI,MACT,CAAA,OAAA,EACC,KAAK,IAAA,IAAQ,WACd,CAAA,6HAAA,CAAA;IAEF;IAEA,IAAI,MAAM,OAAO,cAAA,CAAe,KAAK,EAAE,WAAA;IACvC,IAAI,KAAK;QAER,MAAO,IAAK;YACX,IAAI,cAAc,OAAO,GAAA,CAAI,UAAU,CAAA,KAAM,IAAA,CAAK,UAAU,CAAA,EAAG;gBAC9D,OAAO;YACR;YAEA,MAAM,OAAO,cAAA,CAAe,GAAG;QAChC;IACD;IAEA,OAAO;AACR","debugId":null}},
    {"offset": {"line": 2268, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/table.utils.ts"],"sourcesContent":["/** @internal */\nexport const TableName = Symbol.for('drizzle:Name');\n"],"names":[],"mappings":";;;AACO,MAAM,YAAY,OAAO,GAAA,CAAI,cAAc","debugId":null}},
    {"offset": {"line": 2278, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/table.ts"],"sourcesContent":["import type { Column, GetColumnData } from './column.ts';\nimport { entityKind } from './entity.ts';\nimport type { OptionalKeyOnly, RequiredKeyOnly } from './operations.ts';\nimport type { SQLWrapper } from './sql/sql.ts';\nimport { TableName } from './table.utils.ts';\nimport type { Simplify, Update } from './utils.ts';\n\nexport interface TableConfig<TColumn extends Column = Column<any>> {\n\tname: string;\n\tschema: string | undefined;\n\tcolumns: Record<string, TColumn>;\n\tdialect: string;\n}\n\nexport type UpdateTableConfig<T extends TableConfig, TUpdate extends Partial<TableConfig>> = Required<\n\tUpdate<T, TUpdate>\n>;\n\n/** @internal */\nexport const Schema = Symbol.for('drizzle:Schema');\n\n/** @internal */\nexport const Columns = Symbol.for('drizzle:Columns');\n\n/** @internal */\nexport const ExtraConfigColumns = Symbol.for('drizzle:ExtraConfigColumns');\n\n/** @internal */\nexport const OriginalName = Symbol.for('drizzle:OriginalName');\n\n/** @internal */\nexport const BaseName = Symbol.for('drizzle:BaseName');\n\n/** @internal */\nexport const IsAlias = Symbol.for('drizzle:IsAlias');\n\n/** @internal */\nexport const ExtraConfigBuilder = Symbol.for('drizzle:ExtraConfigBuilder');\n\nconst IsDrizzleTable = Symbol.for('drizzle:IsDrizzleTable');\n\nexport interface Table<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tT extends TableConfig = TableConfig,\n> extends SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\n\nexport class Table<T extends TableConfig = TableConfig> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Table';\n\n\tdeclare readonly _: {\n\t\treadonly brand: 'Table';\n\t\treadonly config: T;\n\t\treadonly name: T['name'];\n\t\treadonly schema: T['schema'];\n\t\treadonly columns: T['columns'];\n\t\treadonly inferSelect: InferSelectModel<Table<T>>;\n\t\treadonly inferInsert: InferInsertModel<Table<T>>;\n\t};\n\n\tdeclare readonly $inferSelect: InferSelectModel<Table<T>>;\n\tdeclare readonly $inferInsert: InferInsertModel<Table<T>>;\n\n\t/** @internal */\n\tstatic readonly Symbol = {\n\t\tName: TableName as typeof TableName,\n\t\tSchema: Schema as typeof Schema,\n\t\tOriginalName: OriginalName as typeof OriginalName,\n\t\tColumns: Columns as typeof Columns,\n\t\tExtraConfigColumns: ExtraConfigColumns as typeof ExtraConfigColumns,\n\t\tBaseName: BaseName as typeof BaseName,\n\t\tIsAlias: IsAlias as typeof IsAlias,\n\t\tExtraConfigBuilder: ExtraConfigBuilder as typeof ExtraConfigBuilder,\n\t};\n\n\t/**\n\t * @internal\n\t * Can be changed if the table is aliased.\n\t */\n\t[TableName]: string;\n\n\t/**\n\t * @internal\n\t * Used to store the original name of the table, before any aliasing.\n\t */\n\t[OriginalName]: string;\n\n\t/** @internal */\n\t[Schema]: string | undefined;\n\n\t/** @internal */\n\t[Columns]!: T['columns'];\n\n\t/** @internal */\n\t[ExtraConfigColumns]!: Record<string, unknown>;\n\n\t/**\n\t *  @internal\n\t * Used to store the table name before the transformation via the `tableCreator` functions.\n\t */\n\t[BaseName]: string;\n\n\t/** @internal */\n\t[IsAlias] = false;\n\n\t/** @internal */\n\t[IsDrizzleTable] = true;\n\n\t/** @internal */\n\t[ExtraConfigBuilder]: ((self: any) => Record<string, unknown> | unknown[]) | undefined = undefined;\n\n\tconstructor(name: string, schema: string | undefined, baseName: string) {\n\t\tthis[TableName] = this[OriginalName] = name;\n\t\tthis[Schema] = schema;\n\t\tthis[BaseName] = baseName;\n\t}\n}\n\nexport function isTable(table: unknown): table is Table {\n\treturn typeof table === 'object' && table !== null && IsDrizzleTable in table;\n}\n\n/**\n * Any table with a specified boundary.\n *\n * @example\n\t```ts\n\t// Any table with a specific name\n\ttype AnyUsersTable = AnyTable<{ name: 'users' }>;\n\t```\n *\n * To describe any table with any config, simply use `Table` without any type arguments, like this:\n *\n\t```ts\n\tfunction needsTable(table: Table) {\n\t\t...\n\t}\n\t```\n */\nexport type AnyTable<TPartial extends Partial<TableConfig>> = Table<UpdateTableConfig<TableConfig, TPartial>>;\n\nexport function getTableName<T extends Table>(table: T): T['_']['name'] {\n\treturn table[TableName];\n}\n\nexport function getTableUniqueName<T extends Table>(table: T): `${T['_']['schema']}.${T['_']['name']}` {\n\treturn `${table[Schema] ?? 'public'}.${table[TableName]}`;\n}\n\nexport type MapColumnName<TName extends string, TColumn extends Column, TDBColumNames extends boolean> =\n\tTDBColumNames extends true ? TColumn['_']['name']\n\t\t: TName;\n\nexport type InferModelFromColumns<\n\tTColumns extends Record<string, Column>,\n\tTInferMode extends 'select' | 'insert' = 'select',\n\tTConfig extends { dbColumnNames: boolean; override?: boolean } = { dbColumnNames: false; override: false },\n> = Simplify<\n\tTInferMode extends 'insert' ?\n\t\t\t& {\n\t\t\t\t[\n\t\t\t\t\tKey in keyof TColumns & string as RequiredKeyOnly<\n\t\t\t\t\t\tMapColumnName<Key, TColumns[Key], TConfig['dbColumnNames']>,\n\t\t\t\t\t\tTColumns[Key]\n\t\t\t\t\t>\n\t\t\t\t]: GetColumnData<TColumns[Key], 'query'>;\n\t\t\t}\n\t\t\t& {\n\t\t\t\t[\n\t\t\t\t\tKey in keyof TColumns & string as OptionalKeyOnly<\n\t\t\t\t\t\tMapColumnName<Key, TColumns[Key], TConfig['dbColumnNames']>,\n\t\t\t\t\t\tTColumns[Key],\n\t\t\t\t\t\tTConfig['override']\n\t\t\t\t\t>\n\t\t\t\t]?: GetColumnData<TColumns[Key], 'query'> | undefined;\n\t\t\t}\n\t\t: {\n\t\t\t[\n\t\t\t\tKey in keyof TColumns & string as MapColumnName<\n\t\t\t\t\tKey,\n\t\t\t\t\tTColumns[Key],\n\t\t\t\t\tTConfig['dbColumnNames']\n\t\t\t\t>\n\t\t\t]: GetColumnData<TColumns[Key], 'query'>;\n\t\t}\n>;\n\n/** @deprecated Use one of the alternatives: {@link InferSelectModel} / {@link InferInsertModel}, or `table.$inferSelect` / `table.$inferInsert`\n */\nexport type InferModel<\n\tTTable extends Table,\n\tTInferMode extends 'select' | 'insert' = 'select',\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = InferModelFromColumns<TTable['_']['columns'], TInferMode, TConfig>;\n\nexport type InferSelectModel<\n\tTTable extends Table,\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = InferModelFromColumns<TTable['_']['columns'], 'select', TConfig>;\n\nexport type InferInsertModel<\n\tTTable extends Table,\n\tTConfig extends { dbColumnNames: boolean; override?: boolean } = { dbColumnNames: false; override: false },\n> = InferModelFromColumns<TTable['_']['columns'], 'insert', TConfig>;\n\nexport type InferEnum<T> = T extends { enumValues: readonly (infer U)[] } ? U\n\t: never;\n"],"names":[],"mappings":";;;;;;;;;;;;;AACA,SAAS,kBAAkB;AAG3B,SAAS,iBAAiB;;;AAenB,MAAM,SAAS,OAAO,GAAA,CAAI,gBAAgB;AAG1C,MAAM,UAAU,OAAO,GAAA,CAAI,iBAAiB;AAG5C,MAAM,qBAAqB,OAAO,GAAA,CAAI,4BAA4B;AAGlE,MAAM,eAAe,OAAO,GAAA,CAAI,sBAAsB;AAGtD,MAAM,WAAW,OAAO,GAAA,CAAI,kBAAkB;AAG9C,MAAM,UAAU,OAAO,GAAA,CAAI,iBAAiB;AAG5C,MAAM,qBAAqB,OAAO,GAAA,CAAI,4BAA4B;AAEzE,MAAM,iBAAiB,OAAO,GAAA,CAAI,wBAAwB;AASnD,MAAM,MAAiE;IAC7E,OAAA,0IAAiB,aAAU,CAAA,GAAY,QAAA;IAAA,cAAA,GAgBvC,OAAgB,SAAS;QACxB,uJAAM,YAAA;QACN;QACA;QACA;QACA;QACA;QACA;QACA;IACD,EAAA;IAAA;;;GAAA,GAMA,kJAAC,YAAS,CAAA,CAAA;IAAA;;;GAAA,GAMV,CAAC,YAAY,CAAA,CAAA;IAAA,cAAA,GAGb,CAAC,MAAM,CAAA,CAAA;IAAA,cAAA,GAGP,CAAC,OAAO,CAAA,CAAA;IAAA,cAAA,GAGR,CAAC,kBAAkB,CAAA,CAAA;IAAA;;;GAAA,GAMnB,CAAC,QAAQ,CAAA,CAAA;IAAA,cAAA,GAGT,CAAC,OAAO,CAAA,GAAI,MAAA;IAAA,cAAA,GAGZ,CAAC,cAAc,CAAA,GAAI,KAAA;IAAA,cAAA,GAGnB,CAAC,kBAAkB,CAAA,GAAsE,KAAA,EAAA;IAEzF,YAAY,IAAA,EAAc,MAAA,EAA4B,QAAA,CAAkB;QACvE,IAAA,kJAAK,YAAS,CAAA,GAAI,IAAA,CAAK,YAAY,CAAA,GAAI;QACvC,IAAA,CAAK,MAAM,CAAA,GAAI;QACf,IAAA,CAAK,QAAQ,CAAA,GAAI;IAClB;AACD;AAEO,SAAS,QAAQ,KAAA,EAAgC;IACvD,OAAO,OAAO,UAAU,YAAY,UAAU,QAAQ,kBAAkB;AACzE;AAqBO,SAAS,aAA8B,KAAA,EAA0B;IACvE,OAAO,KAAA,kJAAM,YAAS,CAAA;AACvB;AAEO,SAAS,mBAAoC,KAAA,EAAmD;IACtG,OAAO,GAAG,KAAA,CAAM,MAAM,CAAA,IAAK,QAAQ,CAAA,CAAA,EAAI,KAAA,kJAAM,YAAS,CAAC,EAAA;AACxD","debugId":null}},
    {"offset": {"line": 2354, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/column.ts"],"sourcesContent":["import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tGeneratedColumnConfig,\n\tGeneratedIdentityConfig,\n} from './column-builder.ts';\nimport { entityKind } from './entity.ts';\nimport type { DriverValueMapper, SQL, SQLWrapper } from './sql/sql.ts';\nimport type { Table } from './table.ts';\nimport type { Update } from './utils.ts';\n\nexport interface ColumnBaseConfig<\n\tTDataType extends ColumnDataType,\n\tTColumnType extends string,\n> extends ColumnBuilderBaseConfig<TDataType, TColumnType> {\n\ttableName: string;\n\tnotNull: boolean;\n\thasDefault: boolean;\n\tisPrimaryKey: boolean;\n\tisAutoincrement: boolean;\n\thasRuntimeDefault: boolean;\n}\n\nexport type ColumnTypeConfig<T extends ColumnBaseConfig<ColumnDataType, string>, TTypeConfig extends object> = T & {\n\tbrand: 'Column';\n\ttableName: T['tableName'];\n\tname: T['name'];\n\tdataType: T['dataType'];\n\tcolumnType: T['columnType'];\n\tdata: T['data'];\n\tdriverParam: T['driverParam'];\n\tnotNull: T['notNull'];\n\thasDefault: T['hasDefault'];\n\tisPrimaryKey: T['isPrimaryKey'];\n\tisAutoincrement: T['isAutoincrement'];\n\thasRuntimeDefault: T['hasRuntimeDefault'];\n\tenumValues: T['enumValues'];\n\tbaseColumn: T extends { baseColumn: infer U } ? U : unknown;\n\tgenerated: GeneratedColumnConfig<T['data']> | undefined;\n\tidentity: undefined | 'always' | 'byDefault';\n} & TTypeConfig;\n\nexport type ColumnRuntimeConfig<TData, TRuntimeConfig extends object> = ColumnBuilderRuntimeConfig<\n\tTData,\n\tTRuntimeConfig\n>;\n\nexport interface Column<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTRuntimeConfig extends object = object,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTTypeConfig extends object = object,\n> extends DriverValueMapper<T['data'], T['driverParam']>, SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\n/*\n\t`Column` only accepts a full `ColumnConfig` as its generic.\n\tTo infer parts of the config, use `AnyColumn` that accepts a partial config.\n\tSee `GetColumnData` for example usage of inferring.\n*/\nexport abstract class Column<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n> implements DriverValueMapper<T['data'], T['driverParam']>, SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Column';\n\n\tdeclare readonly _: ColumnTypeConfig<T, TTypeConfig>;\n\n\treadonly name: string;\n\treadonly keyAsName: boolean;\n\treadonly primary: boolean;\n\treadonly notNull: boolean;\n\treadonly default: T['data'] | SQL | undefined;\n\treadonly defaultFn: (() => T['data'] | SQL) | undefined;\n\treadonly onUpdateFn: (() => T['data'] | SQL) | undefined;\n\treadonly hasDefault: boolean;\n\treadonly isUnique: boolean;\n\treadonly uniqueName: string | undefined;\n\treadonly uniqueType: string | undefined;\n\treadonly dataType: T['dataType'];\n\treadonly columnType: T['columnType'];\n\treadonly enumValues: T['enumValues'] = undefined;\n\treadonly generated: GeneratedColumnConfig<T['data']> | undefined = undefined;\n\treadonly generatedIdentity: GeneratedIdentityConfig | undefined = undefined;\n\n\tprotected config: ColumnRuntimeConfig<T['data'], TRuntimeConfig>;\n\n\tconstructor(\n\t\treadonly table: Table,\n\t\tconfig: ColumnRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tthis.config = config;\n\t\tthis.name = config.name;\n\t\tthis.keyAsName = config.keyAsName;\n\t\tthis.notNull = config.notNull;\n\t\tthis.default = config.default;\n\t\tthis.defaultFn = config.defaultFn;\n\t\tthis.onUpdateFn = config.onUpdateFn;\n\t\tthis.hasDefault = config.hasDefault;\n\t\tthis.primary = config.primaryKey;\n\t\tthis.isUnique = config.isUnique;\n\t\tthis.uniqueName = config.uniqueName;\n\t\tthis.uniqueType = config.uniqueType;\n\t\tthis.dataType = config.dataType as T['dataType'];\n\t\tthis.columnType = config.columnType;\n\t\tthis.generated = config.generated;\n\t\tthis.generatedIdentity = config.generatedIdentity;\n\t}\n\n\tabstract getSQLType(): string;\n\n\tmapFromDriverValue(value: unknown): unknown {\n\t\treturn value;\n\t}\n\n\tmapToDriverValue(value: unknown): unknown {\n\t\treturn value;\n\t}\n\n\t// ** @internal */\n\tshouldDisableInsert(): boolean {\n\t\treturn this.config.generated !== undefined && this.config.generated.type !== 'byDefault';\n\t}\n}\n\nexport type UpdateColConfig<\n\tT extends ColumnBaseConfig<ColumnDataType, string>,\n\tTUpdate extends Partial<ColumnBaseConfig<ColumnDataType, string>>,\n> = Update<T, TUpdate>;\n\nexport type AnyColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = Column<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n\nexport type GetColumnData<TColumn extends Column, TInferMode extends 'query' | 'raw' = 'query'> =\n\t// dprint-ignore\n\tTInferMode extends 'raw' // Raw mode\n\t\t? TColumn['_']['data'] // Just return the underlying type\n\t\t: TColumn['_']['notNull'] extends true // Query mode\n\t\t? TColumn['_']['data'] // Query mode, not null\n\t\t: TColumn['_']['data'] | null; // Query mode, nullable\n\nexport type InferColumnsDataTypes<TColumns extends Record<string, Column>> = {\n\t[Key in keyof TColumns]: GetColumnData<TColumns[Key], 'query'>;\n};\n"],"names":[],"mappings":";;;AAOA,SAAS,kBAAkB;;AAuDpB,MAAe,OAIkD;IAwBvE,YACU,KAAA,EACT,MAAA,CACC;QAFQ,IAAA,CAAA,KAAA,GAAA;QAGT,IAAA,CAAK,MAAA,GAAS;QACd,IAAA,CAAK,IAAA,GAAO,OAAO,IAAA;QACnB,IAAA,CAAK,SAAA,GAAY,OAAO,SAAA;QACxB,IAAA,CAAK,OAAA,GAAU,OAAO,OAAA;QACtB,IAAA,CAAK,OAAA,GAAU,OAAO,OAAA;QACtB,IAAA,CAAK,SAAA,GAAY,OAAO,SAAA;QACxB,IAAA,CAAK,UAAA,GAAa,OAAO,UAAA;QACzB,IAAA,CAAK,UAAA,GAAa,OAAO,UAAA;QACzB,IAAA,CAAK,OAAA,GAAU,OAAO,UAAA;QACtB,IAAA,CAAK,QAAA,GAAW,OAAO,QAAA;QACvB,IAAA,CAAK,UAAA,GAAa,OAAO,UAAA;QACzB,IAAA,CAAK,UAAA,GAAa,OAAO,UAAA;QACzB,IAAA,CAAK,QAAA,GAAW,OAAO,QAAA;QACvB,IAAA,CAAK,UAAA,GAAa,OAAO,UAAA;QACzB,IAAA,CAAK,SAAA,GAAY,OAAO,SAAA;QACxB,IAAA,CAAK,iBAAA,GAAoB,OAAO,iBAAA;IACjC;IA3CA,OAAA,0IAAiB,aAAU,CAAA,GAAY,SAAA;IAI9B,KAAA;IACA,UAAA;IACA,QAAA;IACA,QAAA;IACA,QAAA;IACA,UAAA;IACA,WAAA;IACA,WAAA;IACA,SAAA;IACA,WAAA;IACA,WAAA;IACA,SAAA;IACA,WAAA;IACA,aAA8B,KAAA,EAAA;IAC9B,YAA0D,KAAA,EAAA;IAC1D,oBAAyD,KAAA,EAAA;IAExD,OAAA;IA0BV,mBAAmB,KAAA,EAAyB;QAC3C,OAAO;IACR;IAEA,iBAAiB,KAAA,EAAyB;QACzC,OAAO;IACR;IAAA,kBAAA;IAGA,sBAA+B;QAC9B,OAAO,IAAA,CAAK,MAAA,CAAO,SAAA,KAAc,KAAA,KAAa,IAAA,CAAK,MAAA,CAAO,SAAA,CAAU,IAAA,KAAS;IAC9E;AACD","debugId":null}},
    {"offset": {"line": 2414, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/column-builder.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { Column } from './column.ts';\nimport type { GelColumn, GelExtraConfigColumn } from './gel-core/index.ts';\nimport type { MySqlColumn } from './mysql-core/index.ts';\nimport type { ExtraConfigColumn, PgColumn, PgSequenceOptions } from './pg-core/index.ts';\nimport type { SingleStoreColumn } from './singlestore-core/index.ts';\nimport type { SQL } from './sql/sql.ts';\nimport type { SQLiteColumn } from './sqlite-core/index.ts';\nimport type { Assume, Simplify } from './utils.ts';\n\nexport type ColumnDataType =\n\t| 'string'\n\t| 'number'\n\t| 'boolean'\n\t| 'array'\n\t| 'json'\n\t| 'date'\n\t| 'bigint'\n\t| 'custom'\n\t| 'buffer'\n\t| 'dateDuration'\n\t| 'duration'\n\t| 'relDuration'\n\t| 'localTime'\n\t| 'localDate'\n\t| 'localDateTime';\n\nexport type Dialect = 'pg' | 'mysql' | 'sqlite' | 'singlestore' | 'common' | 'gel';\n\nexport type GeneratedStorageMode = 'virtual' | 'stored';\n\nexport type GeneratedType = 'always' | 'byDefault';\n\nexport type GeneratedColumnConfig<TDataType> = {\n\tas: TDataType | SQL | (() => SQL);\n\ttype?: GeneratedType;\n\tmode?: GeneratedStorageMode;\n};\n\nexport type GeneratedIdentityConfig = {\n\tsequenceName?: string;\n\tsequenceOptions?: PgSequenceOptions;\n\ttype: 'always' | 'byDefault';\n};\n\nexport interface ColumnBuilderBaseConfig<TDataType extends ColumnDataType, TColumnType extends string> {\n\tname: string;\n\tdataType: TDataType;\n\tcolumnType: TColumnType;\n\tdata: unknown;\n\tdriverParam: unknown;\n\tenumValues: string[] | undefined;\n}\n\nexport type MakeColumnConfig<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTableName extends string,\n\tTData = T extends { $type: infer U } ? U : T['data'],\n> = {\n\tname: T['name'];\n\ttableName: TTableName;\n\tdataType: T['dataType'];\n\tcolumnType: T['columnType'];\n\tdata: TData;\n\tdriverParam: T['driverParam'];\n\tnotNull: T extends { notNull: true } ? true : false;\n\thasDefault: T extends { hasDefault: true } ? true : false;\n\tisPrimaryKey: T extends { isPrimaryKey: true } ? true : false;\n\tisAutoincrement: T extends { isAutoincrement: true } ? true : false;\n\thasRuntimeDefault: T extends { hasRuntimeDefault: true } ? true : false;\n\tenumValues: T['enumValues'];\n\tbaseColumn: T extends { baseBuilder: infer U extends ColumnBuilderBase } ? BuildColumn<TTableName, U, 'common'>\n\t\t: never;\n\tidentity: T extends { identity: 'always' } ? 'always' : T extends { identity: 'byDefault' } ? 'byDefault' : undefined;\n\tgenerated: T extends { generated: infer G } ? unknown extends G ? undefined\n\t\t: G extends undefined ? undefined\n\t\t: G\n\t\t: undefined;\n} & {};\n\nexport type ColumnBuilderTypeConfig<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> = Simplify<\n\t& {\n\t\tbrand: 'ColumnBuilder';\n\t\tname: T['name'];\n\t\tdataType: T['dataType'];\n\t\tcolumnType: T['columnType'];\n\t\tdata: T['data'];\n\t\tdriverParam: T['driverParam'];\n\t\tnotNull: T extends { notNull: infer U } ? U : boolean;\n\t\thasDefault: T extends { hasDefault: infer U } ? U : boolean;\n\t\tenumValues: T['enumValues'];\n\t\tidentity: T extends { identity: infer U } ? U : unknown;\n\t\tgenerated: T extends { generated: infer G } ? G extends undefined ? unknown : G : unknown;\n\t}\n\t& TTypeConfig\n>;\n\nexport type ColumnBuilderRuntimeConfig<TData, TRuntimeConfig extends object = object> = {\n\tname: string;\n\tkeyAsName: boolean;\n\tnotNull: boolean;\n\tdefault: TData | SQL | undefined;\n\tdefaultFn: (() => TData | SQL) | undefined;\n\tonUpdateFn: (() => TData | SQL) | undefined;\n\thasDefault: boolean;\n\tprimaryKey: boolean;\n\tisUnique: boolean;\n\tuniqueName: string | undefined;\n\tuniqueType: string | undefined;\n\tdataType: string;\n\tcolumnType: string;\n\tgenerated: GeneratedColumnConfig<TData> | undefined;\n\tgeneratedIdentity: GeneratedIdentityConfig | undefined;\n} & TRuntimeConfig;\n\nexport interface ColumnBuilderExtraConfig {\n\tprimaryKeyHasDefault?: boolean;\n}\n\nexport type NotNull<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\tnotNull: true;\n\t};\n};\n\nexport type HasDefault<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\thasDefault: true;\n\t};\n};\n\nexport type IsPrimaryKey<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\tisPrimaryKey: true;\n\t};\n};\n\nexport type IsAutoincrement<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\tisAutoincrement: true;\n\t};\n};\n\nexport type HasRuntimeDefault<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\thasRuntimeDefault: true;\n\t};\n};\n\nexport type $Type<T extends ColumnBuilderBase, TType> = T & {\n\t_: {\n\t\t$type: TType;\n\t};\n};\n\nexport type HasGenerated<T extends ColumnBuilderBase, TGenerated extends {} = {}> = T & {\n\t_: {\n\t\thasDefault: true;\n\t\tgenerated: TGenerated;\n\t};\n};\n\nexport type IsIdentity<\n\tT extends ColumnBuilderBase,\n\tTType extends 'always' | 'byDefault',\n> = T & {\n\t_: {\n\t\tnotNull: true;\n\t\thasDefault: true;\n\t\tidentity: TType;\n\t};\n};\nexport interface ColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> {\n\t_: ColumnBuilderTypeConfig<T, TTypeConfig>;\n}\n\n// To understand how to use `ColumnBuilder` and `AnyColumnBuilder`, see `Column` and `AnyColumn` documentation.\nexport abstract class ColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = ColumnBuilderExtraConfig,\n> implements ColumnBuilderBase<T, TTypeConfig> {\n\tstatic readonly [entityKind]: string = 'ColumnBuilder';\n\n\tdeclare _: ColumnBuilderTypeConfig<T, TTypeConfig>;\n\n\tprotected config: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>;\n\n\tconstructor(name: T['name'], dataType: T['dataType'], columnType: T['columnType']) {\n\t\tthis.config = {\n\t\t\tname,\n\t\t\tkeyAsName: name === '',\n\t\t\tnotNull: false,\n\t\t\tdefault: undefined,\n\t\t\thasDefault: false,\n\t\t\tprimaryKey: false,\n\t\t\tisUnique: false,\n\t\t\tuniqueName: undefined,\n\t\t\tuniqueType: undefined,\n\t\t\tdataType,\n\t\t\tcolumnType,\n\t\t\tgenerated: undefined,\n\t\t} as ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>;\n\t}\n\n\t/**\n\t * Changes the data type of the column. Commonly used with `json` columns. Also, useful for branded types.\n\t *\n\t * @example\n\t * ```ts\n\t * const users = pgTable('users', {\n\t * \tid: integer('id').$type<UserId>().primaryKey(),\n\t * \tdetails: json('details').$type<UserDetails>().notNull(),\n\t * });\n\t * ```\n\t */\n\t$type<TType>(): $Type<this, TType> {\n\t\treturn this as $Type<this, TType>;\n\t}\n\n\t/**\n\t * Adds a `not null` clause to the column definition.\n\t *\n\t * Affects the `select` model of the table - columns *without* `not null` will be nullable on select.\n\t */\n\tnotNull(): NotNull<this> {\n\t\tthis.config.notNull = true;\n\t\treturn this as NotNull<this>;\n\t}\n\n\t/**\n\t * Adds a `default <value>` clause to the column definition.\n\t *\n\t * Affects the `insert` model of the table - columns *with* `default` are optional on insert.\n\t *\n\t * If you need to set a dynamic default value, use {@link $defaultFn} instead.\n\t */\n\tdefault(value: (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL): HasDefault<this> {\n\t\tthis.config.default = value;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasDefault<this>;\n\t}\n\n\t/**\n\t * Adds a dynamic default value to the column.\n\t * The function will be called when the row is inserted, and the returned value will be used as the column value.\n\t *\n\t * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n\t */\n\t$defaultFn(\n\t\tfn: () => (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL,\n\t): HasRuntimeDefault<HasDefault<this>> {\n\t\tthis.config.defaultFn = fn;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasRuntimeDefault<HasDefault<this>>;\n\t}\n\n\t/**\n\t * Alias for {@link $defaultFn}.\n\t */\n\t$default = this.$defaultFn;\n\n\t/**\n\t * Adds a dynamic update value to the column.\n\t * The function will be called when the row is updated, and the returned value will be used as the column value if none is provided.\n\t * If no `default` (or `$defaultFn`) value is provided, the function will be called when the row is inserted as well, and the returned value will be used as the column value.\n\t *\n\t * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n\t */\n\t$onUpdateFn(\n\t\tfn: () => (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL,\n\t): HasDefault<this> {\n\t\tthis.config.onUpdateFn = fn;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasDefault<this>;\n\t}\n\n\t/**\n\t * Alias for {@link $onUpdateFn}.\n\t */\n\t$onUpdate = this.$onUpdateFn;\n\n\t/**\n\t * Adds a `primary key` clause to the column definition. This implicitly makes the column `not null`.\n\t *\n\t * In SQLite, `integer primary key` implicitly makes the column auto-incrementing.\n\t */\n\tprimaryKey(): TExtraConfig['primaryKeyHasDefault'] extends true ? IsPrimaryKey<HasDefault<NotNull<this>>>\n\t\t: IsPrimaryKey<NotNull<this>>\n\t{\n\t\tthis.config.primaryKey = true;\n\t\tthis.config.notNull = true;\n\t\treturn this as TExtraConfig['primaryKeyHasDefault'] extends true ? IsPrimaryKey<HasDefault<NotNull<this>>>\n\t\t\t: IsPrimaryKey<NotNull<this>>;\n\t}\n\n\tabstract generatedAlwaysAs(\n\t\tas: SQL | T['data'] | (() => SQL),\n\t\tconfig?: Partial<GeneratedColumnConfig<unknown>>,\n\t): HasGenerated<this, {\n\t\ttype: 'always';\n\t}>;\n\n\t/** @internal Sets the name of the column to the key within the table definition if a name was not given. */\n\tsetName(name: string) {\n\t\tif (this.config.name !== '') return;\n\t\tthis.config.name = name;\n\t}\n}\n\nexport type BuildColumn<\n\tTTableName extends string,\n\tTBuilder extends ColumnBuilderBase,\n\tTDialect extends Dialect,\n> = TDialect extends 'pg' ? PgColumn<\n\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t{},\n\t\tSimplify<Omit<TBuilder['_'], keyof MakeColumnConfig<TBuilder['_'], TTableName> | 'brand' | 'dialect'>>\n\t>\n\t: TDialect extends 'mysql' ? MySqlColumn<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<\n\t\t\t\tOmit<\n\t\t\t\t\tTBuilder['_'],\n\t\t\t\t\t| keyof MakeColumnConfig<TBuilder['_'], TTableName>\n\t\t\t\t\t| 'brand'\n\t\t\t\t\t| 'dialect'\n\t\t\t\t\t| 'primaryKeyHasDefault'\n\t\t\t\t\t| 'mysqlColumnBuilderBrand'\n\t\t\t\t>\n\t\t\t>\n\t\t>\n\t: TDialect extends 'sqlite' ? SQLiteColumn<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<Omit<TBuilder['_'], keyof MakeColumnConfig<TBuilder['_'], TTableName> | 'brand' | 'dialect'>>\n\t\t>\n\t: TDialect extends 'common' ? Column<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<Omit<TBuilder['_'], keyof MakeColumnConfig<TBuilder['_'], TTableName> | 'brand' | 'dialect'>>\n\t\t>\n\t: TDialect extends 'singlestore' ? SingleStoreColumn<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<\n\t\t\t\tOmit<\n\t\t\t\t\tTBuilder['_'],\n\t\t\t\t\t| keyof MakeColumnConfig<TBuilder['_'], TTableName>\n\t\t\t\t\t| 'brand'\n\t\t\t\t\t| 'dialect'\n\t\t\t\t\t| 'primaryKeyHasDefault'\n\t\t\t\t\t| 'singlestoreColumnBuilderBrand'\n\t\t\t\t>\n\t\t\t>\n\t\t>\n\t: TDialect extends 'gel' ? GelColumn<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<Omit<TBuilder['_'], keyof MakeColumnConfig<TBuilder['_'], TTableName> | 'brand' | 'dialect'>>\n\t\t>\n\t: never;\n\nexport type BuildIndexColumn<\n\tTDialect extends Dialect,\n> = TDialect extends 'pg' ? ExtraConfigColumn\n\t: TDialect extends 'gel' ? GelExtraConfigColumn\n\t: never;\n\n// TODO\n// try to make sql as well + indexRaw\n\n// optional after everything will be working as expected\n// also try to leave only needed methods for extraConfig\n// make an error if I pass .asc() to fk and so on\n\nexport type BuildColumns<\n\tTTableName extends string,\n\tTConfigMap extends Record<string, ColumnBuilderBase>,\n\tTDialect extends Dialect,\n> =\n\t& {\n\t\t[Key in keyof TConfigMap]: BuildColumn<TTableName, {\n\t\t\t_:\n\t\t\t\t& Omit<TConfigMap[Key]['_'], 'name'>\n\t\t\t\t& { name: TConfigMap[Key]['_']['name'] extends '' ? Assume<Key, string> : TConfigMap[Key]['_']['name'] };\n\t\t}, TDialect>;\n\t}\n\t& {};\n\nexport type BuildExtraConfigColumns<\n\t_TTableName extends string,\n\tTConfigMap extends Record<string, ColumnBuilderBase>,\n\tTDialect extends Dialect,\n> =\n\t& {\n\t\t[Key in keyof TConfigMap]: BuildIndexColumn<TDialect>;\n\t}\n\t& {};\n\nexport type ChangeColumnTableName<TColumn extends Column, TAlias extends string, TDialect extends Dialect> =\n\tTDialect extends 'pg' ? PgColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'mysql' ? MySqlColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'singlestore' ? SingleStoreColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'sqlite' ? SQLiteColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'gel' ? GelColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: never;\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;;AAwLpB,MAAe,cAKyB;IAC9C,OAAA,0IAAiB,aAAU,CAAA,GAAY,gBAAA;IAI7B,OAAA;IAEV,YAAY,IAAA,EAAiB,QAAA,EAAyB,UAAA,CAA6B;QAClF,IAAA,CAAK,MAAA,GAAS;YACb;YACA,WAAW,SAAS;YACpB,SAAS;YACT,SAAS,KAAA;YACT,YAAY;YACZ,YAAY;YACZ,UAAU;YACV,YAAY,KAAA;YACZ,YAAY,KAAA;YACZ;YACA;YACA,WAAW,KAAA;QACZ;IACD;IAAA;;;;;;;;;;GAAA,GAaA,QAAmC;QAClC,OAAO,IAAA;IACR;IAAA;;;;GAAA,GAOA,UAAyB;QACxB,IAAA,CAAK,MAAA,CAAO,OAAA,GAAU;QACtB,OAAO,IAAA;IACR;IAAA;;;;;;GAAA,GASA,QAAQ,KAAA,EAA+F;QACtG,IAAA,CAAK,MAAA,CAAO,OAAA,GAAU;QACtB,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,OAAO,IAAA;IACR;IAAA;;;;;GAAA,GAQA,WACC,EAAA,EACsC;QACtC,IAAA,CAAK,MAAA,CAAO,SAAA,GAAY;QACxB,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,OAAO,IAAA;IACR;IAAA;;GAAA,GAKA,WAAW,IAAA,CAAK,UAAA,CAAA;IAAA;;;;;;GAAA,GAShB,YACC,EAAA,EACmB;QACnB,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,OAAO,IAAA;IACR;IAAA;;GAAA,GAKA,YAAY,IAAA,CAAK,WAAA,CAAA;IAAA;;;;GAAA,GAOjB,aAEA;QACC,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,IAAA,CAAK,MAAA,CAAO,OAAA,GAAU;QACtB,OAAO,IAAA;IAER;IAAA,0GAAA,GAUA,QAAQ,IAAA,EAAc;QACrB,IAAI,IAAA,CAAK,MAAA,CAAO,IAAA,KAAS,GAAI,CAAA;QAC7B,IAAA,CAAK,MAAA,CAAO,IAAA,GAAO;IACpB;AACD","debugId":null}},
    {"offset": {"line": 2517, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/foreign-keys.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { TableName } from '~/table.utils.ts';\nimport type { AnyPgColumn, PgColumn } from './columns/index.ts';\nimport type { PgTable } from './table.ts';\n\nexport type UpdateDeleteAction = 'cascade' | 'restrict' | 'no action' | 'set null' | 'set default';\n\nexport type Reference = () => {\n\treadonly name?: string;\n\treadonly columns: PgColumn[];\n\treadonly foreignTable: PgTable;\n\treadonly foreignColumns: PgColumn[];\n};\n\nexport class ForeignKeyBuilder {\n\tstatic readonly [entityKind]: string = 'PgForeignKeyBuilder';\n\n\t/** @internal */\n\treference: Reference;\n\n\t/** @internal */\n\t_onUpdate: UpdateDeleteAction | undefined = 'no action';\n\n\t/** @internal */\n\t_onDelete: UpdateDeleteAction | undefined = 'no action';\n\n\tconstructor(\n\t\tconfig: () => {\n\t\t\tname?: string;\n\t\t\tcolumns: PgColumn[];\n\t\t\tforeignColumns: PgColumn[];\n\t\t},\n\t\tactions?: {\n\t\t\tonUpdate?: UpdateDeleteAction;\n\t\t\tonDelete?: UpdateDeleteAction;\n\t\t} | undefined,\n\t) {\n\t\tthis.reference = () => {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn { name, columns, foreignTable: foreignColumns[0]!.table as PgTable, foreignColumns };\n\t\t};\n\t\tif (actions) {\n\t\t\tthis._onUpdate = actions.onUpdate;\n\t\t\tthis._onDelete = actions.onDelete;\n\t\t}\n\t}\n\n\tonUpdate(action: UpdateDeleteAction): this {\n\t\tthis._onUpdate = action === undefined ? 'no action' : action;\n\t\treturn this;\n\t}\n\n\tonDelete(action: UpdateDeleteAction): this {\n\t\tthis._onDelete = action === undefined ? 'no action' : action;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): ForeignKey {\n\t\treturn new ForeignKey(table, this);\n\t}\n}\n\nexport type AnyForeignKeyBuilder = ForeignKeyBuilder;\n\nexport class ForeignKey {\n\tstatic readonly [entityKind]: string = 'PgForeignKey';\n\n\treadonly reference: Reference;\n\treadonly onUpdate: UpdateDeleteAction | undefined;\n\treadonly onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(readonly table: PgTable, builder: ForeignKeyBuilder) {\n\t\tthis.reference = builder.reference;\n\t\tthis.onUpdate = builder._onUpdate;\n\t\tthis.onDelete = builder._onDelete;\n\t}\n\n\tgetName(): string {\n\t\tconst { name, columns, foreignColumns } = this.reference();\n\t\tconst columnNames = columns.map((column) => column.name);\n\t\tconst foreignColumnNames = foreignColumns.map((column) => column.name);\n\t\tconst chunks = [\n\t\t\tthis.table[TableName],\n\t\t\t...columnNames,\n\t\t\tforeignColumns[0]!.table[TableName],\n\t\t\t...foreignColumnNames,\n\t\t];\n\t\treturn name ?? `${chunks.join('_')}_fk`;\n\t}\n}\n\ntype ColumnsWithTable<\n\tTTableName extends string,\n\tTColumns extends PgColumn[],\n> = { [Key in keyof TColumns]: AnyPgColumn<{ tableName: TTableName }> };\n\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnyPgColumn<{ tableName: TTableName }>, ...AnyPgColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder {\n\tfunction mappedConfig() {\n\t\tconst { name, columns, foreignColumns } = config;\n\t\treturn {\n\t\t\tname,\n\t\t\tcolumns,\n\t\t\tforeignColumns,\n\t\t};\n\t}\n\n\treturn new ForeignKeyBuilder(mappedConfig);\n}\n"],"names":[],"mappings":";;;;;AAAA,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;;;AAanB,MAAM,kBAAkB;IAC9B,OAAA,0IAAiB,aAAU,CAAA,GAAY,sBAAA;IAAA,cAAA,GAGvC,UAAA;IAAA,cAAA,GAGA,YAA4C,YAAA;IAAA,cAAA,GAG5C,YAA4C,YAAA;IAE5C,YACC,MAAA,EAKA,OAAA,CAIC;QACD,IAAA,CAAK,SAAA,GAAY,MAAM;YACtB,MAAM,EAAE,IAAA,EAAM,OAAA,EAAS,cAAA,CAAe,CAAA,GAAI,OAAO;YACjD,OAAO;gBAAE;gBAAM;gBAAS,cAAc,cAAA,CAAe,CAAC,CAAA,CAAG,KAAA;gBAAkB;YAAe;QAC3F;QACA,IAAI,SAAS;YACZ,IAAA,CAAK,SAAA,GAAY,QAAQ,QAAA;YACzB,IAAA,CAAK,SAAA,GAAY,QAAQ,QAAA;QAC1B;IACD;IAEA,SAAS,MAAA,EAAkC;QAC1C,IAAA,CAAK,SAAA,GAAY,WAAW,KAAA,IAAY,cAAc;QACtD,OAAO,IAAA;IACR;IAEA,SAAS,MAAA,EAAkC;QAC1C,IAAA,CAAK,SAAA,GAAY,WAAW,KAAA,IAAY,cAAc;QACtD,OAAO,IAAA;IACR;IAAA,cAAA,GAGA,MAAM,KAAA,EAA4B;QACjC,OAAO,IAAI,WAAW,OAAO,IAAI;IAClC;AACD;AAIO,MAAM,WAAW;IAOvB,YAAqB,KAAA,EAAgB,OAAA,CAA4B;QAA5C,IAAA,CAAA,KAAA,GAAA;QACpB,IAAA,CAAK,SAAA,GAAY,QAAQ,SAAA;QACzB,IAAA,CAAK,QAAA,GAAW,QAAQ,SAAA;QACxB,IAAA,CAAK,QAAA,GAAW,QAAQ,SAAA;IACzB;IAVA,OAAA,0IAAiB,aAAU,CAAA,GAAY,eAAA;IAE9B,UAAA;IACA,SAAA;IACA,SAAA;IAQT,UAAkB;QACjB,MAAM,EAAE,IAAA,EAAM,OAAA,EAAS,cAAA,CAAe,CAAA,GAAI,IAAA,CAAK,SAAA,CAAU;QACzD,MAAM,cAAc,QAAQ,GAAA,CAAI,CAAC,SAAW,OAAO,IAAI;QACvD,MAAM,qBAAqB,eAAe,GAAA,CAAI,CAAC,SAAW,OAAO,IAAI;QACrE,MAAM,SAAS;YACd,IAAA,CAAK,KAAA,kJAAM,YAAS,CAAA;eACjB;YACH,cAAA,CAAe,CAAC,CAAA,CAAG,KAAA,kJAAM,YAAS,CAAA;eAC/B;SACJ;QACA,OAAO,QAAQ,GAAG,OAAO,IAAA,CAAK,GAAG,CAAC,CAAA,GAAA,CAAA;IACnC;AACD;AAOO,SAAS,WAKf,MAAA,EAKoB;IACpB,SAAS,eAAe;QACvB,MAAM,EAAE,IAAA,EAAM,OAAA,EAAS,cAAA,CAAe,CAAA,GAAI;QAC1C,OAAO;YACN;YACA;YACA;QACD;IACD;IAEA,OAAO,IAAI,kBAAkB,YAAY;AAC1C","debugId":null}},
    {"offset": {"line": 2599, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/tracing-utils.ts"],"sourcesContent":["export function iife<T extends unknown[], U>(fn: (...args: T) => U, ...args: T): U {\n\treturn fn(...args);\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,KAA6B,EAAA,EAAA,GAA0B,IAAA,EAAY;IAClF,OAAO,GAAG,GAAG,IAAI;AAClB","debugId":null}},
    {"offset": {"line": 2611, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/unique-constraint.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { TableName } from '~/table.utils.ts';\nimport type { PgColumn } from './columns/index.ts';\nimport type { PgTable } from './table.ts';\n\nexport function unique(name?: string): UniqueOnConstraintBuilder {\n\treturn new UniqueOnConstraintBuilder(name);\n}\n\nexport function uniqueKeyName(table: PgTable, columns: string[]) {\n\treturn `${table[TableName]}_${columns.join('_')}_unique`;\n}\n\nexport class UniqueConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'PgUniqueConstraintBuilder';\n\n\t/** @internal */\n\tcolumns: PgColumn[];\n\t/** @internal */\n\tnullsNotDistinctConfig = false;\n\n\tconstructor(\n\t\tcolumns: PgColumn[],\n\t\tprivate name?: string,\n\t) {\n\t\tthis.columns = columns;\n\t}\n\n\tnullsNotDistinct() {\n\t\tthis.nullsNotDistinctConfig = true;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): UniqueConstraint {\n\t\treturn new UniqueConstraint(table, this.columns, this.nullsNotDistinctConfig, this.name);\n\t}\n}\n\nexport class UniqueOnConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'PgUniqueOnConstraintBuilder';\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tname?: string,\n\t) {\n\t\tthis.name = name;\n\t}\n\n\ton(...columns: [PgColumn, ...PgColumn[]]) {\n\t\treturn new UniqueConstraintBuilder(columns, this.name);\n\t}\n}\n\nexport class UniqueConstraint {\n\tstatic readonly [entityKind]: string = 'PgUniqueConstraint';\n\n\treadonly columns: PgColumn[];\n\treadonly name?: string;\n\treadonly nullsNotDistinct: boolean = false;\n\n\tconstructor(readonly table: PgTable, columns: PgColumn[], nullsNotDistinct: boolean, name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n\t\tthis.nullsNotDistinct = nullsNotDistinct;\n\t}\n\n\tgetName() {\n\t\treturn this.name;\n\t}\n}\n"],"names":[],"mappings":";;;;;;;AAAA,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;;;AAInB,SAAS,OAAO,IAAA,EAA0C;IAChE,OAAO,IAAI,0BAA0B,IAAI;AAC1C;AAEO,SAAS,cAAc,KAAA,EAAgB,OAAA,EAAmB;IAChE,OAAO,GAAG,KAAA,kJAAM,YAAS,CAAC,CAAA,CAAA,EAAI,QAAQ,IAAA,CAAK,GAAG,CAAC,CAAA,OAAA,CAAA;AAChD;AAEO,MAAM,wBAAwB;IAQpC,YACC,OAAA,EACQ,IAAA,CACP;QADO,IAAA,CAAA,IAAA,GAAA;QAER,IAAA,CAAK,OAAA,GAAU;IAChB;IAZA,OAAA,0IAAiB,aAAU,CAAA,GAAY,4BAAA;IAAA,cAAA,GAGvC,QAAA;IAAA,cAAA,GAEA,yBAAyB,MAAA;IASzB,mBAAmB;QAClB,IAAA,CAAK,sBAAA,GAAyB;QAC9B,OAAO,IAAA;IACR;IAAA,cAAA,GAGA,MAAM,KAAA,EAAkC;QACvC,OAAO,IAAI,iBAAiB,OAAO,IAAA,CAAK,OAAA,EAAS,IAAA,CAAK,sBAAA,EAAwB,IAAA,CAAK,IAAI;IACxF;AACD;AAEO,MAAM,0BAA0B;IACtC,OAAA,0IAAiB,aAAU,CAAA,GAAY,8BAAA;IAAA,cAAA,GAGvC,KAAA;IAEA,YACC,IAAA,CACC;QACD,IAAA,CAAK,IAAA,GAAO;IACb;IAEA,GAAA,GAAM,OAAA,EAAoC;QACzC,OAAO,IAAI,wBAAwB,SAAS,IAAA,CAAK,IAAI;IACtD;AACD;AAEO,MAAM,iBAAiB;IAO7B,YAAqB,KAAA,EAAgB,OAAA,EAAqB,gBAAA,EAA2B,IAAA,CAAe;QAA/E,IAAA,CAAA,KAAA,GAAA;QACpB,IAAA,CAAK,OAAA,GAAU;QACf,IAAA,CAAK,IAAA,GAAO,QAAQ,cAAc,IAAA,CAAK,KAAA,EAAO,IAAA,CAAK,OAAA,CAAQ,GAAA,CAAI,CAAC,SAAW,OAAO,IAAI,CAAC;QACvF,IAAA,CAAK,gBAAA,GAAmB;IACzB;IAVA,OAAA,0IAAiB,aAAU,CAAA,GAAY,qBAAA;IAE9B,QAAA;IACA,KAAA;IACA,mBAA4B,MAAA;IAQrC,UAAU;QACT,OAAO,IAAA,CAAK,IAAA;IACb;AACD","debugId":null}},
    {"offset": {"line": 2675, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/utils/array.ts"],"sourcesContent":["function parsePgArrayValue(arrayString: string, startFrom: number, inQuotes: boolean): [string, number] {\n\tfor (let i = startFrom; i < arrayString.length; i++) {\n\t\tconst char = arrayString[i];\n\n\t\tif (char === '\\\\') {\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '\"') {\n\t\t\treturn [arrayString.slice(startFrom, i).replace(/\\\\/g, ''), i + 1];\n\t\t}\n\n\t\tif (inQuotes) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === ',' || char === '}') {\n\t\t\treturn [arrayString.slice(startFrom, i).replace(/\\\\/g, ''), i];\n\t\t}\n\t}\n\n\treturn [arrayString.slice(startFrom).replace(/\\\\/g, ''), arrayString.length];\n}\n\nexport function parsePgNestedArray(arrayString: string, startFrom = 0): [any[], number] {\n\tconst result: any[] = [];\n\tlet i = startFrom;\n\tlet lastCharIsComma = false;\n\n\twhile (i < arrayString.length) {\n\t\tconst char = arrayString[i];\n\n\t\tif (char === ',') {\n\t\t\tif (lastCharIsComma || i === startFrom) {\n\t\t\t\tresult.push('');\n\t\t\t}\n\t\t\tlastCharIsComma = true;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tlastCharIsComma = false;\n\n\t\tif (char === '\\\\') {\n\t\t\ti += 2;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '\"') {\n\t\t\tconst [value, startFrom] = parsePgArrayValue(arrayString, i + 1, true);\n\t\t\tresult.push(value);\n\t\t\ti = startFrom;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '}') {\n\t\t\treturn [result, i + 1];\n\t\t}\n\n\t\tif (char === '{') {\n\t\t\tconst [value, startFrom] = parsePgNestedArray(arrayString, i + 1);\n\t\t\tresult.push(value);\n\t\t\ti = startFrom;\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst [value, newStartFrom] = parsePgArrayValue(arrayString, i, false);\n\t\tresult.push(value);\n\t\ti = newStartFrom;\n\t}\n\n\treturn [result, i];\n}\n\nexport function parsePgArray(arrayString: string): any[] {\n\tconst [result] = parsePgNestedArray(arrayString, 1);\n\treturn result;\n}\n\nexport function makePgArray(array: any[]): string {\n\treturn `{${\n\t\tarray.map((item) => {\n\t\t\tif (Array.isArray(item)) {\n\t\t\t\treturn makePgArray(item);\n\t\t\t}\n\n\t\t\tif (typeof item === 'string') {\n\t\t\t\treturn `\"${item.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"')}\"`;\n\t\t\t}\n\n\t\t\treturn `${item}`;\n\t\t}).join(',')\n\t}}`;\n}\n"],"names":["value","startFrom"],"mappings":";;;;;AAAA,SAAS,kBAAkB,WAAA,EAAqB,SAAA,EAAmB,QAAA,EAAqC;IACvG,IAAA,IAAS,IAAI,WAAW,IAAI,YAAY,MAAA,EAAQ,IAAK;QACpD,MAAM,OAAO,WAAA,CAAY,CAAC,CAAA;QAE1B,IAAI,SAAS,MAAM;YAClB;YACA;QACD;QAEA,IAAI,SAAS,KAAK;YACjB,OAAO;gBAAC,YAAY,KAAA,CAAM,WAAW,CAAC,EAAE,OAAA,CAAQ,OAAO,EAAE;gBAAG,IAAI,CAAC;aAAA;QAClE;QAEA,IAAI,UAAU;YACb;QACD;QAEA,IAAI,SAAS,OAAO,SAAS,KAAK;YACjC,OAAO;gBAAC,YAAY,KAAA,CAAM,WAAW,CAAC,EAAE,OAAA,CAAQ,OAAO,EAAE;gBAAG,CAAC;aAAA;QAC9D;IACD;IAEA,OAAO;QAAC,YAAY,KAAA,CAAM,SAAS,EAAE,OAAA,CAAQ,OAAO,EAAE;QAAG,YAAY,MAAM;KAAA;AAC5E;AAEO,SAAS,mBAAmB,WAAA,EAAqB,YAAY,CAAA,EAAoB;IACvF,MAAM,SAAgB,CAAC,CAAA;IACvB,IAAI,IAAI;IACR,IAAI,kBAAkB;IAEtB,MAAO,IAAI,YAAY,MAAA,CAAQ;QAC9B,MAAM,OAAO,WAAA,CAAY,CAAC,CAAA;QAE1B,IAAI,SAAS,KAAK;YACjB,IAAI,mBAAmB,MAAM,WAAW;gBACvC,OAAO,IAAA,CAAK,EAAE;YACf;YACA,kBAAkB;YAClB;YACA;QACD;QAEA,kBAAkB;QAElB,IAAI,SAAS,MAAM;YAClB,KAAK;YACL;QACD;QAEA,IAAI,SAAS,KAAK;YACjB,MAAM,CAACA,QAAOC,UAAS,CAAA,GAAI,kBAAkB,aAAa,IAAI,GAAG,IAAI;YACrE,OAAO,IAAA,CAAKD,MAAK;YACjB,IAAIC;YACJ;QACD;QAEA,IAAI,SAAS,KAAK;YACjB,OAAO;gBAAC;gBAAQ,IAAI,CAAC;aAAA;QACtB;QAEA,IAAI,SAAS,KAAK;YACjB,MAAM,CAACD,QAAOC,UAAS,CAAA,GAAI,mBAAmB,aAAa,IAAI,CAAC;YAChE,OAAO,IAAA,CAAKD,MAAK;YACjB,IAAIC;YACJ;QACD;QAEA,MAAM,CAAC,OAAO,YAAY,CAAA,GAAI,kBAAkB,aAAa,GAAG,KAAK;QACrE,OAAO,IAAA,CAAK,KAAK;QACjB,IAAI;IACL;IAEA,OAAO;QAAC;QAAQ,CAAC;KAAA;AAClB;AAEO,SAAS,aAAa,WAAA,EAA4B;IACxD,MAAM,CAAC,MAAM,CAAA,GAAI,mBAAmB,aAAa,CAAC;IAClD,OAAO;AACR;AAEO,SAAS,YAAY,KAAA,EAAsB;IACjD,OAAO,CAAA,CAAA,EACN,MAAM,GAAA,CAAI,CAAC,SAAS;QACnB,IAAI,MAAM,OAAA,CAAQ,IAAI,GAAG;YACxB,OAAO,YAAY,IAAI;QACxB;QAEA,IAAI,OAAO,SAAS,UAAU;YAC7B,OAAO,CAAA,CAAA,EAAI,KAAK,OAAA,CAAQ,OAAO,MAAM,EAAE,OAAA,CAAQ,MAAM,KAAK,CAAC,CAAA,CAAA,CAAA;QAC5D;QAEA,OAAO,GAAG,IAAI,EAAA;IACf,CAAC,EAAE,IAAA,CAAK,GAAG,CACZ,CAAA,CAAA,CAAA;AACD","debugId":null}},
    {"offset": {"line": 2775, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/common.ts"],"sourcesContent":["import type {\n\tColumnBuilderBase,\n\tColumnBuilderBaseConfig,\n\tColumnBuilderExtraConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tHasGenerated,\n\tMakeColumnConfig,\n} from '~/column-builder.ts';\nimport { ColumnBuilder } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { Column } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport type { Simplify, Update } from '~/utils.ts';\n\nimport type { ForeignKey, UpdateDeleteAction } from '~/pg-core/foreign-keys.ts';\nimport { ForeignKeyBuilder } from '~/pg-core/foreign-keys.ts';\nimport type { AnyPgTable, PgTable } from '~/pg-core/table.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport { iife } from '~/tracing-utils.ts';\nimport type { PgIndexOpClass } from '../indexes.ts';\nimport { uniqueKeyName } from '../unique-constraint.ts';\nimport { makePgArray, parsePgArray } from '../utils/array.ts';\n\nexport interface ReferenceConfig {\n\tref: () => PgColumn;\n\tactions: {\n\t\tonUpdate?: UpdateDeleteAction;\n\t\tonDelete?: UpdateDeleteAction;\n\t};\n}\n\nexport interface PgColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> extends ColumnBuilderBase<T, TTypeConfig & { dialect: 'pg' }> {}\n\nexport abstract class PgColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = ColumnBuilderExtraConfig,\n> extends ColumnBuilder<T, TRuntimeConfig, TTypeConfig & { dialect: 'pg' }, TExtraConfig>\n\timplements PgColumnBuilderBase<T, TTypeConfig>\n{\n\tprivate foreignKeyConfigs: ReferenceConfig[] = [];\n\n\tstatic override readonly [entityKind]: string = 'PgColumnBuilder';\n\n\tarray<TSize extends number | undefined = undefined>(size?: TSize): PgArrayBuilder<\n\t\t& {\n\t\t\tname: T['name'];\n\t\t\tdataType: 'array';\n\t\t\tcolumnType: 'PgArray';\n\t\t\tdata: T['data'][];\n\t\t\tdriverParam: T['driverParam'][] | string;\n\t\t\tenumValues: T['enumValues'];\n\t\t\tsize: TSize;\n\t\t\tbaseBuilder: T;\n\t\t}\n\t\t& (T extends { notNull: true } ? { notNull: true } : {})\n\t\t& (T extends { hasDefault: true } ? { hasDefault: true } : {}),\n\t\tT\n\t> {\n\t\treturn new PgArrayBuilder(this.config.name, this as PgColumnBuilder<any, any>, size as any);\n\t}\n\n\treferences(\n\t\tref: ReferenceConfig['ref'],\n\t\tactions: ReferenceConfig['actions'] = {},\n\t): this {\n\t\tthis.foreignKeyConfigs.push({ ref, actions });\n\t\treturn this;\n\t}\n\n\tunique(\n\t\tname?: string,\n\t\tconfig?: { nulls: 'distinct' | 'not distinct' },\n\t): this {\n\t\tthis.config.isUnique = true;\n\t\tthis.config.uniqueName = name;\n\t\tthis.config.uniqueType = config?.nulls;\n\t\treturn this;\n\t}\n\n\tgeneratedAlwaysAs(as: SQL | T['data'] | (() => SQL)): HasGenerated<this, {\n\t\ttype: 'always';\n\t}> {\n\t\tthis.config.generated = {\n\t\t\tas,\n\t\t\ttype: 'always',\n\t\t\tmode: 'stored',\n\t\t};\n\t\treturn this as HasGenerated<this, {\n\t\t\ttype: 'always';\n\t\t}>;\n\t}\n\n\t/** @internal */\n\tbuildForeignKeys(column: PgColumn, table: PgTable): ForeignKey[] {\n\t\treturn this.foreignKeyConfigs.map(({ ref, actions }) => {\n\t\t\treturn iife(\n\t\t\t\t(ref, actions) => {\n\t\t\t\t\tconst builder = new ForeignKeyBuilder(() => {\n\t\t\t\t\t\tconst foreignColumn = ref();\n\t\t\t\t\t\treturn { columns: [column], foreignColumns: [foreignColumn] };\n\t\t\t\t\t});\n\t\t\t\t\tif (actions.onUpdate) {\n\t\t\t\t\t\tbuilder.onUpdate(actions.onUpdate);\n\t\t\t\t\t}\n\t\t\t\t\tif (actions.onDelete) {\n\t\t\t\t\t\tbuilder.onDelete(actions.onDelete);\n\t\t\t\t\t}\n\t\t\t\t\treturn builder.build(table);\n\t\t\t\t},\n\t\t\t\tref,\n\t\t\t\tactions,\n\t\t\t);\n\t\t});\n\t}\n\n\t/** @internal */\n\tabstract build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgColumn<MakeColumnConfig<T, TTableName>>;\n\n\t/** @internal */\n\tbuildExtraConfigColumn<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): ExtraConfigColumn {\n\t\treturn new ExtraConfigColumn(table, this.config);\n\t}\n}\n\n// To understand how to use `PgColumn` and `PgColumn`, see `Column` and `AnyColumn` documentation.\nexport abstract class PgColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = {},\n\tTTypeConfig extends object = {},\n> extends Column<T, TRuntimeConfig, TTypeConfig & { dialect: 'pg' }> {\n\tstatic override readonly [entityKind]: string = 'PgColumn';\n\n\tconstructor(\n\t\toverride readonly table: PgTable,\n\t\tconfig: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tif (!config.uniqueName) {\n\t\t\tconfig.uniqueName = uniqueKeyName(table, [config.name]);\n\t\t}\n\t\tsuper(table, config);\n\t}\n}\n\nexport type IndexedExtraConfigType = { order?: 'asc' | 'desc'; nulls?: 'first' | 'last'; opClass?: string };\n\nexport class ExtraConfigColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n> extends PgColumn<T, IndexedExtraConfigType> {\n\tstatic override readonly [entityKind]: string = 'ExtraConfigColumn';\n\n\toverride getSQLType(): string {\n\t\treturn this.getSQLType();\n\t}\n\n\tindexConfig: IndexedExtraConfigType = {\n\t\torder: this.config.order ?? 'asc',\n\t\tnulls: this.config.nulls ?? 'last',\n\t\topClass: this.config.opClass,\n\t};\n\tdefaultConfig: IndexedExtraConfigType = {\n\t\torder: 'asc',\n\t\tnulls: 'last',\n\t\topClass: undefined,\n\t};\n\n\tasc(): Omit<this, 'asc' | 'desc'> {\n\t\tthis.indexConfig.order = 'asc';\n\t\treturn this;\n\t}\n\n\tdesc(): Omit<this, 'asc' | 'desc'> {\n\t\tthis.indexConfig.order = 'desc';\n\t\treturn this;\n\t}\n\n\tnullsFirst(): Omit<this, 'nullsFirst' | 'nullsLast'> {\n\t\tthis.indexConfig.nulls = 'first';\n\t\treturn this;\n\t}\n\n\tnullsLast(): Omit<this, 'nullsFirst' | 'nullsLast'> {\n\t\tthis.indexConfig.nulls = 'last';\n\t\treturn this;\n\t}\n\n\t/**\n\t * ### PostgreSQL documentation quote\n\t *\n\t * > An operator class with optional parameters can be specified for each column of an index.\n\t * The operator class identifies the operators to be used by the index for that column.\n\t * For example, a B-tree index on four-byte integers would use the int4_ops class;\n\t * this operator class includes comparison functions for four-byte integers.\n\t * In practice the default operator class for the column's data type is usually sufficient.\n\t * The main point of having operator classes is that for some data types, there could be more than one meaningful ordering.\n\t * For example, we might want to sort a complex-number data type either by absolute value or by real part.\n\t * We could do this by defining two operator classes for the data type and then selecting the proper class when creating an index.\n\t * More information about operator classes check:\n\t *\n\t * ### Useful links\n\t * https://www.postgresql.org/docs/current/sql-createindex.html\n\t *\n\t * https://www.postgresql.org/docs/current/indexes-opclass.html\n\t *\n\t * https://www.postgresql.org/docs/current/xindex.html\n\t *\n\t * ### Additional types\n\t * If you have the `pg_vector` extension installed in your database, you can use the\n\t * `vector_l2_ops`, `vector_ip_ops`, `vector_cosine_ops`, `vector_l1_ops`, `bit_hamming_ops`, `bit_jaccard_ops`, `halfvec_l2_ops`, `sparsevec_l2_ops` options, which are predefined types.\n\t *\n\t * **You can always specify any string you want in the operator class, in case Drizzle doesn't have it natively in its types**\n\t *\n\t * @param opClass\n\t * @returns\n\t */\n\top(opClass: PgIndexOpClass): Omit<this, 'op'> {\n\t\tthis.indexConfig.opClass = opClass;\n\t\treturn this;\n\t}\n}\n\nexport class IndexedColumn {\n\tstatic readonly [entityKind]: string = 'IndexedColumn';\n\tconstructor(\n\t\tname: string | undefined,\n\t\tkeyAsName: boolean,\n\t\ttype: string,\n\t\tindexConfig: IndexedExtraConfigType,\n\t) {\n\t\tthis.name = name;\n\t\tthis.keyAsName = keyAsName;\n\t\tthis.type = type;\n\t\tthis.indexConfig = indexConfig;\n\t}\n\n\tname: string | undefined;\n\tkeyAsName: boolean;\n\ttype: string;\n\tindexConfig: IndexedExtraConfigType;\n}\n\nexport type AnyPgColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = PgColumn<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n\nexport type PgArrayColumnBuilderBaseConfig = ColumnBuilderBaseConfig<'array', 'PgArray'> & {\n\tsize: number | undefined;\n\tbaseBuilder: ColumnBuilderBaseConfig<ColumnDataType, string>;\n};\n\nexport class PgArrayBuilder<\n\tT extends PgArrayColumnBuilderBaseConfig,\n\tTBase extends ColumnBuilderBaseConfig<ColumnDataType, string> | PgArrayColumnBuilderBaseConfig,\n> extends PgColumnBuilder<\n\tT,\n\t{\n\t\tbaseBuilder: TBase extends PgArrayColumnBuilderBaseConfig ? PgArrayBuilder<\n\t\t\t\tTBase,\n\t\t\t\tTBase extends { baseBuilder: infer TBaseBuilder extends ColumnBuilderBaseConfig<any, any> } ? TBaseBuilder\n\t\t\t\t\t: never\n\t\t\t>\n\t\t\t: PgColumnBuilder<TBase, {}, Simplify<Omit<TBase, keyof ColumnBuilderBaseConfig<any, any>>>>;\n\t\tsize: T['size'];\n\t},\n\t{\n\t\tbaseBuilder: TBase extends PgArrayColumnBuilderBaseConfig ? PgArrayBuilder<\n\t\t\t\tTBase,\n\t\t\t\tTBase extends { baseBuilder: infer TBaseBuilder extends ColumnBuilderBaseConfig<any, any> } ? TBaseBuilder\n\t\t\t\t\t: never\n\t\t\t>\n\t\t\t: PgColumnBuilder<TBase, {}, Simplify<Omit<TBase, keyof ColumnBuilderBaseConfig<any, any>>>>;\n\t\tsize: T['size'];\n\t}\n> {\n\tstatic override readonly [entityKind] = 'PgArrayBuilder';\n\n\tconstructor(\n\t\tname: string,\n\t\tbaseBuilder: PgArrayBuilder<T, TBase>['config']['baseBuilder'],\n\t\tsize: T['size'],\n\t) {\n\t\tsuper(name, 'array', 'PgArray');\n\t\tthis.config.baseBuilder = baseBuilder;\n\t\tthis.config.size = size;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgArray<MakeColumnConfig<T, TTableName> & { size: T['size']; baseBuilder: T['baseBuilder'] }, TBase> {\n\t\tconst baseColumn = this.config.baseBuilder.build(table);\n\t\treturn new PgArray<MakeColumnConfig<T, TTableName> & { size: T['size']; baseBuilder: T['baseBuilder'] }, TBase>(\n\t\t\ttable as AnyPgTable<{ name: MakeColumnConfig<T, TTableName>['tableName'] }>,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t\tbaseColumn,\n\t\t);\n\t}\n}\n\nexport class PgArray<\n\tT extends ColumnBaseConfig<'array', 'PgArray'> & {\n\t\tsize: number | undefined;\n\t\tbaseBuilder: ColumnBuilderBaseConfig<ColumnDataType, string>;\n\t},\n\tTBase extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n> extends PgColumn<T, {}, { size: T['size']; baseBuilder: T['baseBuilder'] }> {\n\treadonly size: T['size'];\n\n\tstatic override readonly [entityKind]: string = 'PgArray';\n\n\tconstructor(\n\t\ttable: AnyPgTable<{ name: T['tableName'] }>,\n\t\tconfig: PgArrayBuilder<T, TBase>['config'],\n\t\treadonly baseColumn: PgColumn,\n\t\treadonly range?: [number | undefined, number | undefined],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.size = config.size;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn `${this.baseColumn.getSQLType()}[${typeof this.size === 'number' ? this.size : ''}]`;\n\t}\n\n\toverride mapFromDriverValue(value: unknown[] | string): T['data'] {\n\t\tif (typeof value === 'string') {\n\t\t\t// Thank you node-postgres for not parsing enum arrays\n\t\t\tvalue = parsePgArray(value);\n\t\t}\n\t\treturn value.map((v) => this.baseColumn.mapFromDriverValue(v));\n\t}\n\n\toverride mapToDriverValue(value: unknown[], isNestedArray = false): unknown[] | string {\n\t\tconst a = value.map((v) =>\n\t\t\tv === null\n\t\t\t\t? null\n\t\t\t\t: is(this.baseColumn, PgArray)\n\t\t\t\t? this.baseColumn.mapToDriverValue(v as unknown[], true)\n\t\t\t\t: this.baseColumn.mapToDriverValue(v)\n\t\t);\n\t\tif (isNestedArray) return a;\n\t\treturn makePgArray(a);\n\t}\n}\n"],"names":["ref","actions"],"mappings":"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","debugId":null}},
    {"offset": {"line": 2983, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/enum.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport type { NonArray, Writable } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\n// Enum as ts enum\n\nexport type PgEnumObjectColumnBuilderInitial<TName extends string, TValues extends object> = PgEnumObjectColumnBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgEnumObjectColumn';\n\tdata: TValues[keyof TValues];\n\tenumValues: string[];\n\tdriverParam: string;\n}>;\n\nexport interface PgEnumObject<TValues extends object> {\n\t(): PgEnumObjectColumnBuilderInitial<'', TValues>;\n\t<TName extends string>(name: TName): PgEnumObjectColumnBuilderInitial<TName, TValues>;\n\t<TName extends string>(name?: TName): PgEnumObjectColumnBuilderInitial<TName, TValues>;\n\n\treadonly enumName: string;\n\treadonly enumValues: string[];\n\treadonly schema: string | undefined;\n\t/** @internal */\n\t[isPgEnumSym]: true;\n}\n\nexport class PgEnumObjectColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'PgEnumObjectColumn'> & { enumValues: string[] },\n> extends PgColumnBuilder<T, { enum: PgEnumObject<any> }> {\n\tstatic override readonly [entityKind]: string = 'PgEnumObjectColumnBuilder';\n\n\tconstructor(name: T['name'], enumInstance: PgEnumObject<any>) {\n\t\tsuper(name, 'string', 'PgEnumObjectColumn');\n\t\tthis.config.enum = enumInstance;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgEnumObjectColumn<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgEnumObjectColumn<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgEnumObjectColumn<T extends ColumnBaseConfig<'string', 'PgEnumObjectColumn'> & { enumValues: object }>\n\textends PgColumn<T, { enum: PgEnumObject<object> }>\n{\n\tstatic override readonly [entityKind]: string = 'PgEnumObjectColumn';\n\n\treadonly enum;\n\toverride readonly enumValues = this.config.enum.enumValues;\n\n\tconstructor(\n\t\ttable: AnyPgTable<{ name: T['tableName'] }>,\n\t\tconfig: PgEnumObjectColumnBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.enum = config.enum;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn this.enum.enumName;\n\t}\n}\n\n// Enum as string union\n\nexport type PgEnumColumnBuilderInitial<TName extends string, TValues extends [string, ...string[]]> =\n\tPgEnumColumnBuilder<{\n\t\tname: TName;\n\t\tdataType: 'string';\n\t\tcolumnType: 'PgEnumColumn';\n\t\tdata: TValues[number];\n\t\tenumValues: TValues;\n\t\tdriverParam: string;\n\t}>;\n\nconst isPgEnumSym = Symbol.for('drizzle:isPgEnum');\nexport interface PgEnum<TValues extends [string, ...string[]]> {\n\t(): PgEnumColumnBuilderInitial<'', TValues>;\n\t<TName extends string>(name: TName): PgEnumColumnBuilderInitial<TName, TValues>;\n\t<TName extends string>(name?: TName): PgEnumColumnBuilderInitial<TName, TValues>;\n\n\treadonly enumName: string;\n\treadonly enumValues: TValues;\n\treadonly schema: string | undefined;\n\t/** @internal */\n\t[isPgEnumSym]: true;\n}\n\nexport function isPgEnum(obj: unknown): obj is PgEnum<[string, ...string[]]> {\n\treturn !!obj && typeof obj === 'function' && isPgEnumSym in obj && obj[isPgEnumSym] === true;\n}\n\nexport class PgEnumColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'PgEnumColumn'> & { enumValues: [string, ...string[]] },\n> extends PgColumnBuilder<T, { enum: PgEnum<T['enumValues']> }> {\n\tstatic override readonly [entityKind]: string = 'PgEnumColumnBuilder';\n\n\tconstructor(name: T['name'], enumInstance: PgEnum<T['enumValues']>) {\n\t\tsuper(name, 'string', 'PgEnumColumn');\n\t\tthis.config.enum = enumInstance;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgEnumColumn<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgEnumColumn<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgEnumColumn<T extends ColumnBaseConfig<'string', 'PgEnumColumn'> & { enumValues: [string, ...string[]] }>\n\textends PgColumn<T, { enum: PgEnum<T['enumValues']> }>\n{\n\tstatic override readonly [entityKind]: string = 'PgEnumColumn';\n\n\treadonly enum = this.config.enum;\n\toverride readonly enumValues = this.config.enum.enumValues;\n\n\tconstructor(\n\t\ttable: AnyPgTable<{ name: T['tableName'] }>,\n\t\tconfig: PgEnumColumnBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.enum = config.enum;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn this.enum.enumName;\n\t}\n}\n\nexport function pgEnum<U extends string, T extends Readonly<[U, ...U[]]>>(\n\tenumName: string,\n\tvalues: T | Writable<T>,\n): PgEnum<Writable<T>>;\n\nexport function pgEnum<E extends Record<string, string>>(\n\tenumName: string,\n\tenumObj: NonArray<E>,\n): PgEnumObject<E>;\n\nexport function pgEnum(\n\tenumName: any,\n\tinput: any,\n): any {\n\treturn Array.isArray(input)\n\t\t? pgEnumWithSchema(enumName, [...input] as [string, ...string[]], undefined)\n\t\t: pgEnumObjectWithSchema(enumName, input, undefined);\n}\n\n/** @internal */\nexport function pgEnumWithSchema<U extends string, T extends Readonly<[U, ...U[]]>>(\n\tenumName: string,\n\tvalues: T | Writable<T>,\n\tschema?: string,\n): PgEnum<Writable<T>> {\n\tconst enumInstance: PgEnum<Writable<T>> = Object.assign(\n\t\t<TName extends string>(name?: TName): PgEnumColumnBuilderInitial<TName, Writable<T>> =>\n\t\t\tnew PgEnumColumnBuilder(name ?? '' as TName, enumInstance),\n\t\t{\n\t\t\tenumName,\n\t\t\tenumValues: values,\n\t\t\tschema,\n\t\t\t[isPgEnumSym]: true,\n\t\t} as const,\n\t);\n\n\treturn enumInstance;\n}\n\n/** @internal */\nexport function pgEnumObjectWithSchema<T extends object>(\n\tenumName: string,\n\tvalues: T,\n\tschema?: string,\n): PgEnumObject<T> {\n\tconst enumInstance: PgEnumObject<T> = Object.assign(\n\t\t<TName extends string>(name?: TName): PgEnumObjectColumnBuilderInitial<TName, T> =>\n\t\t\tnew PgEnumObjectColumnBuilder(name ?? '' as TName, enumInstance),\n\t\t{\n\t\t\tenumName,\n\t\t\tenumValues: Object.values(values),\n\t\t\tschema,\n\t\t\t[isPgEnumSym]: true,\n\t\t} as const,\n\t);\n\n\treturn enumInstance;\n}\n"],"names":[],"mappings":";;;;;;;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAS,UAAU,uBAAuB;;;AAyBnC,MAAM,oMAEH,kBAAA,CAAgD;IACzD,OAAA,0IAA0B,aAAU,CAAA,GAAY,4BAAA;IAEhD,YAAY,IAAA,EAAiB,YAAA,CAAiC;QAC7D,KAAA,CAAM,MAAM,UAAU,oBAAoB;QAC1C,IAAA,CAAK,MAAA,CAAO,IAAA,GAAO;IACpB;IAAA,cAAA,GAGS,MACR,KAAA,EACsD;QACtD,OAAO,IAAI,mBACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,6LACJ,WAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,qBAAA;IAEvC,KAAA;IACS,aAAa,IAAA,CAAK,MAAA,CAAO,IAAA,CAAK,UAAA,CAAA;IAEhD,YACC,KAAA,EACA,MAAA,CACC;QACD,KAAA,CAAM,OAAO,MAAM;QACnB,IAAA,CAAK,IAAA,GAAO,OAAO,IAAA;IACpB;IAEA,aAAqB;QACpB,OAAO,IAAA,CAAK,IAAA,CAAK,QAAA;IAClB;AACD;AAcA,MAAM,cAAc,OAAO,GAAA,CAAI,kBAAkB;AAa1C,SAAS,SAAS,GAAA,EAAoD;IAC5E,OAAO,CAAC,CAAC,OAAO,OAAO,QAAQ,cAAc,eAAe,OAAO,GAAA,CAAI,WAAW,CAAA,KAAM;AACzF;AAEO,MAAM,8LAEH,kBAAA,CAAsD;IAC/D,OAAA,0IAA0B,aAAU,CAAA,GAAY,sBAAA;IAEhD,YAAY,IAAA,EAAiB,YAAA,CAAuC;QACnE,KAAA,CAAM,MAAM,UAAU,cAAc;QACpC,IAAA,CAAK,MAAA,CAAO,IAAA,GAAO;IACpB;IAAA,cAAA,GAGS,MACR,KAAA,EACgD;QAChD,OAAO,IAAI,aACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,uLACJ,WAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,eAAA;IAEvC,OAAO,IAAA,CAAK,MAAA,CAAO,IAAA,CAAA;IACV,aAAa,IAAA,CAAK,MAAA,CAAO,IAAA,CAAK,UAAA,CAAA;IAEhD,YACC,KAAA,EACA,MAAA,CACC;QACD,KAAA,CAAM,OAAO,MAAM;QACnB,IAAA,CAAK,IAAA,GAAO,OAAO,IAAA;IACpB;IAEA,aAAqB;QACpB,OAAO,IAAA,CAAK,IAAA,CAAK,QAAA;IAClB;AACD;AAYO,SAAS,OACf,QAAA,EACA,KAAA,EACM;IACN,OAAO,MAAM,OAAA,CAAQ,KAAK,IACvB,iBAAiB,UAAU,CAAC;WAAG,KAAK;KAAA,EAA4B,KAAA,CAAS,IACzE,uBAAuB,UAAU,OAAO,KAAA,CAAS;AACrD;AAGO,SAAS,iBACf,QAAA,EACA,MAAA,EACA,MAAA,EACsB;IACtB,MAAM,eAAoC,OAAO,MAAA,CAChD,CAAuB,OACtB,IAAI,oBAAoB,QAAQ,IAAa,YAAY,GAC1D;QACC;QACA,YAAY;QACZ;QACA,CAAC,WAAW,CAAA,EAAG;IAChB;IAGD,OAAO;AACR;AAGO,SAAS,uBACf,QAAA,EACA,MAAA,EACA,MAAA,EACkB;IAClB,MAAM,eAAgC,OAAO,MAAA,CAC5C,CAAuB,OACtB,IAAI,0BAA0B,QAAQ,IAAa,YAAY,GAChE;QACC;QACA,YAAY,OAAO,MAAA,CAAO,MAAM;QAChC;QACA,CAAC,WAAW,CAAA,EAAG;IAChB;IAGD,OAAO;AACR","debugId":null}},
    {"offset": {"line": 3074, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/subquery.ts"],"sourcesContent":["import { entityKind } from './entity.ts';\nimport type { SQL, SQLWrapper } from './sql/sql.ts';\n\nexport interface Subquery<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTAlias extends string = string,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTSelectedFields extends Record<string, unknown> = Record<string, unknown>,\n> extends SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\nexport class Subquery<\n\tTAlias extends string = string,\n\tTSelectedFields extends Record<string, unknown> = Record<string, unknown>,\n> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Subquery';\n\n\tdeclare _: {\n\t\tbrand: 'Subquery';\n\t\tsql: SQL;\n\t\tselectedFields: TSelectedFields;\n\t\talias: TAlias;\n\t\tisWith: boolean;\n\t\tusedTables?: string[];\n\t};\n\n\tconstructor(sql: SQL, fields: TSelectedFields, alias: string, isWith = false, usedTables: string[] = []) {\n\t\tthis._ = {\n\t\t\tbrand: 'Subquery',\n\t\t\tsql,\n\t\t\tselectedFields: fields as TSelectedFields,\n\t\t\talias: alias as TAlias,\n\t\t\tisWith,\n\t\t\tusedTables,\n\t\t};\n\t}\n\n\t// getSQL(): SQL<unknown> {\n\t// \treturn new SQL([this]);\n\t// }\n}\n\nexport class WithSubquery<\n\tTAlias extends string = string,\n\tTSelection extends Record<string, unknown> = Record<string, unknown>,\n> extends Subquery<TAlias, TSelection> {\n\tstatic override readonly [entityKind]: string = 'WithSubquery';\n}\n\nexport type WithSubqueryWithoutSelection<TAlias extends string> = WithSubquery<TAlias, {}>;\n"],"names":[],"mappings":";;;;AAAA,SAAS,kBAAkB;;AAWpB,MAAM,SAGW;IACvB,OAAA,0IAAiB,aAAU,CAAA,GAAY,WAAA;IAWvC,YAAY,GAAA,EAAU,MAAA,EAAyB,KAAA,EAAe,SAAS,KAAA,EAAO,aAAuB,CAAC,CAAA,CAAG;QACxG,IAAA,CAAK,CAAA,GAAI;YACR,OAAO;YACP;YACA,gBAAgB;YAChB;YACA;YACA;QACD;IACD;AAKD;AAEO,MAAM,qBAGH,SAA6B;IACtC,OAAA,0IAA0B,aAAU,CAAA,GAAY,eAAA;AACjD","debugId":null}},
    {"offset": {"line": 3102, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/drizzle-orm/version.js"],"sourcesContent":["// package.json\nvar version = \"0.44.4\";\n\n// src/version.ts\nvar compatibilityVersion = 10;\nexport {\n  compatibilityVersion,\n  version as npmVersion\n};\n"],"names":[],"mappings":"AAAA,eAAe;;;;;AACf,IAAI,UAAU;AAEd,iBAAiB;AACjB,IAAI,uBAAuB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3115, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/tracing.ts"],"sourcesContent":["import type { Span, Tracer } from '@opentelemetry/api';\nimport { iife } from '~/tracing-utils.ts';\nimport { npmVersion } from '~/version.ts';\n\nlet otel: typeof import('@opentelemetry/api') | undefined;\nlet rawTracer: Tracer | undefined;\n// try {\n// \totel = await import('@opentelemetry/api');\n// } catch (err: any) {\n// \tif (err.code !== 'MODULE_NOT_FOUND' && err.code !== 'ERR_MODULE_NOT_FOUND') {\n// \t\tthrow err;\n// \t}\n// }\n\ntype SpanName =\n\t| 'drizzle.operation'\n\t| 'drizzle.prepareQuery'\n\t| 'drizzle.buildSQL'\n\t| 'drizzle.execute'\n\t| 'drizzle.driver.execute'\n\t| 'drizzle.mapResponse';\n\n/** @internal */\nexport const tracer = {\n\tstartActiveSpan<F extends (span?: Span) => unknown>(name: SpanName, fn: F): ReturnType<F> {\n\t\tif (!otel) {\n\t\t\treturn fn() as ReturnType<F>;\n\t\t}\n\n\t\tif (!rawTracer) {\n\t\t\trawTracer = otel.trace.getTracer('drizzle-orm', npmVersion);\n\t\t}\n\n\t\treturn iife(\n\t\t\t(otel, rawTracer) =>\n\t\t\t\trawTracer.startActiveSpan(\n\t\t\t\t\tname,\n\t\t\t\t\t((span: Span) => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\treturn fn(span);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tspan.setStatus({\n\t\t\t\t\t\t\t\tcode: otel.SpanStatusCode.ERROR,\n\t\t\t\t\t\t\t\tmessage: e instanceof Error ? e.message : 'Unknown error', // eslint-disable-line no-instanceof/no-instanceof\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tspan.end();\n\t\t\t\t\t\t}\n\t\t\t\t\t}) as F,\n\t\t\t\t),\n\t\t\totel,\n\t\t\trawTracer,\n\t\t);\n\t},\n};\n"],"names":["otel","rawTracer"],"mappings":";;;AACA,SAAS,YAAY;AACrB,SAAS,kBAAkB;;;AAE3B,IAAI;AACJ,IAAI;AAkBG,MAAM,SAAS;IACrB,iBAAoD,IAAA,EAAgB,EAAA,EAAsB;QACzF,IAAI,CAAC,MAAM;YACV,OAAO,GAAG;QACX;QAEA,IAAI,CAAC,WAAW;YACf,YAAY,KAAK,KAAA,CAAM,SAAA,CAAU,yJAAe,aAAU;QAC3D;QAEA,8JAAO,OAAA,EACN,CAACA,OAAMC,aACNA,WAAU,eAAA,CACT,MACC,CAAC,SAAe;gBAChB,IAAI;oBACH,OAAO,GAAG,IAAI;gBACf,EAAA,OAAS,GAAG;oBACX,KAAK,SAAA,CAAU;wBACd,MAAMD,MAAK,cAAA,CAAe,KAAA;wBAC1B,SAAS,aAAa,QAAQ,EAAE,OAAA,GAAU;oBAC3C,CAAC;oBACD,MAAM;gBACP,SAAE;oBACD,KAAK,GAAA,CAAI;gBACV;YACD,IAEF,MACA;IAEF;AACD","debugId":null}},
    {"offset": {"line": 3153, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/view-common.ts"],"sourcesContent":["export const ViewBaseConfig = Symbol.for('drizzle:ViewBaseConfig');\n"],"names":[],"mappings":";;;AAAO,MAAM,iBAAiB,OAAO,GAAA,CAAI,wBAAwB","debugId":null}},
    {"offset": {"line": 3163, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/sql/sql.ts"],"sourcesContent":["import type { CasingCache } from '~/casing.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport { isPgEnum } from '~/pg-core/columns/enum.ts';\nimport type { SelectResult } from '~/query-builders/select.types.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { tracer } from '~/tracing.ts';\nimport type { Assume, Equal } from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { AnyColumn } from '../column.ts';\nimport { Column } from '../column.ts';\nimport { IsAlias, Table } from '../table.ts';\n\n/**\n * This class is used to indicate a primitive param value that is used in `sql` tag.\n * It is only used on type level and is never instantiated at runtime.\n * If you see a value of this type in the code, its runtime value is actually the primitive param value.\n */\nexport class FakePrimitiveParam {\n\tstatic readonly [entityKind]: string = 'FakePrimitiveParam';\n}\n\nexport type Chunk =\n\t| string\n\t| Table\n\t| View\n\t| AnyColumn\n\t| Name\n\t| Param\n\t| Placeholder\n\t| SQL;\n\nexport interface BuildQueryConfig {\n\tcasing: CasingCache;\n\tescapeName(name: string): string;\n\tescapeParam(num: number, value: unknown): string;\n\tescapeString(str: string): string;\n\tprepareTyping?: (encoder: DriverValueEncoder<unknown, unknown>) => QueryTypingsValue;\n\tparamStartIndex?: { value: number };\n\tinlineParams?: boolean;\n\tinvokeSource?: 'indexes' | undefined;\n}\n\nexport type QueryTypingsValue = 'json' | 'decimal' | 'time' | 'timestamp' | 'uuid' | 'date' | 'none';\n\nexport interface Query {\n\tsql: string;\n\tparams: unknown[];\n}\n\nexport interface QueryWithTypings extends Query {\n\ttypings?: QueryTypingsValue[];\n}\n\n/**\n * Any value that implements the `getSQL` method. The implementations include:\n * - `Table`\n * - `Column`\n * - `View`\n * - `Subquery`\n * - `SQL`\n * - `SQL.Aliased`\n * - `Placeholder`\n * - `Param`\n */\nexport interface SQLWrapper {\n\tgetSQL(): SQL;\n\tshouldOmitSQLParens?(): boolean;\n}\n\nexport function isSQLWrapper(value: unknown): value is SQLWrapper {\n\treturn value !== null && value !== undefined && typeof (value as any).getSQL === 'function';\n}\n\nfunction mergeQueries(queries: QueryWithTypings[]): QueryWithTypings {\n\tconst result: QueryWithTypings = { sql: '', params: [] };\n\tfor (const query of queries) {\n\t\tresult.sql += query.sql;\n\t\tresult.params.push(...query.params);\n\t\tif (query.typings?.length) {\n\t\t\tif (!result.typings) {\n\t\t\t\tresult.typings = [];\n\t\t\t}\n\t\t\tresult.typings.push(...query.typings);\n\t\t}\n\t}\n\treturn result;\n}\n\nexport class StringChunk implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'StringChunk';\n\n\treadonly value: string[];\n\n\tconstructor(value: string | string[]) {\n\t\tthis.value = Array.isArray(value) ? value : [value];\n\t}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\nexport class SQL<T = unknown> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'SQL';\n\n\tdeclare _: {\n\t\tbrand: 'SQL';\n\t\ttype: T;\n\t};\n\n\t/** @internal */\n\tdecoder: DriverValueDecoder<T, any> = noopDecoder;\n\tprivate shouldInlineParams = false;\n\n\t/** @internal */\n\tusedTables: string[] = [];\n\n\tconstructor(readonly queryChunks: SQLChunk[]) {\n\t\tfor (const chunk of queryChunks) {\n\t\t\tif (is(chunk, Table)) {\n\t\t\t\tconst schemaName = chunk[Table.Symbol.Schema];\n\n\t\t\t\tthis.usedTables.push(\n\t\t\t\t\tschemaName === undefined\n\t\t\t\t\t\t? chunk[Table.Symbol.Name]\n\t\t\t\t\t\t: schemaName + '.' + chunk[Table.Symbol.Name],\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tappend(query: SQL): this {\n\t\tthis.queryChunks.push(...query.queryChunks);\n\t\treturn this;\n\t}\n\n\ttoQuery(config: BuildQueryConfig): QueryWithTypings {\n\t\treturn tracer.startActiveSpan('drizzle.buildSQL', (span) => {\n\t\t\tconst query = this.buildQueryFromSourceParams(this.queryChunks, config);\n\t\t\tspan?.setAttributes({\n\t\t\t\t'drizzle.query.text': query.sql,\n\t\t\t\t'drizzle.query.params': JSON.stringify(query.params),\n\t\t\t});\n\t\t\treturn query;\n\t\t});\n\t}\n\n\tbuildQueryFromSourceParams(chunks: SQLChunk[], _config: BuildQueryConfig): Query {\n\t\tconst config = Object.assign({}, _config, {\n\t\t\tinlineParams: _config.inlineParams || this.shouldInlineParams,\n\t\t\tparamStartIndex: _config.paramStartIndex || { value: 0 },\n\t\t});\n\n\t\tconst {\n\t\t\tcasing,\n\t\t\tescapeName,\n\t\t\tescapeParam,\n\t\t\tprepareTyping,\n\t\t\tinlineParams,\n\t\t\tparamStartIndex,\n\t\t} = config;\n\n\t\treturn mergeQueries(chunks.map((chunk): QueryWithTypings => {\n\t\t\tif (is(chunk, StringChunk)) {\n\t\t\t\treturn { sql: chunk.value.join(''), params: [] };\n\t\t\t}\n\n\t\t\tif (is(chunk, Name)) {\n\t\t\t\treturn { sql: escapeName(chunk.value), params: [] };\n\t\t\t}\n\n\t\t\tif (chunk === undefined) {\n\t\t\t\treturn { sql: '', params: [] };\n\t\t\t}\n\n\t\t\tif (Array.isArray(chunk)) {\n\t\t\t\tconst result: SQLChunk[] = [new StringChunk('(')];\n\t\t\t\tfor (const [i, p] of chunk.entries()) {\n\t\t\t\t\tresult.push(p);\n\t\t\t\t\tif (i < chunk.length - 1) {\n\t\t\t\t\t\tresult.push(new StringChunk(', '));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult.push(new StringChunk(')'));\n\t\t\t\treturn this.buildQueryFromSourceParams(result, config);\n\t\t\t}\n\n\t\t\tif (is(chunk, SQL)) {\n\t\t\t\treturn this.buildQueryFromSourceParams(chunk.queryChunks, {\n\t\t\t\t\t...config,\n\t\t\t\t\tinlineParams: inlineParams || chunk.shouldInlineParams,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (is(chunk, Table)) {\n\t\t\t\tconst schemaName = chunk[Table.Symbol.Schema];\n\t\t\t\tconst tableName = chunk[Table.Symbol.Name];\n\t\t\t\treturn {\n\t\t\t\t\tsql: schemaName === undefined || chunk[IsAlias]\n\t\t\t\t\t\t? escapeName(tableName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(tableName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, Column)) {\n\t\t\t\tconst columnName = casing.getColumnCasing(chunk);\n\t\t\t\tif (_config.invokeSource === 'indexes') {\n\t\t\t\t\treturn { sql: escapeName(columnName), params: [] };\n\t\t\t\t}\n\n\t\t\t\tconst schemaName = chunk.table[Table.Symbol.Schema];\n\t\t\t\treturn {\n\t\t\t\t\tsql: chunk.table[IsAlias] || schemaName === undefined\n\t\t\t\t\t\t? escapeName(chunk.table[Table.Symbol.Name]) + '.' + escapeName(columnName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(chunk.table[Table.Symbol.Name]) + '.'\n\t\t\t\t\t\t\t+ escapeName(columnName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, View)) {\n\t\t\t\tconst schemaName = chunk[ViewBaseConfig].schema;\n\t\t\t\tconst viewName = chunk[ViewBaseConfig].name;\n\t\t\t\treturn {\n\t\t\t\t\tsql: schemaName === undefined || chunk[ViewBaseConfig].isAlias\n\t\t\t\t\t\t? escapeName(viewName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(viewName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, Param)) {\n\t\t\t\tif (is(chunk.value, Placeholder)) {\n\t\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ['none'] };\n\t\t\t\t}\n\n\t\t\t\tconst mappedValue = chunk.value === null ? null : chunk.encoder.mapToDriverValue(chunk.value);\n\n\t\t\t\tif (is(mappedValue, SQL)) {\n\t\t\t\t\treturn this.buildQueryFromSourceParams([mappedValue], config);\n\t\t\t\t}\n\n\t\t\t\tif (inlineParams) {\n\t\t\t\t\treturn { sql: this.mapInlineParam(mappedValue, config), params: [] };\n\t\t\t\t}\n\n\t\t\t\tlet typings: QueryTypingsValue[] = ['none'];\n\t\t\t\tif (prepareTyping) {\n\t\t\t\t\ttypings = [prepareTyping(chunk.encoder)];\n\t\t\t\t}\n\n\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, mappedValue), params: [mappedValue], typings };\n\t\t\t}\n\n\t\t\tif (is(chunk, Placeholder)) {\n\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ['none'] };\n\t\t\t}\n\n\t\t\tif (is(chunk, SQL.Aliased) && chunk.fieldAlias !== undefined) {\n\t\t\t\treturn { sql: escapeName(chunk.fieldAlias), params: [] };\n\t\t\t}\n\n\t\t\tif (is(chunk, Subquery)) {\n\t\t\t\tif (chunk._.isWith) {\n\t\t\t\t\treturn { sql: escapeName(chunk._.alias), params: [] };\n\t\t\t\t}\n\t\t\t\treturn this.buildQueryFromSourceParams([\n\t\t\t\t\tnew StringChunk('('),\n\t\t\t\t\tchunk._.sql,\n\t\t\t\t\tnew StringChunk(') '),\n\t\t\t\t\tnew Name(chunk._.alias),\n\t\t\t\t], config);\n\t\t\t}\n\n\t\t\tif (isPgEnum(chunk)) {\n\t\t\t\tif (chunk.schema) {\n\t\t\t\t\treturn { sql: escapeName(chunk.schema) + '.' + escapeName(chunk.enumName), params: [] };\n\t\t\t\t}\n\t\t\t\treturn { sql: escapeName(chunk.enumName), params: [] };\n\t\t\t}\n\n\t\t\tif (isSQLWrapper(chunk)) {\n\t\t\t\tif (chunk.shouldOmitSQLParens?.()) {\n\t\t\t\t\treturn this.buildQueryFromSourceParams([chunk.getSQL()], config);\n\t\t\t\t}\n\t\t\t\treturn this.buildQueryFromSourceParams([\n\t\t\t\t\tnew StringChunk('('),\n\t\t\t\t\tchunk.getSQL(),\n\t\t\t\t\tnew StringChunk(')'),\n\t\t\t\t], config);\n\t\t\t}\n\n\t\t\tif (inlineParams) {\n\t\t\t\treturn { sql: this.mapInlineParam(chunk, config), params: [] };\n\t\t\t}\n\n\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ['none'] };\n\t\t}));\n\t}\n\n\tprivate mapInlineParam(\n\t\tchunk: unknown,\n\t\t{ escapeString }: BuildQueryConfig,\n\t): string {\n\t\tif (chunk === null) {\n\t\t\treturn 'null';\n\t\t}\n\t\tif (typeof chunk === 'number' || typeof chunk === 'boolean') {\n\t\t\treturn chunk.toString();\n\t\t}\n\t\tif (typeof chunk === 'string') {\n\t\t\treturn escapeString(chunk);\n\t\t}\n\t\tif (typeof chunk === 'object') {\n\t\t\tconst mappedValueAsString = chunk.toString();\n\t\t\tif (mappedValueAsString === '[object Object]') {\n\t\t\t\treturn escapeString(JSON.stringify(chunk));\n\t\t\t}\n\t\t\treturn escapeString(mappedValueAsString);\n\t\t}\n\t\tthrow new Error('Unexpected param value: ' + chunk);\n\t}\n\n\tgetSQL(): SQL {\n\t\treturn this;\n\t}\n\n\tas(alias: string): SQL.Aliased<T>;\n\t/**\n\t * @deprecated\n\t * Use ``sql<DataType>`query`.as(alias)`` instead.\n\t */\n\tas<TData>(): SQL<TData>;\n\t/**\n\t * @deprecated\n\t * Use ``sql<DataType>`query`.as(alias)`` instead.\n\t */\n\tas<TData>(alias: string): SQL.Aliased<TData>;\n\tas(alias?: string): SQL<T> | SQL.Aliased<T> {\n\t\t// TODO: remove with deprecated overloads\n\t\tif (alias === undefined) {\n\t\t\treturn this;\n\t\t}\n\n\t\treturn new SQL.Aliased(this, alias);\n\t}\n\n\tmapWith<\n\t\tTDecoder extends\n\t\t\t| DriverValueDecoder<any, any>\n\t\t\t| DriverValueDecoder<any, any>['mapFromDriverValue'],\n\t>(decoder: TDecoder): SQL<GetDecoderResult<TDecoder>> {\n\t\tthis.decoder = typeof decoder === 'function' ? { mapFromDriverValue: decoder } : decoder;\n\t\treturn this as SQL<GetDecoderResult<TDecoder>>;\n\t}\n\n\tinlineParams(): this {\n\t\tthis.shouldInlineParams = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * This method is used to conditionally include a part of the query.\n\t *\n\t * @param condition - Condition to check\n\t * @returns itself if the condition is `true`, otherwise `undefined`\n\t */\n\tif(condition: any | undefined): this | undefined {\n\t\treturn condition ? this : undefined;\n\t}\n}\n\nexport type GetDecoderResult<T> = T extends Column ? T['_']['data'] : T extends\n\t| DriverValueDecoder<infer TData, any>\n\t| DriverValueDecoder<infer TData, any>['mapFromDriverValue'] ? TData\n: never;\n\n/**\n * Any DB name (table, column, index etc.)\n */\nexport class Name implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Name';\n\n\tprotected brand!: 'Name';\n\n\tconstructor(readonly value: string) {}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/**\n * Any DB name (table, column, index etc.)\n * @deprecated Use `sql.identifier` instead.\n */\nexport function name(value: string): Name {\n\treturn new Name(value);\n}\n\nexport interface DriverValueDecoder<TData, TDriverParam> {\n\tmapFromDriverValue(value: TDriverParam): TData;\n}\n\nexport interface DriverValueEncoder<TData, TDriverParam> {\n\tmapToDriverValue(value: TData): TDriverParam | SQL;\n}\n\nexport function isDriverValueEncoder(value: unknown): value is DriverValueEncoder<any, any> {\n\treturn typeof value === 'object' && value !== null && 'mapToDriverValue' in value\n\t\t&& typeof (value as any).mapToDriverValue === 'function';\n}\n\nexport const noopDecoder: DriverValueDecoder<any, any> = {\n\tmapFromDriverValue: (value) => value,\n};\n\nexport const noopEncoder: DriverValueEncoder<any, any> = {\n\tmapToDriverValue: (value) => value,\n};\n\nexport interface DriverValueMapper<TData, TDriverParam>\n\textends DriverValueDecoder<TData, TDriverParam>, DriverValueEncoder<TData, TDriverParam>\n{}\n\nexport const noopMapper: DriverValueMapper<any, any> = {\n\t...noopDecoder,\n\t...noopEncoder,\n};\n\n/** Parameter value that is optionally bound to an encoder (for example, a column). */\nexport class Param<TDataType = unknown, TDriverParamType = TDataType> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Param';\n\n\tprotected brand!: 'BoundParamValue';\n\n\t/**\n\t * @param value - Parameter value\n\t * @param encoder - Encoder to convert the value to a driver parameter\n\t */\n\tconstructor(\n\t\treadonly value: TDataType,\n\t\treadonly encoder: DriverValueEncoder<TDataType, TDriverParamType> = noopEncoder,\n\t) {}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/** @deprecated Use `sql.param` instead. */\nexport function param<TData, TDriver>(\n\tvalue: TData,\n\tencoder?: DriverValueEncoder<TData, TDriver>,\n): Param<TData, TDriver> {\n\treturn new Param(value, encoder);\n}\n\n/**\n * Anything that can be passed to the `` sql`...` `` tagged function.\n */\nexport type SQLChunk =\n\t| StringChunk\n\t| SQLChunk[]\n\t| SQLWrapper\n\t| SQL\n\t| Table\n\t| View\n\t| Subquery\n\t| AnyColumn\n\t| Param\n\t| Name\n\t| undefined\n\t| FakePrimitiveParam\n\t| Placeholder;\n\nexport function sql<T>(strings: TemplateStringsArray, ...params: any[]): SQL<T>;\n/*\n\tThe type of `params` is specified as `SQLChunk[]`, but that's slightly incorrect -\n\tin runtime, users won't pass `FakePrimitiveParam` instances as `params` - they will pass primitive values\n\twhich will be wrapped in `Param`. That's why the overload specifies `params` as `any[]` and not as `SQLSourceParam[]`.\n\tThis type is used to make our lives easier and the type checker happy.\n*/\nexport function sql(strings: TemplateStringsArray, ...params: SQLChunk[]): SQL {\n\tconst queryChunks: SQLChunk[] = [];\n\tif (params.length > 0 || (strings.length > 0 && strings[0] !== '')) {\n\t\tqueryChunks.push(new StringChunk(strings[0]!));\n\t}\n\tfor (const [paramIndex, param] of params.entries()) {\n\t\tqueryChunks.push(param, new StringChunk(strings[paramIndex + 1]!));\n\t}\n\n\treturn new SQL(queryChunks);\n}\n\nexport namespace sql {\n\texport function empty(): SQL {\n\t\treturn new SQL([]);\n\t}\n\n\t/** @deprecated - use `sql.join()` */\n\texport function fromList(list: SQLChunk[]): SQL {\n\t\treturn new SQL(list);\n\t}\n\n\t/**\n\t * Convenience function to create an SQL query from a raw string.\n\t * @param str The raw SQL query string.\n\t */\n\texport function raw(str: string): SQL {\n\t\treturn new SQL([new StringChunk(str)]);\n\t}\n\n\t/**\n\t * Join a list of SQL chunks with a separator.\n\t * @example\n\t * ```ts\n\t * const query = sql.join([sql`a`, sql`b`, sql`c`]);\n\t * // sql`abc`\n\t * ```\n\t * @example\n\t * ```ts\n\t * const query = sql.join([sql`a`, sql`b`, sql`c`], sql`, `);\n\t * // sql`a, b, c`\n\t * ```\n\t */\n\texport function join(chunks: SQLChunk[], separator?: SQLChunk): SQL {\n\t\tconst result: SQLChunk[] = [];\n\t\tfor (const [i, chunk] of chunks.entries()) {\n\t\t\tif (i > 0 && separator !== undefined) {\n\t\t\t\tresult.push(separator);\n\t\t\t}\n\t\t\tresult.push(chunk);\n\t\t}\n\t\treturn new SQL(result);\n\t}\n\n\t/**\n\t * Create a SQL chunk that represents a DB identifier (table, column, index etc.).\n\t * When used in a query, the identifier will be escaped based on the DB engine.\n\t * For example, in PostgreSQL, identifiers are escaped with double quotes.\n\t *\n\t * **WARNING: This function does not offer any protection against SQL injections, so you must validate any user input beforehand.**\n\t *\n\t * @example ```ts\n\t * const query = sql`SELECT * FROM ${sql.identifier('my-table')}`;\n\t * // 'SELECT * FROM \"my-table\"'\n\t * ```\n\t */\n\texport function identifier(value: string): Name {\n\t\treturn new Name(value);\n\t}\n\n\texport function placeholder<TName extends string>(name: TName): Placeholder<TName> {\n\t\treturn new Placeholder(name);\n\t}\n\n\texport function param<TData, TDriver>(\n\t\tvalue: TData,\n\t\tencoder?: DriverValueEncoder<TData, TDriver>,\n\t): Param<TData, TDriver> {\n\t\treturn new Param(value, encoder);\n\t}\n}\n\nexport namespace SQL {\n\texport class Aliased<T = unknown> implements SQLWrapper {\n\t\tstatic readonly [entityKind]: string = 'SQL.Aliased';\n\n\t\tdeclare _: {\n\t\t\tbrand: 'SQL.Aliased';\n\t\t\ttype: T;\n\t\t};\n\n\t\t/** @internal */\n\t\tisSelectionField = false;\n\n\t\tconstructor(\n\t\t\treadonly sql: SQL,\n\t\t\treadonly fieldAlias: string,\n\t\t) {}\n\n\t\tgetSQL(): SQL {\n\t\t\treturn this.sql;\n\t\t}\n\n\t\t/** @internal */\n\t\tclone() {\n\t\t\treturn new Aliased(this.sql, this.fieldAlias);\n\t\t}\n\t}\n}\n\nexport class Placeholder<TName extends string = string, TValue = any> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Placeholder';\n\n\tdeclare protected: TValue;\n\n\tconstructor(readonly name: TName) {}\n\n\tgetSQL(): SQL {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/** @deprecated Use `sql.placeholder` instead. */\nexport function placeholder<TName extends string>(name: TName): Placeholder<TName> {\n\treturn new Placeholder(name);\n}\n\nexport function fillPlaceholders(params: unknown[], values: Record<string, unknown>): unknown[] {\n\treturn params.map((p) => {\n\t\tif (is(p, Placeholder)) {\n\t\t\tif (!(p.name in values)) {\n\t\t\t\tthrow new Error(`No value for placeholder \"${p.name}\" was provided`);\n\t\t\t}\n\n\t\t\treturn values[p.name];\n\t\t}\n\n\t\tif (is(p, Param) && is(p.value, Placeholder)) {\n\t\t\tif (!(p.value.name in values)) {\n\t\t\t\tthrow new Error(`No value for placeholder \"${p.value.name}\" was provided`);\n\t\t\t}\n\n\t\t\treturn p.encoder.mapToDriverValue(values[p.value.name]);\n\t\t}\n\n\t\treturn p;\n\t});\n}\n\nexport type ColumnsSelection = Record<string, unknown>;\n\nconst IsDrizzleView = Symbol.for('drizzle:IsDrizzleView');\n\nexport abstract class View<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelection extends ColumnsSelection = ColumnsSelection,\n> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'View';\n\n\tdeclare _: {\n\t\tbrand: 'View';\n\t\tviewBrand: string;\n\t\tname: TName;\n\t\texisting: TExisting;\n\t\tselectedFields: TSelection;\n\t};\n\n\t/** @internal */\n\t[ViewBaseConfig]: {\n\t\tname: TName;\n\t\toriginalName: TName;\n\t\tschema: string | undefined;\n\t\tselectedFields: ColumnsSelection;\n\t\tisExisting: TExisting;\n\t\tquery: TExisting extends true ? undefined : SQL;\n\t\tisAlias: boolean;\n\t};\n\n\t/** @internal */\n\t[IsDrizzleView] = true;\n\n\tdeclare readonly $inferSelect: InferSelectViewModel<View<Assume<TName, string>, TExisting, TSelection>>;\n\n\tconstructor(\n\t\t{ name, schema, selectedFields, query }: {\n\t\t\tname: TName;\n\t\t\tschema: string | undefined;\n\t\t\tselectedFields: ColumnsSelection;\n\t\t\tquery: SQL | undefined;\n\t\t},\n\t) {\n\t\tthis[ViewBaseConfig] = {\n\t\t\tname,\n\t\t\toriginalName: name,\n\t\t\tschema,\n\t\t\tselectedFields,\n\t\t\tquery: query as (TExisting extends true ? undefined : SQL),\n\t\t\tisExisting: !query as TExisting,\n\t\t\tisAlias: false,\n\t\t};\n\t}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\nexport function isView(view: unknown): view is View {\n\treturn typeof view === 'object' && view !== null && IsDrizzleView in view;\n}\n\nexport function getViewName<T extends View>(view: T): T['_']['name'] {\n\treturn view[ViewBaseConfig].name;\n}\n\nexport type InferSelectViewModel<TView extends View> =\n\tEqual<TView['_']['selectedFields'], { [x: string]: unknown }> extends true ? { [x: string]: unknown }\n\t\t: SelectResult<\n\t\t\tTView['_']['selectedFields'],\n\t\t\t'single',\n\t\t\tRecord<TView['_']['name'], 'not-null'>\n\t\t>;\n\n// Defined separately from the Column class to resolve circular dependency\nColumn.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n\n// Defined separately from the Table class to resolve circular dependency\nTable.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n\n// Defined separately from the Column class to resolve circular dependency\nSubquery.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n"],"names":["param","sql","placeholder","name","SQL"],"mappings":"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","debugId":null}},
    {"offset": {"line": 3691, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/utils.ts"],"sourcesContent":["import type { Cache } from './cache/core/cache.ts';\nimport type { AnyColumn } from './column.ts';\nimport { Column } from './column.ts';\nimport { is } from './entity.ts';\nimport type { Logger } from './logger.ts';\nimport type { SelectedFieldsOrdered } from './operations.ts';\nimport type { TableLike } from './query-builders/select.types.ts';\nimport { Param, SQL, View } from './sql/sql.ts';\nimport type { DriverValueDecoder } from './sql/sql.ts';\nimport { Subquery } from './subquery.ts';\nimport { getTableName, Table } from './table.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\n/** @internal */\nexport function mapResultRow<TResult>(\n\tcolumns: SelectedFieldsOrdered<AnyColumn>,\n\trow: unknown[],\n\tjoinsNotNullableMap: Record<string, boolean> | undefined,\n): TResult {\n\t// Key -> nested object key, value -> table name if all fields in the nested object are from the same table, false otherwise\n\tconst nullifyMap: Record<string, string | false> = {};\n\n\tconst result = columns.reduce<Record<string, any>>(\n\t\t(result, { path, field }, columnIndex) => {\n\t\t\tlet decoder: DriverValueDecoder<unknown, unknown>;\n\t\t\tif (is(field, Column)) {\n\t\t\t\tdecoder = field;\n\t\t\t} else if (is(field, SQL)) {\n\t\t\t\tdecoder = field.decoder;\n\t\t\t} else {\n\t\t\t\tdecoder = field.sql.decoder;\n\t\t\t}\n\t\t\tlet node = result;\n\t\t\tfor (const [pathChunkIndex, pathChunk] of path.entries()) {\n\t\t\t\tif (pathChunkIndex < path.length - 1) {\n\t\t\t\t\tif (!(pathChunk in node)) {\n\t\t\t\t\t\tnode[pathChunk] = {};\n\t\t\t\t\t}\n\t\t\t\t\tnode = node[pathChunk];\n\t\t\t\t} else {\n\t\t\t\t\tconst rawValue = row[columnIndex]!;\n\t\t\t\t\tconst value = node[pathChunk] = rawValue === null ? null : decoder.mapFromDriverValue(rawValue);\n\n\t\t\t\t\tif (joinsNotNullableMap && is(field, Column) && path.length === 2) {\n\t\t\t\t\t\tconst objectName = path[0]!;\n\t\t\t\t\t\tif (!(objectName in nullifyMap)) {\n\t\t\t\t\t\t\tnullifyMap[objectName] = value === null ? getTableName(field.table) : false;\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\ttypeof nullifyMap[objectName] === 'string' && nullifyMap[objectName] !== getTableName(field.table)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tnullifyMap[objectName] = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t},\n\t\t{},\n\t);\n\n\t// Nullify all nested objects from nullifyMap that are nullable\n\tif (joinsNotNullableMap && Object.keys(nullifyMap).length > 0) {\n\t\tfor (const [objectName, tableName] of Object.entries(nullifyMap)) {\n\t\t\tif (typeof tableName === 'string' && !joinsNotNullableMap[tableName]) {\n\t\t\t\tresult[objectName] = null;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result as TResult;\n}\n\n/** @internal */\nexport function orderSelectedFields<TColumn extends AnyColumn>(\n\tfields: Record<string, unknown>,\n\tpathPrefix?: string[],\n): SelectedFieldsOrdered<TColumn> {\n\treturn Object.entries(fields).reduce<SelectedFieldsOrdered<AnyColumn>>((result, [name, field]) => {\n\t\tif (typeof name !== 'string') {\n\t\t\treturn result;\n\t\t}\n\n\t\tconst newPath = pathPrefix ? [...pathPrefix, name] : [name];\n\t\tif (is(field, Column) || is(field, SQL) || is(field, SQL.Aliased)) {\n\t\t\tresult.push({ path: newPath, field });\n\t\t} else if (is(field, Table)) {\n\t\t\tresult.push(...orderSelectedFields(field[Table.Symbol.Columns], newPath));\n\t\t} else {\n\t\t\tresult.push(...orderSelectedFields(field as Record<string, unknown>, newPath));\n\t\t}\n\t\treturn result;\n\t}, []) as SelectedFieldsOrdered<TColumn>;\n}\n\nexport function haveSameKeys(left: Record<string, unknown>, right: Record<string, unknown>) {\n\tconst leftKeys = Object.keys(left);\n\tconst rightKeys = Object.keys(right);\n\n\tif (leftKeys.length !== rightKeys.length) {\n\t\treturn false;\n\t}\n\n\tfor (const [index, key] of leftKeys.entries()) {\n\t\tif (key !== rightKeys[index]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/** @internal */\nexport function mapUpdateSet(table: Table, values: Record<string, unknown>): UpdateSet {\n\tconst entries: [string, UpdateSet[string]][] = Object.entries(values)\n\t\t.filter(([, value]) => value !== undefined)\n\t\t.map(([key, value]) => {\n\t\t\t// eslint-disable-next-line unicorn/prefer-ternary\n\t\t\tif (is(value, SQL) || is(value, Column)) {\n\t\t\t\treturn [key, value];\n\t\t\t} else {\n\t\t\t\treturn [key, new Param(value, table[Table.Symbol.Columns][key])];\n\t\t\t}\n\t\t});\n\n\tif (entries.length === 0) {\n\t\tthrow new Error('No values to set');\n\t}\n\n\treturn Object.fromEntries(entries);\n}\n\nexport type UpdateSet = Record<string, SQL | Param | AnyColumn | null | undefined>;\n\nexport type OneOrMany<T> = T | T[];\n\nexport type Update<T, TUpdate> =\n\t& {\n\t\t[K in Exclude<keyof T, keyof TUpdate>]: T[K];\n\t}\n\t& TUpdate;\n\nexport type Simplify<T> =\n\t& {\n\t\t// @ts-ignore - \"Type parameter 'K' has a circular constraint\", not sure why\n\t\t[K in keyof T]: T[K];\n\t}\n\t& {};\n\nexport type SimplifyMappedType<T> = [T] extends [unknown] ? T : never;\n\nexport type ShallowRecord<K extends keyof any, T> = SimplifyMappedType<{ [P in K]: T }>;\n\nexport type Assume<T, U> = T extends U ? T : U;\n\nexport type Equal<X, Y> = (<T>() => T extends X ? 1 : 2) extends (<T>() => T extends Y ? 1 : 2) ? true : false;\n\nexport interface DrizzleTypeError<T extends string> {\n\t$drizzleTypeError: T;\n}\n\nexport type ValueOrArray<T> = T | T[];\n\n/** @internal */\nexport function applyMixins(baseClass: any, extendedClasses: any[]) {\n\tfor (const extendedClass of extendedClasses) {\n\t\tfor (const name of Object.getOwnPropertyNames(extendedClass.prototype)) {\n\t\t\tif (name === 'constructor') continue;\n\n\t\t\tObject.defineProperty(\n\t\t\t\tbaseClass.prototype,\n\t\t\t\tname,\n\t\t\t\tObject.getOwnPropertyDescriptor(extendedClass.prototype, name) || Object.create(null),\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport type Or<T1, T2> = T1 extends true ? true : T2 extends true ? true : false;\n\nexport type IfThenElse<If, Then, Else> = If extends true ? Then : Else;\n\nexport type PromiseOf<T> = T extends Promise<infer U> ? U : T;\n\nexport type Writable<T> = {\n\t-readonly [P in keyof T]: T[P];\n};\n\nexport type NonArray<T> = T extends any[] ? never : T;\n\nexport function getTableColumns<T extends Table>(table: T): T['_']['columns'] {\n\treturn table[Table.Symbol.Columns];\n}\n\nexport function getViewSelectedFields<T extends View>(view: T): T['_']['selectedFields'] {\n\treturn view[ViewBaseConfig].selectedFields;\n}\n\n/** @internal */\nexport function getTableLikeName(table: TableLike): string | undefined {\n\treturn is(table, Subquery)\n\t\t? table._.alias\n\t\t: is(table, View)\n\t\t? table[ViewBaseConfig].name\n\t\t: is(table, SQL)\n\t\t? undefined\n\t\t: table[Table.Symbol.IsAlias]\n\t\t? table[Table.Symbol.Name]\n\t\t: table[Table.Symbol.BaseName];\n}\n\nexport type ColumnsWithTable<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends AnyColumn<{ tableName: TTableName }>[],\n> = { [Key in keyof TColumns]: AnyColumn<{ tableName: TForeignTableName }> };\n\nexport type Casing = 'snake_case' | 'camelCase';\n\nexport interface DrizzleConfig<TSchema extends Record<string, unknown> = Record<string, never>> {\n\tlogger?: boolean | Logger;\n\tschema?: TSchema;\n\tcasing?: Casing;\n\tcache?: Cache;\n}\nexport type ValidateShape<T, ValidShape, TResult = T> = T extends ValidShape\n\t? Exclude<keyof T, keyof ValidShape> extends never ? TResult\n\t: DrizzleTypeError<\n\t\t`Invalid key(s): ${Exclude<(keyof T) & (string | number | bigint | boolean | null | undefined), keyof ValidShape>}`\n\t>\n\t: never;\n\nexport type KnownKeysOnly<T, U> = {\n\t[K in keyof T]: K extends keyof U ? T[K] : never;\n};\n\nexport type IsAny<T> = 0 extends (1 & T) ? true : false;\n\n/** @internal */\nexport function getColumnNameAndConfig<\n\tTConfig extends Record<string, any> | undefined,\n>(a: string | TConfig | undefined, b: TConfig | undefined) {\n\treturn {\n\t\tname: typeof a === 'string' && a.length > 0 ? a : '' as string,\n\t\tconfig: typeof a === 'object' ? a : b as TConfig,\n\t};\n}\n\nexport type IfNotImported<T, Y, N> = unknown extends T ? Y : N;\n\nexport type ImportTypeError<TPackageName extends string> =\n\t`Please install \\`${TPackageName}\\` to allow Drizzle ORM to connect to the database`;\n\nexport type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Keys extends any\n\t? Required<Pick<T, Keys>> & Partial<Omit<T, Keys>>\n\t: never;\n\ntype ExpectedConfigShape = {\n\tlogger?: boolean | {\n\t\tlogQuery(query: string, params: unknown[]): void;\n\t};\n\tschema?: Record<string, never>;\n\tcasing?: 'snake_case' | 'camelCase';\n};\n\n// If this errors, you must update config shape checker function with new config specs\nconst _: DrizzleConfig = {} as ExpectedConfigShape;\nconst __: ExpectedConfigShape = {} as DrizzleConfig;\n\nexport function isConfig(data: any): boolean {\n\tif (typeof data !== 'object' || data === null) return false;\n\n\tif (data.constructor.name !== 'Object') return false;\n\n\tif ('logger' in data) {\n\t\tconst type = typeof data['logger'];\n\t\tif (\n\t\t\ttype !== 'boolean' && (type !== 'object' || typeof data['logger']['logQuery'] !== 'function')\n\t\t\t&& type !== 'undefined'\n\t\t) return false;\n\n\t\treturn true;\n\t}\n\n\tif ('schema' in data) {\n\t\tconst type = typeof data['schema'];\n\t\tif (type !== 'object' && type !== 'undefined') return false;\n\n\t\treturn true;\n\t}\n\n\tif ('casing' in data) {\n\t\tconst type = typeof data['casing'];\n\t\tif (type !== 'string' && type !== 'undefined') return false;\n\n\t\treturn true;\n\t}\n\n\tif ('mode' in data) {\n\t\tif (data['mode'] !== 'default' || data['mode'] !== 'planetscale' || data['mode'] !== undefined) return false;\n\n\t\treturn true;\n\t}\n\n\tif ('connection' in data) {\n\t\tconst type = typeof data['connection'];\n\t\tif (type !== 'string' && type !== 'object' && type !== 'undefined') return false;\n\n\t\treturn true;\n\t}\n\n\tif ('client' in data) {\n\t\tconst type = typeof data['client'];\n\t\tif (type !== 'object' && type !== 'function' && type !== 'undefined') return false;\n\n\t\treturn true;\n\t}\n\n\tif (Object.keys(data).length === 0) return true;\n\n\treturn false;\n}\n\nexport type NeonAuthToken = string | (() => string | Promise<string>);\n"],"names":["result"],"mappings":"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","debugId":null}},
    {"offset": {"line": 3879, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/int.common.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnDataType, GeneratedIdentityConfig, IsIdentity } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { PgSequenceOptions } from '../sequence.ts';\nimport { PgColumnBuilder } from './common.ts';\n\nexport abstract class PgIntColumnBaseBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n> extends PgColumnBuilder<\n\tT,\n\t{ generatedIdentity: GeneratedIdentityConfig }\n> {\n\tstatic override readonly [entityKind]: string = 'PgIntColumnBaseBuilder';\n\n\tgeneratedAlwaysAsIdentity(\n\t\tsequence?: PgSequenceOptions & { name?: string },\n\t): IsIdentity<this, 'always'> {\n\t\tif (sequence) {\n\t\t\tconst { name, ...options } = sequence;\n\t\t\tthis.config.generatedIdentity = {\n\t\t\t\ttype: 'always',\n\t\t\t\tsequenceName: name,\n\t\t\t\tsequenceOptions: options,\n\t\t\t};\n\t\t} else {\n\t\t\tthis.config.generatedIdentity = {\n\t\t\t\ttype: 'always',\n\t\t\t};\n\t\t}\n\n\t\tthis.config.hasDefault = true;\n\t\tthis.config.notNull = true;\n\n\t\treturn this as IsIdentity<this, 'always'>;\n\t}\n\n\tgeneratedByDefaultAsIdentity(\n\t\tsequence?: PgSequenceOptions & { name?: string },\n\t): IsIdentity<this, 'byDefault'> {\n\t\tif (sequence) {\n\t\t\tconst { name, ...options } = sequence;\n\t\t\tthis.config.generatedIdentity = {\n\t\t\t\ttype: 'byDefault',\n\t\t\t\tsequenceName: name,\n\t\t\t\tsequenceOptions: options,\n\t\t\t};\n\t\t} else {\n\t\t\tthis.config.generatedIdentity = {\n\t\t\t\ttype: 'byDefault',\n\t\t\t};\n\t\t}\n\n\t\tthis.config.hasDefault = true;\n\t\tthis.config.notNull = true;\n\n\t\treturn this as IsIdentity<this, 'byDefault'>;\n\t}\n}\n"],"names":[],"mappings":";;;AACA,SAAS,kBAAkB;AAE3B,SAAS,uBAAuB;;;AAEzB,MAAe,iMAEZ,kBAAA,CAGR;IACD,OAAA,0IAA0B,aAAU,CAAA,GAAY,yBAAA;IAEhD,0BACC,QAAA,EAC6B;QAC7B,IAAI,UAAU;YACb,MAAM,EAAE,IAAA,EAAM,GAAG,QAAQ,CAAA,GAAI;YAC7B,IAAA,CAAK,MAAA,CAAO,iBAAA,GAAoB;gBAC/B,MAAM;gBACN,cAAc;gBACd,iBAAiB;YAClB;QACD,OAAO;YACN,IAAA,CAAK,MAAA,CAAO,iBAAA,GAAoB;gBAC/B,MAAM;YACP;QACD;QAEA,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,IAAA,CAAK,MAAA,CAAO,OAAA,GAAU;QAEtB,OAAO,IAAA;IACR;IAEA,6BACC,QAAA,EACgC;QAChC,IAAI,UAAU;YACb,MAAM,EAAE,IAAA,EAAM,GAAG,QAAQ,CAAA,GAAI;YAC7B,IAAA,CAAK,MAAA,CAAO,iBAAA,GAAoB;gBAC/B,MAAM;gBACN,cAAc;gBACd,iBAAiB;YAClB;QACD,OAAO;YACN,IAAA,CAAK,MAAA,CAAO,iBAAA,GAAoB;gBAC/B,MAAM;YACP;QACD;QAEA,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,IAAA,CAAK,MAAA,CAAO,OAAA,GAAU;QAEtB,OAAO,IAAA;IACR;AACD","debugId":null}},
    {"offset": {"line": 3929, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/bigint.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\n\nimport { getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn } from './common.ts';\nimport { PgIntColumnBaseBuilder } from './int.common.ts';\n\nexport type PgBigInt53BuilderInitial<TName extends string> = PgBigInt53Builder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'PgBigInt53';\n\tdata: number;\n\tdriverParam: number | string;\n\tenumValues: undefined;\n}>;\n\nexport class PgBigInt53Builder<T extends ColumnBuilderBaseConfig<'number', 'PgBigInt53'>>\n\textends PgIntColumnBaseBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgBigInt53Builder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'PgBigInt53');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgBigInt53<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgBigInt53<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgBigInt53<T extends ColumnBaseConfig<'number', 'PgBigInt53'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgBigInt53';\n\n\tgetSQLType(): string {\n\t\treturn 'bigint';\n\t}\n\n\toverride mapFromDriverValue(value: number | string): number {\n\t\tif (typeof value === 'number') {\n\t\t\treturn value;\n\t\t}\n\t\treturn Number(value);\n\t}\n}\n\nexport type PgBigInt64BuilderInitial<TName extends string> = PgBigInt64Builder<{\n\tname: TName;\n\tdataType: 'bigint';\n\tcolumnType: 'PgBigInt64';\n\tdata: bigint;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgBigInt64Builder<T extends ColumnBuilderBaseConfig<'bigint', 'PgBigInt64'>>\n\textends PgIntColumnBaseBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgBigInt64Builder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'bigint', 'PgBigInt64');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgBigInt64<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgBigInt64<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgBigInt64<T extends ColumnBaseConfig<'bigint', 'PgBigInt64'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgBigInt64';\n\n\tgetSQLType(): string {\n\t\treturn 'bigint';\n\t}\n\n\t// eslint-disable-next-line unicorn/prefer-native-coercion-functions\n\toverride mapFromDriverValue(value: string): bigint {\n\t\treturn BigInt(value);\n\t}\n}\n\nexport interface PgBigIntConfig<T extends 'number' | 'bigint' = 'number' | 'bigint'> {\n\tmode: T;\n}\n\nexport function bigint<TMode extends PgBigIntConfig['mode']>(\n\tconfig: PgBigIntConfig<TMode>,\n): TMode extends 'number' ? PgBigInt53BuilderInitial<''> : PgBigInt64BuilderInitial<''>;\nexport function bigint<TName extends string, TMode extends PgBigIntConfig['mode']>(\n\tname: TName,\n\tconfig: PgBigIntConfig<TMode>,\n): TMode extends 'number' ? PgBigInt53BuilderInitial<TName> : PgBigInt64BuilderInitial<TName>;\nexport function bigint(a: string | PgBigIntConfig, b?: PgBigIntConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgBigIntConfig>(a, b);\n\tif (config.mode === 'number') {\n\t\treturn new PgBigInt53Builder(name);\n\t}\n\treturn new PgBigInt64Builder(name);\n}\n"],"names":[],"mappings":";;;;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAS,8BAA8B;AACvC,SAAS,gBAAgB;AACzB,SAAS,8BAA8B;;;;;AAWhC,MAAM,mMACJ,yBAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,oBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,YAAY;IACnC;IAAA,cAAA,GAGS,MACR,KAAA,EAC8C;QAC9C,OAAO,IAAI,WAA4C,OAAO,IAAA,CAAK,MAA8C;IAClH;AACD;AAEO,MAAM,qLAAuE,WAAA,CAAY;IAC/F,OAAA,0IAA0B,aAAU,CAAA,GAAY,aAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAgC;QAC3D,IAAI,OAAO,UAAU,UAAU;YAC9B,OAAO;QACR;QACA,OAAO,OAAO,KAAK;IACpB;AACD;AAWO,MAAM,0BACJ,kMAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,oBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,YAAY;IACnC;IAAA,cAAA,GAGS,MACR,KAAA,EAC8C;QAC9C,OAAO,IAAI,WACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,qLAAuE,WAAA,CAAY;IAC/F,OAAA,CAA0B,sJAAU,CAAA,GAAY,aAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAAA,oEAAA;IAGS,mBAAmB,KAAA,EAAuB;QAClD,OAAO,OAAO,KAAK;IACpB;AACD;AAaO,SAAS,OAAO,CAAA,EAA4B,CAAA,EAAoB;IACtE,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,+IAAI,yBAAA,EAAuC,GAAG,CAAC;IACpE,IAAI,OAAO,IAAA,KAAS,UAAU;QAC7B,OAAO,IAAI,kBAAkB,IAAI;IAClC;IACA,OAAO,IAAI,kBAAkB,IAAI;AAClC","debugId":null}},
    {"offset": {"line": 3997, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/bigserial.ts"],"sourcesContent":["import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tHasDefault,\n\tMakeColumnConfig,\n\tNotNull,\n} from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport { getColumnNameAndConfig } from '~/utils.ts';\nimport type { AnyPgTable } from '../table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgBigSerial53BuilderInitial<TName extends string> = NotNull<\n\tHasDefault<\n\t\tPgBigSerial53Builder<{\n\t\t\tname: TName;\n\t\t\tdataType: 'number';\n\t\t\tcolumnType: 'PgBigSerial53';\n\t\t\tdata: number;\n\t\t\tdriverParam: number;\n\t\t\tenumValues: undefined;\n\t\t}>\n\t>\n>;\n\nexport class PgBigSerial53Builder<T extends ColumnBuilderBaseConfig<'number', 'PgBigSerial53'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgBigSerial53Builder';\n\n\tconstructor(name: string) {\n\t\tsuper(name, 'number', 'PgBigSerial53');\n\t\tthis.config.hasDefault = true;\n\t\tthis.config.notNull = true;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgBigSerial53<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgBigSerial53<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgBigSerial53<T extends ColumnBaseConfig<'number', 'PgBigSerial53'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgBigSerial53';\n\n\tgetSQLType(): string {\n\t\treturn 'bigserial';\n\t}\n\n\toverride mapFromDriverValue(value: number): number {\n\t\tif (typeof value === 'number') {\n\t\t\treturn value;\n\t\t}\n\t\treturn Number(value);\n\t}\n}\n\nexport type PgBigSerial64BuilderInitial<TName extends string> = NotNull<\n\tHasDefault<\n\t\tPgBigSerial64Builder<{\n\t\t\tname: TName;\n\t\t\tdataType: 'bigint';\n\t\t\tcolumnType: 'PgBigSerial64';\n\t\t\tdata: bigint;\n\t\t\tdriverParam: string;\n\t\t\tenumValues: undefined;\n\t\t}>\n\t>\n>;\n\nexport class PgBigSerial64Builder<T extends ColumnBuilderBaseConfig<'bigint', 'PgBigSerial64'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgBigSerial64Builder';\n\n\tconstructor(name: string) {\n\t\tsuper(name, 'bigint', 'PgBigSerial64');\n\t\tthis.config.hasDefault = true;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgBigSerial64<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgBigSerial64<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgBigSerial64<T extends ColumnBaseConfig<'bigint', 'PgBigSerial64'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgBigSerial64';\n\n\tgetSQLType(): string {\n\t\treturn 'bigserial';\n\t}\n\n\t// eslint-disable-next-line unicorn/prefer-native-coercion-functions\n\toverride mapFromDriverValue(value: string): bigint {\n\t\treturn BigInt(value);\n\t}\n}\n\nexport interface PgBigSerialConfig<T extends 'number' | 'bigint' = 'number' | 'bigint'> {\n\tmode: T;\n}\n\nexport function bigserial<TMode extends PgBigSerialConfig['mode']>(\n\tconfig: PgBigSerialConfig<TMode>,\n): TMode extends 'number' ? PgBigSerial53BuilderInitial<''> : PgBigSerial64BuilderInitial<''>;\nexport function bigserial<TName extends string, TMode extends PgBigSerialConfig['mode']>(\n\tname: TName,\n\tconfig: PgBigSerialConfig<TMode>,\n): TMode extends 'number' ? PgBigSerial53BuilderInitial<TName> : PgBigSerial64BuilderInitial<TName>;\nexport function bigserial(a: string | PgBigSerialConfig, b?: PgBigSerialConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgBigSerialConfig>(a, b);\n\tif (config.mode === 'number') {\n\t\treturn new PgBigSerial53Builder(name);\n\t}\n\treturn new PgBigSerial64Builder(name);\n}\n"],"names":[],"mappings":";;;;;;;AAQA,SAAS,kBAAkB;AAC3B,SAAS,8BAA8B;AAEvC,SAAS,UAAU,uBAAuB;;;;AAenC,MAAM,+LACJ,kBAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,uBAAA;IAEhD,YAAY,IAAA,CAAc;QACzB,KAAA,CAAM,MAAM,UAAU,eAAe;QACrC,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,IAAA,CAAK,MAAA,CAAO,OAAA,GAAU;IACvB;IAAA,cAAA,GAGS,MACR,KAAA,EACiD;QACjD,OAAO,IAAI,cACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,sBAA6E,6KAAA,CAAY;IACrG,OAAA,0IAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAuB;QAClD,IAAI,OAAO,UAAU,UAAU;YAC9B,OAAO;QACR;QACA,OAAO,OAAO,KAAK;IACpB;AACD;AAeO,MAAM,+LACJ,kBAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,uBAAA;IAEhD,YAAY,IAAA,CAAc;QACzB,KAAA,CAAM,MAAM,UAAU,eAAe;QACrC,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;IAC1B;IAAA,cAAA,GAGS,MACR,KAAA,EACiD;QACjD,OAAO,IAAI,cACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,wLAA6E,WAAA,CAAY;IACrG,OAAA,0IAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAAA,oEAAA;IAGS,mBAAmB,KAAA,EAAuB;QAClD,OAAO,OAAO,KAAK;IACpB;AACD;AAaO,SAAS,UAAU,CAAA,EAA+B,CAAA,EAAuB;IAC/E,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,+IAAI,yBAAA,EAA0C,GAAG,CAAC;IACvE,IAAI,OAAO,IAAA,KAAS,UAAU;QAC7B,OAAO,IAAI,qBAAqB,IAAI;IACrC;IACA,OAAO,IAAI,qBAAqB,IAAI;AACrC","debugId":null}},
    {"offset": {"line": 4066, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/boolean.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgBooleanBuilderInitial<TName extends string> = PgBooleanBuilder<{\n\tname: TName;\n\tdataType: 'boolean';\n\tcolumnType: 'PgBoolean';\n\tdata: boolean;\n\tdriverParam: boolean;\n\tenumValues: undefined;\n}>;\n\nexport class PgBooleanBuilder<T extends ColumnBuilderBaseConfig<'boolean', 'PgBoolean'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgBooleanBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'boolean', 'PgBoolean');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgBoolean<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgBoolean<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgBoolean<T extends ColumnBaseConfig<'boolean', 'PgBoolean'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgBoolean';\n\n\tgetSQLType(): string {\n\t\treturn 'boolean';\n\t}\n}\n\nexport function boolean(): PgBooleanBuilderInitial<''>;\nexport function boolean<TName extends string>(name: TName): PgBooleanBuilderInitial<TName>;\nexport function boolean(name?: string) {\n\treturn new PgBooleanBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAWnC,MAAM,2LAAoF,kBAAA,CAAmB;IACnH,OAAA,0IAA0B,aAAU,CAAA,GAAY,mBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,WAAW,WAAW;IACnC;IAAA,cAAA,GAGS,MACR,KAAA,EAC6C;QAC7C,OAAO,IAAI,UAA2C,OAAO,IAAA,CAAK,MAA8C;IACjH;AACD;AAEO,MAAM,oLAAsE,WAAA,CAAY;IAC9F,OAAA,0IAA0B,aAAU,CAAA,GAAY,YAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAIO,SAAS,QAAQ,IAAA,EAAe;IACtC,OAAO,IAAI,iBAAiB,QAAQ,EAAE;AACvC","debugId":null}},
    {"offset": {"line": 4099, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/char.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { getColumnNameAndConfig, type Writable } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgCharBuilderInitial<\n\tTName extends string,\n\tTEnum extends [string, ...string[]],\n\tTLength extends number | undefined,\n> = PgCharBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgChar';\n\tdata: TEnum[number];\n\tenumValues: TEnum;\n\tdriverParam: string;\n\tlength: TLength;\n}>;\n\nexport class PgCharBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgChar'> & { length?: number | undefined }>\n\textends PgColumnBuilder<\n\t\tT,\n\t\t{ length: T['length']; enumValues: T['enumValues'] },\n\t\t{ length: T['length'] }\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'PgCharBuilder';\n\n\tconstructor(name: T['name'], config: PgCharConfig<T['enumValues'], T['length']>) {\n\t\tsuper(name, 'string', 'PgChar');\n\t\tthis.config.length = config.length;\n\t\tthis.config.enumValues = config.enum;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgChar<MakeColumnConfig<T, TTableName> & { length: T['length'] }> {\n\t\treturn new PgChar<MakeColumnConfig<T, TTableName> & { length: T['length'] }>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgChar<T extends ColumnBaseConfig<'string', 'PgChar'> & { length?: number | undefined }>\n\textends PgColumn<T, { length: T['length']; enumValues: T['enumValues'] }, { length: T['length'] }>\n{\n\tstatic override readonly [entityKind]: string = 'PgChar';\n\n\treadonly length = this.config.length;\n\toverride readonly enumValues = this.config.enumValues;\n\n\tgetSQLType(): string {\n\t\treturn this.length === undefined ? `char` : `char(${this.length})`;\n\t}\n}\n\nexport interface PgCharConfig<\n\tTEnum extends readonly string[] | string[] | undefined = readonly string[] | string[] | undefined,\n\tTLength extends number | undefined = number | undefined,\n> {\n\tenum?: TEnum;\n\tlength?: TLength;\n}\n\nexport function char(): PgCharBuilderInitial<'', [string, ...string[]], undefined>;\nexport function char<U extends string, T extends Readonly<[U, ...U[]]>, L extends number | undefined>(\n\tconfig?: PgCharConfig<T | Writable<T>, L>,\n): PgCharBuilderInitial<'', Writable<T>, L>;\nexport function char<\n\tTName extends string,\n\tU extends string,\n\tT extends Readonly<[U, ...U[]]>,\n\tL extends number | undefined,\n>(\n\tname: TName,\n\tconfig?: PgCharConfig<T | Writable<T>, L>,\n): PgCharBuilderInitial<TName, Writable<T>, L>;\nexport function char(a?: string | PgCharConfig, b: PgCharConfig = {}): any {\n\tconst { name, config } = getColumnNameAndConfig<PgCharConfig>(a, b);\n\treturn new PgCharBuilder(name, config as any);\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,8BAA6C;AACtD,SAAS,UAAU,uBAAuB;;;;AAgBnC,MAAM,wLACJ,kBAAA,CAKT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,YAAY,IAAA,EAAiB,MAAA,CAAoD;QAChF,KAAA,CAAM,MAAM,UAAU,QAAQ;QAC9B,IAAA,CAAK,MAAA,CAAO,MAAA,GAAS,OAAO,MAAA;QAC5B,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa,OAAO,IAAA;IACjC;IAAA,cAAA,GAGS,MACR,KAAA,EACoE;QACpE,OAAO,IAAI,OACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,iLACJ,WAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,SAAA;IAEvC,SAAS,IAAA,CAAK,MAAA,CAAO,MAAA,CAAA;IACZ,aAAa,IAAA,CAAK,MAAA,CAAO,UAAA,CAAA;IAE3C,aAAqB;QACpB,OAAO,IAAA,CAAK,MAAA,KAAW,KAAA,IAAY,CAAA,IAAA,CAAA,GAAS,CAAA,KAAA,EAAQ,IAAA,CAAK,MAAM,CAAA,CAAA,CAAA;IAChE;AACD;AAuBO,SAAS,KAAK,CAAA,EAA2B,IAAkB,CAAC,CAAA,EAAQ;IAC1E,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,+IAAI,yBAAA,EAAqC,GAAG,CAAC;IAClE,OAAO,IAAI,cAAc,MAAM,MAAa;AAC7C","debugId":null}},
    {"offset": {"line": 4139, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/cidr.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '../table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgCidrBuilderInitial<TName extends string> = PgCidrBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgCidr';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgCidrBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgCidr'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgCidrBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'PgCidr');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgCidr<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgCidr<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgCidr<T extends ColumnBaseConfig<'string', 'PgCidr'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgCidr';\n\n\tgetSQLType(): string {\n\t\treturn 'cidr';\n\t}\n}\n\nexport function cidr(): PgCidrBuilderInitial<''>;\nexport function cidr<TName extends string>(name: TName): PgCidrBuilderInitial<TName>;\nexport function cidr(name?: string) {\n\treturn new PgCidrBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAWnC,MAAM,wLAA6E,kBAAA,CAAmB;IAC5G,OAAA,0IAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,QAAQ;IAC/B;IAAA,cAAA,GAGS,MACR,KAAA,EAC0C;QAC1C,OAAO,IAAI,OAAwC,OAAO,IAAA,CAAK,MAA8C;IAC9G;AACD;AAEO,MAAM,iLAA+D,WAAA,CAAY;IACvF,OAAA,0IAA0B,aAAU,CAAA,GAAY,SAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAIO,SAAS,KAAK,IAAA,EAAe;IACnC,OAAO,IAAI,cAAc,QAAQ,EAAE;AACpC","debugId":null}},
    {"offset": {"line": 4172, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/custom.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type ConvertCustomConfig<TName extends string, T extends Partial<CustomTypeValues>> =\n\t& {\n\t\tname: TName;\n\t\tdataType: 'custom';\n\t\tcolumnType: 'PgCustomColumn';\n\t\tdata: T['data'];\n\t\tdriverParam: T['driverData'];\n\t\tenumValues: undefined;\n\t}\n\t& (T['notNull'] extends true ? { notNull: true } : {})\n\t& (T['default'] extends true ? { hasDefault: true } : {});\n\nexport interface PgCustomColumnInnerConfig {\n\tcustomTypeValues: CustomTypeValues;\n}\n\nexport class PgCustomColumnBuilder<T extends ColumnBuilderBaseConfig<'custom', 'PgCustomColumn'>>\n\textends PgColumnBuilder<\n\t\tT,\n\t\t{\n\t\t\tfieldConfig: CustomTypeValues['config'];\n\t\t\tcustomTypeParams: CustomTypeParams<any>;\n\t\t},\n\t\t{\n\t\t\tpgColumnBuilderBrand: 'PgCustomColumnBuilderBrand';\n\t\t}\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'PgCustomColumnBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\tfieldConfig: CustomTypeValues['config'],\n\t\tcustomTypeParams: CustomTypeParams<any>,\n\t) {\n\t\tsuper(name, 'custom', 'PgCustomColumn');\n\t\tthis.config.fieldConfig = fieldConfig;\n\t\tthis.config.customTypeParams = customTypeParams;\n\t}\n\n\t/** @internal */\n\tbuild<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgCustomColumn<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgCustomColumn<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgCustomColumn<T extends ColumnBaseConfig<'custom', 'PgCustomColumn'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgCustomColumn';\n\n\tprivate sqlName: string;\n\tprivate mapTo?: (value: T['data']) => T['driverParam'];\n\tprivate mapFrom?: (value: T['driverParam']) => T['data'];\n\n\tconstructor(\n\t\ttable: AnyPgTable<{ name: T['tableName'] }>,\n\t\tconfig: PgCustomColumnBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.sqlName = config.customTypeParams.dataType(config.fieldConfig);\n\t\tthis.mapTo = config.customTypeParams.toDriver;\n\t\tthis.mapFrom = config.customTypeParams.fromDriver;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn this.sqlName;\n\t}\n\n\toverride mapFromDriverValue(value: T['driverParam']): T['data'] {\n\t\treturn typeof this.mapFrom === 'function' ? this.mapFrom(value) : value as T['data'];\n\t}\n\n\toverride mapToDriverValue(value: T['data']): T['driverParam'] {\n\t\treturn typeof this.mapTo === 'function' ? this.mapTo(value) : value as T['data'];\n\t}\n}\n\nexport type CustomTypeValues = {\n\t/**\n\t * Required type for custom column, that will infer proper type model\n\t *\n\t * Examples:\n\t *\n\t * If you want your column to be `string` type after selecting/or on inserting - use `data: string`. Like `text`, `varchar`\n\t *\n\t * If you want your column to be `number` type after selecting/or on inserting - use `data: number`. Like `integer`\n\t */\n\tdata: unknown;\n\n\t/**\n\t * Type helper, that represents what type database driver is accepting for specific database data type\n\t */\n\tdriverData?: unknown;\n\n\t/**\n\t * What config type should be used for {@link CustomTypeParams} `dataType` generation\n\t */\n\tconfig?: Record<string, any>;\n\n\t/**\n\t * Whether the config argument should be required or not\n\t * @default false\n\t */\n\tconfigRequired?: boolean;\n\n\t/**\n\t * If your custom data type should be notNull by default you can use `notNull: true`\n\t *\n\t * @example\n\t * const customSerial = customType<{ data: number, notNull: true, default: true }>({\n\t * \t  dataType() {\n\t * \t    return 'serial';\n\t *    },\n\t * });\n\t */\n\tnotNull?: boolean;\n\n\t/**\n\t * If your custom data type has default you can use `default: true`\n\t *\n\t * @example\n\t * const customSerial = customType<{ data: number, notNull: true, default: true }>({\n\t * \t  dataType() {\n\t * \t    return 'serial';\n\t *    },\n\t * });\n\t */\n\tdefault?: boolean;\n};\n\nexport interface CustomTypeParams<T extends CustomTypeValues> {\n\t/**\n\t * Database data type string representation, that is used for migrations\n\t * @example\n\t * ```\n\t * `jsonb`, `text`\n\t * ```\n\t *\n\t * If database data type needs additional params you can use them from `config` param\n\t * @example\n\t * ```\n\t * `varchar(256)`, `numeric(2,3)`\n\t * ```\n\t *\n\t * To make `config` be of specific type please use config generic in {@link CustomTypeValues}\n\t *\n\t * @example\n\t * Usage example\n\t * ```\n\t *   dataType() {\n\t *     return 'boolean';\n\t *   },\n\t * ```\n\t * Or\n\t * ```\n\t *   dataType(config) {\n\t * \t   return typeof config.length !== 'undefined' ? `varchar(${config.length})` : `varchar`;\n\t * \t }\n\t * ```\n\t */\n\tdataType: (config: T['config'] | (Equal<T['configRequired'], true> extends true ? never : undefined)) => string;\n\n\t/**\n\t * Optional mapping function, between user input and driver\n\t * @example\n\t * For example, when using jsonb we need to map JS/TS object to string before writing to database\n\t * ```\n\t * toDriver(value: TData): string {\n\t * \t return JSON.stringify(value);\n\t * }\n\t * ```\n\t */\n\ttoDriver?: (value: T['data']) => T['driverData'] | SQL;\n\n\t/**\n\t * Optional mapping function, that is responsible for data mapping from database to JS/TS code\n\t * @example\n\t * For example, when using timestamp we need to map string Date representation to JS Date\n\t * ```\n\t * fromDriver(value: string): Date {\n\t * \treturn new Date(value);\n\t * },\n\t * ```\n\t */\n\tfromDriver?: (value: T['driverData']) => T['data'];\n}\n\n/**\n * Custom pg database data type generator\n */\nexport function customType<T extends CustomTypeValues = CustomTypeValues>(\n\tcustomTypeParams: CustomTypeParams<T>,\n): Equal<T['configRequired'], true> extends true ? {\n\t\t<TConfig extends Record<string, any> & T['config']>(\n\t\t\tfieldConfig: TConfig,\n\t\t): PgCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TName extends string>(\n\t\t\tdbName: TName,\n\t\t\tfieldConfig: T['config'],\n\t\t): PgCustomColumnBuilder<ConvertCustomConfig<TName, T>>;\n\t}\n\t: {\n\t\t(): PgCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TConfig extends Record<string, any> & T['config']>(\n\t\t\tfieldConfig?: TConfig,\n\t\t): PgCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TName extends string>(\n\t\t\tdbName: TName,\n\t\t\tfieldConfig?: T['config'],\n\t\t): PgCustomColumnBuilder<ConvertCustomConfig<TName, T>>;\n\t}\n{\n\treturn <TName extends string>(\n\t\ta?: TName | T['config'],\n\t\tb?: T['config'],\n\t): PgCustomColumnBuilder<ConvertCustomConfig<TName, T>> => {\n\t\tconst { name, config } = getColumnNameAndConfig<T['config']>(a, b);\n\t\treturn new PgCustomColumnBuilder(name as ConvertCustomConfig<TName, T>['name'], config, customTypeParams);\n\t};\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAqB,8BAA8B;AACnD,SAAS,UAAU,uBAAuB;;;;AAkBnC,MAAM,gMACJ,kBAAA,CAUT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,wBAAA;IAEhD,YACC,IAAA,EACA,WAAA,EACA,gBAAA,CACC;QACD,KAAA,CAAM,MAAM,UAAU,gBAAgB;QACtC,IAAA,CAAK,MAAA,CAAO,WAAA,GAAc;QAC1B,IAAA,CAAK,MAAA,CAAO,gBAAA,GAAmB;IAChC;IAAA,cAAA,GAGA,MACC,KAAA,EACkD;QAClD,OAAO,IAAI,eACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,yLAA+E,WAAA,CAAY;IACvG,OAAA,0IAA0B,aAAU,CAAA,GAAY,iBAAA;IAExC,QAAA;IACA,MAAA;IACA,QAAA;IAER,YACC,KAAA,EACA,MAAA,CACC;QACD,KAAA,CAAM,OAAO,MAAM;QACnB,IAAA,CAAK,OAAA,GAAU,OAAO,gBAAA,CAAiB,QAAA,CAAS,OAAO,WAAW;QAClE,IAAA,CAAK,KAAA,GAAQ,OAAO,gBAAA,CAAiB,QAAA;QACrC,IAAA,CAAK,OAAA,GAAU,OAAO,gBAAA,CAAiB,UAAA;IACxC;IAEA,aAAqB;QACpB,OAAO,IAAA,CAAK,OAAA;IACb;IAES,mBAAmB,KAAA,EAAoC;QAC/D,OAAO,OAAO,IAAA,CAAK,OAAA,KAAY,aAAa,IAAA,CAAK,OAAA,CAAQ,KAAK,IAAI;IACnE;IAES,iBAAiB,KAAA,EAAoC;QAC7D,OAAO,OAAO,IAAA,CAAK,KAAA,KAAU,aAAa,IAAA,CAAK,KAAA,CAAM,KAAK,IAAI;IAC/D;AACD;AAmHO,SAAS,WACf,gBAAA,EAoBD;IACC,OAAO,CACN,GACA,MAC0D;QAC1D,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,+IAAI,yBAAA,EAAoC,GAAG,CAAC;QACjE,OAAO,IAAI,sBAAsB,MAA+C,QAAQ,gBAAgB;IACzG;AACD","debugId":null}},
    {"offset": {"line": 4227, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/date.common.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnDataType } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport { sql } from '~/sql/sql.ts';\nimport { PgColumnBuilder } from './common.ts';\n\nexport abstract class PgDateColumnBaseBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends PgColumnBuilder<T, TRuntimeConfig> {\n\tstatic override readonly [entityKind]: string = 'PgDateColumnBaseBuilder';\n\n\tdefaultNow() {\n\t\treturn this.default(sql`now()`);\n\t}\n}\n"],"names":[],"mappings":";;;AACA,SAAS,kBAAkB;AAC3B,SAAS,WAAW;AACpB,SAAS,uBAAuB;;;;AAEzB,MAAe,kMAGZ,kBAAA,CAAmC;IAC5C,OAAA,0IAA0B,aAAU,CAAA,GAAY,0BAAA;IAEhD,aAAa;QACZ,OAAO,IAAA,CAAK,OAAA,8IAAQ,MAAA,CAAA,KAAA,CAAU;IAC/B;AACD","debugId":null}},
    {"offset": {"line": 4248, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/date.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn } from './common.ts';\nimport { PgDateColumnBaseBuilder } from './date.common.ts';\n\nexport type PgDateBuilderInitial<TName extends string> = PgDateBuilder<{\n\tname: TName;\n\tdataType: 'date';\n\tcolumnType: 'PgDate';\n\tdata: Date;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgDateBuilder<T extends ColumnBuilderBaseConfig<'date', 'PgDate'>> extends PgDateColumnBaseBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgDateBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'date', 'PgDate');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgDate<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgDate<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgDate<T extends ColumnBaseConfig<'date', 'PgDate'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgDate';\n\n\tgetSQLType(): string {\n\t\treturn 'date';\n\t}\n\n\toverride mapFromDriverValue(value: string): Date {\n\t\treturn new Date(value);\n\t}\n\n\toverride mapToDriverValue(value: Date): string {\n\t\treturn value.toISOString();\n\t}\n}\n\nexport type PgDateStringBuilderInitial<TName extends string> = PgDateStringBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgDateString';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgDateStringBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgDateString'>>\n\textends PgDateColumnBaseBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgDateStringBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'PgDateString');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgDateString<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgDateString<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgDateString<T extends ColumnBaseConfig<'string', 'PgDateString'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgDateString';\n\n\tgetSQLType(): string {\n\t\treturn 'date';\n\t}\n}\n\nexport interface PgDateConfig<T extends 'date' | 'string' = 'date' | 'string'> {\n\tmode: T;\n}\n\nexport function date(): PgDateStringBuilderInitial<''>;\nexport function date<TMode extends PgDateConfig['mode'] & {}>(\n\tconfig?: PgDateConfig<TMode>,\n): Equal<TMode, 'date'> extends true ? PgDateBuilderInitial<''> : PgDateStringBuilderInitial<''>;\nexport function date<TName extends string, TMode extends PgDateConfig['mode'] & {}>(\n\tname: TName,\n\tconfig?: PgDateConfig<TMode>,\n): Equal<TMode, 'date'> extends true ? PgDateBuilderInitial<TName> : PgDateStringBuilderInitial<TName>;\nexport function date(a?: string | PgDateConfig, b?: PgDateConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgDateConfig>(a, b);\n\tif (config?.mode === 'date') {\n\t\treturn new PgDateBuilder(name);\n\t}\n\treturn new PgDateStringBuilder(name);\n}\n"],"names":[],"mappings":";;;;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAqB,8BAA8B;AACnD,SAAS,gBAAgB;AACzB,SAAS,+BAA+B;;;;;AAWjC,MAAM,gMAA2E,0BAAA,CAA2B;IAClH,OAAA,0IAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,QAAQ,QAAQ;IAC7B;IAAA,cAAA,GAGS,MACR,KAAA,EAC0C;QAC1C,OAAO,IAAI,OAAwC,OAAO,IAAA,CAAK,MAA8C;IAC9G;AACD;AAEO,MAAM,iLAA6D,WAAA,CAAY;IACrF,OAAA,yIAA0B,cAAU,CAAA,GAAY,SAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAqB;QAChD,OAAO,IAAI,KAAK,KAAK;IACtB;IAES,iBAAiB,KAAA,EAAqB;QAC9C,OAAO,MAAM,WAAA,CAAY;IAC1B;AACD;AAWO,MAAM,sMACJ,0BAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,sBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,cAAc;IACrC;IAAA,cAAA,GAGS,MACR,KAAA,EACgD;QAChD,OAAO,IAAI,aACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,uLAA2E,WAAA,CAAY;IACnG,OAAA,0IAA0B,aAAU,CAAA,GAAY,eAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAcO,SAAS,KAAK,CAAA,EAA2B,CAAA,EAAkB;IACjE,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,+IAAI,yBAAA,EAAqC,GAAG,CAAC;IAClE,IAAI,QAAQ,SAAS,QAAQ;QAC5B,OAAO,IAAI,cAAc,IAAI;IAC9B;IACA,OAAO,IAAI,oBAAoB,IAAI;AACpC","debugId":null}},
    {"offset": {"line": 4312, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/double-precision.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgDoublePrecisionBuilderInitial<TName extends string> = PgDoublePrecisionBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'PgDoublePrecision';\n\tdata: number;\n\tdriverParam: string | number;\n\tenumValues: undefined;\n}>;\n\nexport class PgDoublePrecisionBuilder<T extends ColumnBuilderBaseConfig<'number', 'PgDoublePrecision'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgDoublePrecisionBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'PgDoublePrecision');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgDoublePrecision<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgDoublePrecision<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgDoublePrecision<T extends ColumnBaseConfig<'number', 'PgDoublePrecision'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgDoublePrecision';\n\n\tgetSQLType(): string {\n\t\treturn 'double precision';\n\t}\n\n\toverride mapFromDriverValue(value: string | number): number {\n\t\tif (typeof value === 'string') {\n\t\t\treturn Number.parseFloat(value);\n\t\t}\n\t\treturn value;\n\t}\n}\n\nexport function doublePrecision(): PgDoublePrecisionBuilderInitial<''>;\nexport function doublePrecision<TName extends string>(name: TName): PgDoublePrecisionBuilderInitial<TName>;\nexport function doublePrecision(name?: string) {\n\treturn new PgDoublePrecisionBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAWnC,MAAM,mMACJ,kBAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,2BAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,mBAAmB;IAC1C;IAAA,cAAA,GAGS,MACR,KAAA,EACqD;QACrD,OAAO,IAAI,kBACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,4LAAqF,WAAA,CAAY;IAC7G,OAAA,0IAA0B,aAAU,CAAA,GAAY,oBAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAgC;QAC3D,IAAI,OAAO,UAAU,UAAU;YAC9B,OAAO,OAAO,UAAA,CAAW,KAAK;QAC/B;QACA,OAAO;IACR;AACD;AAIO,SAAS,gBAAgB,IAAA,EAAe;IAC9C,OAAO,IAAI,yBAAyB,QAAQ,EAAE;AAC/C","debugId":null}},
    {"offset": {"line": 4351, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/inet.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '../table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgInetBuilderInitial<TName extends string> = PgInetBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgInet';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgInetBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgInet'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgInetBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'PgInet');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgInet<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgInet<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgInet<T extends ColumnBaseConfig<'string', 'PgInet'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgInet';\n\n\tgetSQLType(): string {\n\t\treturn 'inet';\n\t}\n}\n\nexport function inet(): PgInetBuilderInitial<''>;\nexport function inet<TName extends string>(name: TName): PgInetBuilderInitial<TName>;\nexport function inet(name?: string) {\n\treturn new PgInetBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAWnC,MAAM,wLAA6E,kBAAA,CAAmB;IAC5G,OAAA,0IAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,QAAQ;IAC/B;IAAA,cAAA,GAGS,MACR,KAAA,EAC0C;QAC1C,OAAO,IAAI,OAAwC,OAAO,IAAA,CAAK,MAA8C;IAC9G;AACD;AAEO,MAAM,iLAA+D,WAAA,CAAY;IACvF,OAAA,0IAA0B,aAAU,CAAA,GAAY,SAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAIO,SAAS,KAAK,IAAA,EAAe;IACnC,OAAO,IAAI,cAAc,QAAQ,EAAE;AACpC","debugId":null}},
    {"offset": {"line": 4384, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/integer.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '../table.ts';\nimport { PgColumn } from './common.ts';\nimport { PgIntColumnBaseBuilder } from './int.common.ts';\n\nexport type PgIntegerBuilderInitial<TName extends string> = PgIntegerBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'PgInteger';\n\tdata: number;\n\tdriverParam: number | string;\n\tenumValues: undefined;\n}>;\n\nexport class PgIntegerBuilder<T extends ColumnBuilderBaseConfig<'number', 'PgInteger'>>\n\textends PgIntColumnBaseBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgIntegerBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'PgInteger');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgInteger<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgInteger<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgInteger<T extends ColumnBaseConfig<'number', 'PgInteger'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgInteger';\n\n\tgetSQLType(): string {\n\t\treturn 'integer';\n\t}\n\n\toverride mapFromDriverValue(value: number | string): number {\n\t\tif (typeof value === 'string') {\n\t\t\treturn Number.parseInt(value);\n\t\t}\n\t\treturn value;\n\t}\n}\n\nexport function integer(): PgIntegerBuilderInitial<''>;\nexport function integer<TName extends string>(name: TName): PgIntegerBuilderInitial<TName>;\nexport function integer(name?: string) {\n\treturn new PgIntegerBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,gBAAgB;AACzB,SAAS,8BAA8B;;;;AAWhC,MAAM,kMACJ,yBAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,mBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,WAAW;IAClC;IAAA,cAAA,GAGS,MACR,KAAA,EAC6C;QAC7C,OAAO,IAAI,UAA2C,OAAO,IAAA,CAAK,MAA8C;IACjH;AACD;AAEO,MAAM,oLAAqE,WAAA,CAAY;IAC7F,OAAA,0IAA0B,aAAU,CAAA,GAAY,YAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAgC;QAC3D,IAAI,OAAO,UAAU,UAAU;YAC9B,OAAO,OAAO,QAAA,CAAS,KAAK;QAC7B;QACA,OAAO;IACR;AACD;AAIO,SAAS,QAAQ,IAAA,EAAe;IACtC,OAAO,IAAI,iBAAiB,QAAQ,EAAE;AACvC","debugId":null}},
    {"offset": {"line": 4425, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/interval.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\nimport type { Precision } from './timestamp.ts';\n\nexport type PgIntervalBuilderInitial<TName extends string> = PgIntervalBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgInterval';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgIntervalBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgInterval'>>\n\textends PgColumnBuilder<T, { intervalConfig: IntervalConfig }>\n{\n\tstatic override readonly [entityKind]: string = 'PgIntervalBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\tintervalConfig: IntervalConfig,\n\t) {\n\t\tsuper(name, 'string', 'PgInterval');\n\t\tthis.config.intervalConfig = intervalConfig;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgInterval<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgInterval<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgInterval<T extends ColumnBaseConfig<'string', 'PgInterval'>>\n\textends PgColumn<T, { intervalConfig: IntervalConfig }>\n{\n\tstatic override readonly [entityKind]: string = 'PgInterval';\n\n\treadonly fields: IntervalConfig['fields'] = this.config.intervalConfig.fields;\n\treadonly precision: IntervalConfig['precision'] = this.config.intervalConfig.precision;\n\n\tgetSQLType(): string {\n\t\tconst fields = this.fields ? ` ${this.fields}` : '';\n\t\tconst precision = this.precision ? `(${this.precision})` : '';\n\t\treturn `interval${fields}${precision}`;\n\t}\n}\n\nexport interface IntervalConfig {\n\tfields?:\n\t\t| 'year'\n\t\t| 'month'\n\t\t| 'day'\n\t\t| 'hour'\n\t\t| 'minute'\n\t\t| 'second'\n\t\t| 'year to month'\n\t\t| 'day to hour'\n\t\t| 'day to minute'\n\t\t| 'day to second'\n\t\t| 'hour to minute'\n\t\t| 'hour to second'\n\t\t| 'minute to second';\n\tprecision?: Precision;\n}\n\nexport function interval(): PgIntervalBuilderInitial<''>;\nexport function interval(\n\tconfig?: IntervalConfig,\n): PgIntervalBuilderInitial<''>;\nexport function interval<TName extends string>(\n\tname: TName,\n\tconfig?: IntervalConfig,\n): PgIntervalBuilderInitial<TName>;\nexport function interval(a?: string | IntervalConfig, b: IntervalConfig = {}) {\n\tconst { name, config } = getColumnNameAndConfig<IntervalConfig>(a, b);\n\treturn new PgIntervalBuilder(name, config);\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,8BAA8B;AACvC,SAAS,UAAU,uBAAuB;;;;AAYnC,MAAM,4LACJ,kBAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,oBAAA;IAEhD,YACC,IAAA,EACA,cAAA,CACC;QACD,KAAA,CAAM,MAAM,UAAU,YAAY;QAClC,IAAA,CAAK,MAAA,CAAO,cAAA,GAAiB;IAC9B;IAAA,cAAA,GAGS,MACR,KAAA,EAC8C;QAC9C,OAAO,IAAI,WAA4C,OAAO,IAAA,CAAK,MAA8C;IAClH;AACD;AAEO,MAAM,qLACJ,WAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,aAAA;IAEvC,SAAmC,IAAA,CAAK,MAAA,CAAO,cAAA,CAAe,MAAA,CAAA;IAC9D,YAAyC,IAAA,CAAK,MAAA,CAAO,cAAA,CAAe,SAAA,CAAA;IAE7E,aAAqB;QACpB,MAAM,SAAS,IAAA,CAAK,MAAA,GAAS,CAAA,CAAA,EAAI,IAAA,CAAK,MAAM,EAAA,GAAK;QACjD,MAAM,YAAY,IAAA,CAAK,SAAA,GAAY,CAAA,CAAA,EAAI,IAAA,CAAK,SAAS,CAAA,CAAA,CAAA,GAAM;QAC3D,OAAO,CAAA,QAAA,EAAW,MAAM,GAAG,SAAS,EAAA;IACrC;AACD;AA4BO,SAAS,SAAS,CAAA,EAA6B,IAAoB,CAAC,CAAA,EAAG;IAC7E,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,+IAAI,yBAAA,EAAuC,GAAG,CAAC;IACpE,OAAO,IAAI,kBAAkB,MAAM,MAAM;AAC1C","debugId":null}},
    {"offset": {"line": 4466, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/json.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgJsonBuilderInitial<TName extends string> = PgJsonBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'PgJson';\n\tdata: unknown;\n\tdriverParam: unknown;\n\tenumValues: undefined;\n}>;\n\nexport class PgJsonBuilder<T extends ColumnBuilderBaseConfig<'json', 'PgJson'>> extends PgColumnBuilder<\n\tT\n> {\n\tstatic override readonly [entityKind]: string = 'PgJsonBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'PgJson');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgJson<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgJson<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgJson<T extends ColumnBaseConfig<'json', 'PgJson'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgJson';\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgJsonBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t}\n\n\tgetSQLType(): string {\n\t\treturn 'json';\n\t}\n\n\toverride mapToDriverValue(value: T['data']): string {\n\t\treturn JSON.stringify(value);\n\t}\n\n\toverride mapFromDriverValue(value: T['data'] | string): T['data'] {\n\t\tif (typeof value === 'string') {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(value);\n\t\t\t} catch {\n\t\t\t\treturn value as T['data'];\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n}\n\nexport function json(): PgJsonBuilderInitial<''>;\nexport function json<TName extends string>(name: TName): PgJsonBuilderInitial<TName>;\nexport function json(name?: string) {\n\treturn new PgJsonBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAWnC,MAAM,wLAA2E,kBAAA,CAEtF;IACD,OAAA,0IAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,QAAQ,QAAQ;IAC7B;IAAA,cAAA,GAGS,MACR,KAAA,EAC0C;QAC1C,OAAO,IAAI,OAAwC,OAAO,IAAA,CAAK,MAA8C;IAC9G;AACD;AAEO,MAAM,iLAA6D,WAAA,CAAY;IACrF,OAAA,0IAA0B,aAAU,CAAA,GAAY,SAAA;IAEhD,YAAY,KAAA,EAA6C,MAAA,CAAoC;QAC5F,KAAA,CAAM,OAAO,MAAM;IACpB;IAEA,aAAqB;QACpB,OAAO;IACR;IAES,iBAAiB,KAAA,EAA0B;QACnD,OAAO,KAAK,SAAA,CAAU,KAAK;IAC5B;IAES,mBAAmB,KAAA,EAAsC;QACjE,IAAI,OAAO,UAAU,UAAU;YAC9B,IAAI;gBACH,OAAO,KAAK,KAAA,CAAM,KAAK;YACxB,EAAA,OAAQ;gBACP,OAAO;YACR;QACD;QACA,OAAO;IACR;AACD;AAIO,SAAS,KAAK,IAAA,EAAe;IACnC,OAAO,IAAI,cAAc,QAAQ,EAAE;AACpC","debugId":null}},
    {"offset": {"line": 4515, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/jsonb.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgJsonbBuilderInitial<TName extends string> = PgJsonbBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'PgJsonb';\n\tdata: unknown;\n\tdriverParam: unknown;\n\tenumValues: undefined;\n}>;\n\nexport class PgJsonbBuilder<T extends ColumnBuilderBaseConfig<'json', 'PgJsonb'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgJsonbBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'PgJsonb');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgJsonb<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgJsonb<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgJsonb<T extends ColumnBaseConfig<'json', 'PgJsonb'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgJsonb';\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgJsonbBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t}\n\n\tgetSQLType(): string {\n\t\treturn 'jsonb';\n\t}\n\n\toverride mapToDriverValue(value: T['data']): string {\n\t\treturn JSON.stringify(value);\n\t}\n\n\toverride mapFromDriverValue(value: T['data'] | string): T['data'] {\n\t\tif (typeof value === 'string') {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(value);\n\t\t\t} catch {\n\t\t\t\treturn value as T['data'];\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n}\n\nexport function jsonb(): PgJsonbBuilderInitial<''>;\nexport function jsonb<TName extends string>(name: TName): PgJsonbBuilderInitial<TName>;\nexport function jsonb(name?: string) {\n\treturn new PgJsonbBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAWnC,MAAM,yLAA6E,kBAAA,CAAmB;IAC5G,OAAA,0IAA0B,aAAU,CAAA,GAAY,iBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,QAAQ,SAAS;IAC9B;IAAA,cAAA,GAGS,MACR,KAAA,EAC2C;QAC3C,OAAO,IAAI,QAAyC,OAAO,IAAA,CAAK,MAA8C;IAC/G;AACD;AAEO,MAAM,kLAA+D,WAAA,CAAY;IACvF,OAAA,0IAA0B,aAAU,CAAA,GAAY,UAAA;IAEhD,YAAY,KAAA,EAA6C,MAAA,CAAqC;QAC7F,KAAA,CAAM,OAAO,MAAM;IACpB;IAEA,aAAqB;QACpB,OAAO;IACR;IAES,iBAAiB,KAAA,EAA0B;QACnD,OAAO,KAAK,SAAA,CAAU,KAAK;IAC5B;IAES,mBAAmB,KAAA,EAAsC;QACjE,IAAI,OAAO,UAAU,UAAU;YAC9B,IAAI;gBACH,OAAO,KAAK,KAAA,CAAM,KAAK;YACxB,EAAA,OAAQ;gBACP,OAAO;YACR;QACD;QACA,OAAO;IACR;AACD;AAIO,SAAS,MAAM,IAAA,EAAe;IACpC,OAAO,IAAI,eAAe,QAAQ,EAAE;AACrC","debugId":null}},
    {"offset": {"line": 4564, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/line.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\n\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgLineBuilderInitial<TName extends string> = PgLineBuilder<{\n\tname: TName;\n\tdataType: 'array';\n\tcolumnType: 'PgLine';\n\tdata: [number, number, number];\n\tdriverParam: number | string;\n\tenumValues: undefined;\n}>;\n\nexport class PgLineBuilder<T extends ColumnBuilderBaseConfig<'array', 'PgLine'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgLineBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'array', 'PgLine');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgLineTuple<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgLineTuple<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgLineTuple<T extends ColumnBaseConfig<'array', 'PgLine'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgLine';\n\n\tgetSQLType(): string {\n\t\treturn 'line';\n\t}\n\n\toverride mapFromDriverValue(value: string): [number, number, number] {\n\t\tconst [a, b, c] = value.slice(1, -1).split(',');\n\t\treturn [Number.parseFloat(a!), Number.parseFloat(b!), Number.parseFloat(c!)];\n\t}\n\n\toverride mapToDriverValue(value: [number, number, number]): string {\n\t\treturn `{${value[0]},${value[1]},${value[2]}}`;\n\t}\n}\n\nexport type PgLineABCBuilderInitial<TName extends string> = PgLineABCBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'PgLineABC';\n\tdata: { a: number; b: number; c: number };\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgLineABCBuilder<T extends ColumnBuilderBaseConfig<'json', 'PgLineABC'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgLineABCBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'PgLineABC');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgLineABC<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgLineABC<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgLineABC<T extends ColumnBaseConfig<'json', 'PgLineABC'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgLineABC';\n\n\tgetSQLType(): string {\n\t\treturn 'line';\n\t}\n\n\toverride mapFromDriverValue(value: string): { a: number; b: number; c: number } {\n\t\tconst [a, b, c] = value.slice(1, -1).split(',');\n\t\treturn { a: Number.parseFloat(a!), b: Number.parseFloat(b!), c: Number.parseFloat(c!) };\n\t}\n\n\toverride mapToDriverValue(value: { a: number; b: number; c: number }): string {\n\t\treturn `{${value.a},${value.b},${value.c}}`;\n\t}\n}\n\nexport interface PgLineTypeConfig<T extends 'tuple' | 'abc' = 'tuple' | 'abc'> {\n\tmode?: T;\n}\n\nexport function line(): PgLineBuilderInitial<''>;\nexport function line<TMode extends PgLineTypeConfig['mode'] & {}>(\n\tconfig?: PgLineTypeConfig<TMode>,\n): Equal<TMode, 'abc'> extends true ? PgLineABCBuilderInitial<''>\n\t: PgLineBuilderInitial<''>;\nexport function line<TName extends string, TMode extends PgLineTypeConfig['mode'] & {}>(\n\tname: TName,\n\tconfig?: PgLineTypeConfig<TMode>,\n): Equal<TMode, 'abc'> extends true ? PgLineABCBuilderInitial<TName>\n\t: PgLineBuilderInitial<TName>;\nexport function line(a?: string | PgLineTypeConfig, b?: PgLineTypeConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgLineTypeConfig>(a, b);\n\tif (!config?.mode || config.mode === 'tuple') {\n\t\treturn new PgLineBuilder(name);\n\t}\n\treturn new PgLineABCBuilder(name);\n}\n"],"names":[],"mappings":";;;;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAqB,8BAA8B;AACnD,SAAS,UAAU,uBAAuB;;;;AAWnC,MAAM,wLAA4E,kBAAA,CAAmB;IAC3G,OAAA,0IAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,SAAS,QAAQ;IAC9B;IAAA,cAAA,GAGS,MACR,KAAA,EAC+C;QAC/C,OAAO,IAAI,YACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,sLAAmE,WAAA,CAAY;IAC3F,OAAA,CAA0B,sJAAU,CAAA,GAAY,SAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAyC;QACpE,MAAM,CAAC,GAAG,GAAG,CAAC,CAAA,GAAI,MAAM,KAAA,CAAM,GAAG,CAAA,CAAE,EAAE,KAAA,CAAM,GAAG;QAC9C,OAAO;YAAC,OAAO,UAAA,CAAW,CAAE;YAAG,OAAO,UAAA,CAAW,CAAE;YAAG,OAAO,UAAA,CAAW,CAAE,CAAC;SAAA;IAC5E;IAES,iBAAiB,KAAA,EAAyC;QAClE,OAAO,CAAA,CAAA,EAAI,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA,EAAI,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA,EAAI,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA,CAAA;IAC5C;AACD;AAWO,MAAM,yBAAiF,oLAAA,CAAmB;IAChH,OAAA,0IAA0B,aAAU,CAAA,GAAY,mBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,QAAQ,WAAW;IAChC;IAAA,cAAA,GAGS,MACR,KAAA,EAC6C;QAC7C,OAAO,IAAI,UACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,oLAAmE,WAAA,CAAY;IAC3F,OAAA,0IAA0B,aAAU,CAAA,GAAY,YAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAoD;QAC/E,MAAM,CAAC,GAAG,GAAG,CAAC,CAAA,GAAI,MAAM,KAAA,CAAM,GAAG,CAAA,CAAE,EAAE,KAAA,CAAM,GAAG;QAC9C,OAAO;YAAE,GAAG,OAAO,UAAA,CAAW,CAAE;YAAG,GAAG,OAAO,UAAA,CAAW,CAAE;YAAG,GAAG,OAAO,UAAA,CAAW,CAAE;QAAE;IACvF;IAES,iBAAiB,KAAA,EAAoD;QAC7E,OAAO,CAAA,CAAA,EAAI,MAAM,CAAC,CAAA,CAAA,EAAI,MAAM,CAAC,CAAA,CAAA,EAAI,MAAM,CAAC,CAAA,CAAA,CAAA;IACzC;AACD;AAgBO,SAAS,KAAK,CAAA,EAA+B,CAAA,EAAsB;IACzE,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,+IAAI,yBAAA,EAAyC,GAAG,CAAC;IACtE,IAAI,CAAC,QAAQ,QAAQ,OAAO,IAAA,KAAS,SAAS;QAC7C,OAAO,IAAI,cAAc,IAAI;IAC9B;IACA,OAAO,IAAI,iBAAiB,IAAI;AACjC","debugId":null}},
    {"offset": {"line": 4642, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/macaddr.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '../table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgMacaddrBuilderInitial<TName extends string> = PgMacaddrBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgMacaddr';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgMacaddrBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgMacaddr'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgMacaddrBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'PgMacaddr');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgMacaddr<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgMacaddr<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgMacaddr<T extends ColumnBaseConfig<'string', 'PgMacaddr'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgMacaddr';\n\n\tgetSQLType(): string {\n\t\treturn 'macaddr';\n\t}\n}\n\nexport function macaddr(): PgMacaddrBuilderInitial<''>;\nexport function macaddr<TName extends string>(name: TName): PgMacaddrBuilderInitial<TName>;\nexport function macaddr(name?: string) {\n\treturn new PgMacaddrBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAWnC,MAAM,2LAAmF,kBAAA,CAAmB;IAClH,OAAA,0IAA0B,aAAU,CAAA,GAAY,mBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,WAAW;IAClC;IAAA,cAAA,GAGS,MACR,KAAA,EAC6C;QAC7C,OAAO,IAAI,UAA2C,OAAO,IAAA,CAAK,MAA8C;IACjH;AACD;AAEO,MAAM,oLAAqE,WAAA,CAAY;IAC7F,OAAA,0IAA0B,aAAU,CAAA,GAAY,YAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAIO,SAAS,QAAQ,IAAA,EAAe;IACtC,OAAO,IAAI,iBAAiB,QAAQ,EAAE;AACvC","debugId":null}},
    {"offset": {"line": 4675, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/macaddr8.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '../table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgMacaddr8BuilderInitial<TName extends string> = PgMacaddr8Builder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgMacaddr8';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgMacaddr8Builder<T extends ColumnBuilderBaseConfig<'string', 'PgMacaddr8'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgMacaddr8Builder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'PgMacaddr8');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgMacaddr8<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgMacaddr8<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgMacaddr8<T extends ColumnBaseConfig<'string', 'PgMacaddr8'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgMacaddr8';\n\n\tgetSQLType(): string {\n\t\treturn 'macaddr8';\n\t}\n}\n\nexport function macaddr8(): PgMacaddr8BuilderInitial<''>;\nexport function macaddr8<TName extends string>(name: TName): PgMacaddr8BuilderInitial<TName>;\nexport function macaddr8(name?: string) {\n\treturn new PgMacaddr8Builder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAWnC,MAAM,4LAAqF,kBAAA,CAAmB;IACpH,OAAA,0IAA0B,aAAU,CAAA,GAAY,oBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,YAAY;IACnC;IAAA,cAAA,GAGS,MACR,KAAA,EAC8C;QAC9C,OAAO,IAAI,WAA4C,OAAO,IAAA,CAAK,MAA8C;IAClH;AACD;AAEO,MAAM,qLAAuE,WAAA,CAAY;IAC/F,OAAA,0IAA0B,aAAU,CAAA,GAAY,aAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAIO,SAAS,SAAS,IAAA,EAAe;IACvC,OAAO,IAAI,kBAAkB,QAAQ,EAAE;AACxC","debugId":null}},
    {"offset": {"line": 4708, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/numeric.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgNumericBuilderInitial<TName extends string> = PgNumericBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgNumeric';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgNumericBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgNumeric'>> extends PgColumnBuilder<\n\tT,\n\t{\n\t\tprecision: number | undefined;\n\t\tscale: number | undefined;\n\t}\n> {\n\tstatic override readonly [entityKind]: string = 'PgNumericBuilder';\n\n\tconstructor(name: T['name'], precision?: number, scale?: number) {\n\t\tsuper(name, 'string', 'PgNumeric');\n\t\tthis.config.precision = precision;\n\t\tthis.config.scale = scale;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgNumeric<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgNumeric<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgNumeric<T extends ColumnBaseConfig<'string', 'PgNumeric'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgNumeric';\n\n\treadonly precision: number | undefined;\n\treadonly scale: number | undefined;\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgNumericBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t\tthis.precision = config.precision;\n\t\tthis.scale = config.scale;\n\t}\n\n\toverride mapFromDriverValue(value: unknown): string {\n\t\tif (typeof value === 'string') return value;\n\n\t\treturn String(value);\n\t}\n\n\tgetSQLType(): string {\n\t\tif (this.precision !== undefined && this.scale !== undefined) {\n\t\t\treturn `numeric(${this.precision}, ${this.scale})`;\n\t\t} else if (this.precision === undefined) {\n\t\t\treturn 'numeric';\n\t\t} else {\n\t\t\treturn `numeric(${this.precision})`;\n\t\t}\n\t}\n}\n\nexport type PgNumericNumberBuilderInitial<TName extends string> = PgNumericNumberBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'PgNumericNumber';\n\tdata: number;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgNumericNumberBuilder<T extends ColumnBuilderBaseConfig<'number', 'PgNumericNumber'>>\n\textends PgColumnBuilder<\n\t\tT,\n\t\t{\n\t\t\tprecision: number | undefined;\n\t\t\tscale: number | undefined;\n\t\t}\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'PgNumericNumberBuilder';\n\n\tconstructor(name: T['name'], precision?: number, scale?: number) {\n\t\tsuper(name, 'number', 'PgNumericNumber');\n\t\tthis.config.precision = precision;\n\t\tthis.config.scale = scale;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgNumericNumber<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgNumericNumber<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgNumericNumber<T extends ColumnBaseConfig<'number', 'PgNumericNumber'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgNumericNumber';\n\n\treadonly precision: number | undefined;\n\treadonly scale: number | undefined;\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgNumericNumberBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t\tthis.precision = config.precision;\n\t\tthis.scale = config.scale;\n\t}\n\n\toverride mapFromDriverValue(value: unknown): number {\n\t\tif (typeof value === 'number') return value;\n\n\t\treturn Number(value);\n\t}\n\n\toverride mapToDriverValue = String;\n\n\tgetSQLType(): string {\n\t\tif (this.precision !== undefined && this.scale !== undefined) {\n\t\t\treturn `numeric(${this.precision}, ${this.scale})`;\n\t\t} else if (this.precision === undefined) {\n\t\t\treturn 'numeric';\n\t\t} else {\n\t\t\treturn `numeric(${this.precision})`;\n\t\t}\n\t}\n}\n\nexport type PgNumericBigIntBuilderInitial<TName extends string> = PgNumericBigIntBuilder<{\n\tname: TName;\n\tdataType: 'bigint';\n\tcolumnType: 'PgNumericBigInt';\n\tdata: bigint;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgNumericBigIntBuilder<T extends ColumnBuilderBaseConfig<'bigint', 'PgNumericBigInt'>>\n\textends PgColumnBuilder<\n\t\tT,\n\t\t{\n\t\t\tprecision: number | undefined;\n\t\t\tscale: number | undefined;\n\t\t}\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'PgNumericBigIntBuilder';\n\n\tconstructor(name: T['name'], precision?: number, scale?: number) {\n\t\tsuper(name, 'bigint', 'PgNumericBigInt');\n\t\tthis.config.precision = precision;\n\t\tthis.config.scale = scale;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgNumericBigInt<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgNumericBigInt<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgNumericBigInt<T extends ColumnBaseConfig<'bigint', 'PgNumericBigInt'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgNumericBigInt';\n\n\treadonly precision: number | undefined;\n\treadonly scale: number | undefined;\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgNumericBigIntBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t\tthis.precision = config.precision;\n\t\tthis.scale = config.scale;\n\t}\n\n\toverride mapFromDriverValue = BigInt;\n\n\toverride mapToDriverValue = String;\n\n\tgetSQLType(): string {\n\t\tif (this.precision !== undefined && this.scale !== undefined) {\n\t\t\treturn `numeric(${this.precision}, ${this.scale})`;\n\t\t} else if (this.precision === undefined) {\n\t\t\treturn 'numeric';\n\t\t} else {\n\t\t\treturn `numeric(${this.precision})`;\n\t\t}\n\t}\n}\n\nexport type PgNumericConfig<T extends 'string' | 'number' | 'bigint' = 'string' | 'number' | 'bigint'> =\n\t| { precision: number; scale?: number; mode?: T }\n\t| { precision?: number; scale: number; mode?: T }\n\t| { precision?: number; scale?: number; mode: T };\n\nexport function numeric<TMode extends 'string' | 'number' | 'bigint'>(\n\tconfig?: PgNumericConfig<TMode>,\n): Equal<TMode, 'number'> extends true ? PgNumericNumberBuilderInitial<''>\n\t: Equal<TMode, 'bigint'> extends true ? PgNumericBigIntBuilderInitial<''>\n\t: PgNumericBuilderInitial<''>;\nexport function numeric<TName extends string, TMode extends 'string' | 'number' | 'bigint'>(\n\tname: TName,\n\tconfig?: PgNumericConfig<TMode>,\n): Equal<TMode, 'number'> extends true ? PgNumericNumberBuilderInitial<TName>\n\t: Equal<TMode, 'bigint'> extends true ? PgNumericBigIntBuilderInitial<TName>\n\t: PgNumericBuilderInitial<TName>;\nexport function numeric(a?: string | PgNumericConfig, b?: PgNumericConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgNumericConfig>(a, b);\n\tconst mode = config?.mode;\n\treturn mode === 'number'\n\t\t? new PgNumericNumberBuilder(name, config?.precision, config?.scale)\n\t\t: mode === 'bigint'\n\t\t? new PgNumericBigIntBuilder(name, config?.precision, config?.scale)\n\t\t: new PgNumericBuilder(name, config?.precision, config?.scale);\n}\n\nexport const decimal = numeric;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4837, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/point.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\n\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgPointTupleBuilderInitial<TName extends string> = PgPointTupleBuilder<{\n\tname: TName;\n\tdataType: 'array';\n\tcolumnType: 'PgPointTuple';\n\tdata: [number, number];\n\tdriverParam: number | string;\n\tenumValues: undefined;\n}>;\n\nexport class PgPointTupleBuilder<T extends ColumnBuilderBaseConfig<'array', 'PgPointTuple'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgPointTupleBuilder';\n\n\tconstructor(name: string) {\n\t\tsuper(name, 'array', 'PgPointTuple');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgPointTuple<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgPointTuple<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgPointTuple<T extends ColumnBaseConfig<'array', 'PgPointTuple'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgPointTuple';\n\n\tgetSQLType(): string {\n\t\treturn 'point';\n\t}\n\n\toverride mapFromDriverValue(value: string | { x: number; y: number }): [number, number] {\n\t\tif (typeof value === 'string') {\n\t\t\tconst [x, y] = value.slice(1, -1).split(',');\n\t\t\treturn [Number.parseFloat(x!), Number.parseFloat(y!)];\n\t\t}\n\t\treturn [value.x, value.y];\n\t}\n\n\toverride mapToDriverValue(value: [number, number]): string {\n\t\treturn `(${value[0]},${value[1]})`;\n\t}\n}\n\nexport type PgPointObjectBuilderInitial<TName extends string> = PgPointObjectBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'PgPointObject';\n\tdata: { x: number; y: number };\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgPointObjectBuilder<T extends ColumnBuilderBaseConfig<'json', 'PgPointObject'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgPointObjectBuilder';\n\n\tconstructor(name: string) {\n\t\tsuper(name, 'json', 'PgPointObject');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgPointObject<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgPointObject<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgPointObject<T extends ColumnBaseConfig<'json', 'PgPointObject'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgPointObject';\n\n\tgetSQLType(): string {\n\t\treturn 'point';\n\t}\n\n\toverride mapFromDriverValue(value: string | { x: number; y: number }): { x: number; y: number } {\n\t\tif (typeof value === 'string') {\n\t\t\tconst [x, y] = value.slice(1, -1).split(',');\n\t\t\treturn { x: Number.parseFloat(x!), y: Number.parseFloat(y!) };\n\t\t}\n\t\treturn value;\n\t}\n\n\toverride mapToDriverValue(value: { x: number; y: number }): string {\n\t\treturn `(${value.x},${value.y})`;\n\t}\n}\n\nexport interface PgPointConfig<T extends 'tuple' | 'xy' = 'tuple' | 'xy'> {\n\tmode?: T;\n}\n\nexport function point(): PgPointTupleBuilderInitial<''>;\nexport function point<TMode extends PgPointConfig['mode'] & {}>(\n\tconfig?: PgPointConfig<TMode>,\n): Equal<TMode, 'xy'> extends true ? PgPointObjectBuilderInitial<''>\n\t: PgPointTupleBuilderInitial<''>;\nexport function point<TName extends string, TMode extends PgPointConfig['mode'] & {}>(\n\tname: TName,\n\tconfig?: PgPointConfig<TMode>,\n): Equal<TMode, 'xy'> extends true ? PgPointObjectBuilderInitial<TName>\n\t: PgPointTupleBuilderInitial<TName>;\nexport function point(a?: string | PgPointConfig, b?: PgPointConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgPointConfig>(a, b);\n\tif (!config?.mode || config.mode === 'tuple') {\n\t\treturn new PgPointTupleBuilder(name);\n\t}\n\treturn new PgPointObjectBuilder(name);\n}\n"],"names":[],"mappings":";;;;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAqB,8BAA8B;AACnD,SAAS,UAAU,uBAAuB;;;;AAWnC,MAAM,8LACJ,kBAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,sBAAA;IAEhD,YAAY,IAAA,CAAc;QACzB,KAAA,CAAM,MAAM,SAAS,cAAc;IACpC;IAAA,cAAA,GAGS,MACR,KAAA,EACgD;QAChD,OAAO,IAAI,aACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,uLAA0E,WAAA,CAAY;IAClG,OAAA,CAA0B,sJAAU,CAAA,GAAY,eAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAA4D;QACvF,IAAI,OAAO,UAAU,UAAU;YAC9B,MAAM,CAAC,GAAG,CAAC,CAAA,GAAI,MAAM,KAAA,CAAM,GAAG,CAAA,CAAE,EAAE,KAAA,CAAM,GAAG;YAC3C,OAAO;gBAAC,OAAO,UAAA,CAAW,CAAE;gBAAG,OAAO,UAAA,CAAW,CAAE,CAAC;aAAA;QACrD;QACA,OAAO;YAAC,MAAM,CAAA;YAAG,MAAM,CAAC;SAAA;IACzB;IAES,iBAAiB,KAAA,EAAiC;QAC1D,OAAO,CAAA,CAAA,EAAI,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA,EAAI,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA,CAAA;IAChC;AACD;AAWO,MAAM,+LACJ,kBAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,uBAAA;IAEhD,YAAY,IAAA,CAAc;QACzB,KAAA,CAAM,MAAM,QAAQ,eAAe;IACpC;IAAA,cAAA,GAGS,MACR,KAAA,EACiD;QACjD,OAAO,IAAI,cACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,wLAA2E,WAAA,CAAY;IACnG,OAAA,0IAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAoE;QAC/F,IAAI,OAAO,UAAU,UAAU;YAC9B,MAAM,CAAC,GAAG,CAAC,CAAA,GAAI,MAAM,KAAA,CAAM,GAAG,CAAA,CAAE,EAAE,KAAA,CAAM,GAAG;YAC3C,OAAO;gBAAE,GAAG,OAAO,UAAA,CAAW,CAAE;gBAAG,GAAG,OAAO,UAAA,CAAW,CAAE;YAAE;QAC7D;QACA,OAAO;IACR;IAES,iBAAiB,KAAA,EAAyC;QAClE,OAAO,CAAA,CAAA,EAAI,MAAM,CAAC,CAAA,CAAA,EAAI,MAAM,CAAC,CAAA,CAAA,CAAA;IAC9B;AACD;AAgBO,SAAS,MAAM,CAAA,EAA4B,CAAA,EAAmB;IACpE,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,+IAAI,yBAAA,EAAsC,GAAG,CAAC;IACnE,IAAI,CAAC,QAAQ,QAAQ,OAAO,IAAA,KAAS,SAAS;QAC7C,OAAO,IAAI,oBAAoB,IAAI;IACpC;IACA,OAAO,IAAI,qBAAqB,IAAI;AACrC","debugId":null}},
    {"offset": {"line": 4922, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/postgis_extension/utils.ts"],"sourcesContent":["function hexToBytes(hex: string): Uint8Array {\n\tconst bytes: number[] = [];\n\tfor (let c = 0; c < hex.length; c += 2) {\n\t\tbytes.push(Number.parseInt(hex.slice(c, c + 2), 16));\n\t}\n\treturn new Uint8Array(bytes);\n}\n\nfunction bytesToFloat64(bytes: Uint8Array, offset: number): number {\n\tconst buffer = new ArrayBuffer(8);\n\tconst view = new DataView(buffer);\n\tfor (let i = 0; i < 8; i++) {\n\t\tview.setUint8(i, bytes[offset + i]!);\n\t}\n\treturn view.getFloat64(0, true);\n}\n\nexport function parseEWKB(hex: string): [number, number] {\n\tconst bytes = hexToBytes(hex);\n\n\tlet offset = 0;\n\n\t// Byte order: 1 is little-endian, 0 is big-endian\n\tconst byteOrder = bytes[offset];\n\toffset += 1;\n\n\tconst view = new DataView(bytes.buffer);\n\tconst geomType = view.getUint32(offset, byteOrder === 1);\n\toffset += 4;\n\n\tlet _srid: number | undefined;\n\tif (geomType & 0x20000000) { // SRID flag\n\t\t_srid = view.getUint32(offset, byteOrder === 1);\n\t\toffset += 4;\n\t}\n\n\tif ((geomType & 0xFFFF) === 1) {\n\t\tconst x = bytesToFloat64(bytes, offset);\n\t\toffset += 8;\n\t\tconst y = bytesToFloat64(bytes, offset);\n\t\toffset += 8;\n\n\t\treturn [x, y];\n\t}\n\n\tthrow new Error('Unsupported geometry type');\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,WAAW,GAAA,EAAyB;IAC5C,MAAM,QAAkB,CAAC,CAAA;IACzB,IAAA,IAAS,IAAI,GAAG,IAAI,IAAI,MAAA,EAAQ,KAAK,EAAG;QACvC,MAAM,IAAA,CAAK,OAAO,QAAA,CAAS,IAAI,KAAA,CAAM,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACpD;IACA,OAAO,IAAI,WAAW,KAAK;AAC5B;AAEA,SAAS,eAAe,KAAA,EAAmB,MAAA,EAAwB;IAClE,MAAM,SAAS,IAAI,YAAY,CAAC;IAChC,MAAM,OAAO,IAAI,SAAS,MAAM;IAChC,IAAA,IAAS,IAAI,GAAG,IAAI,GAAG,IAAK;QAC3B,KAAK,QAAA,CAAS,GAAG,KAAA,CAAM,SAAS,CAAC,CAAE;IACpC;IACA,OAAO,KAAK,UAAA,CAAW,GAAG,IAAI;AAC/B;AAEO,SAAS,UAAU,GAAA,EAA+B;IACxD,MAAM,QAAQ,WAAW,GAAG;IAE5B,IAAI,SAAS;IAGb,MAAM,YAAY,KAAA,CAAM,MAAM,CAAA;IAC9B,UAAU;IAEV,MAAM,OAAO,IAAI,SAAS,MAAM,MAAM;IACtC,MAAM,WAAW,KAAK,SAAA,CAAU,QAAQ,cAAc,CAAC;IACvD,UAAU;IAEV,IAAI;IACJ,IAAI,WAAW,WAAY;QAC1B,QAAQ,KAAK,SAAA,CAAU,QAAQ,cAAc,CAAC;QAC9C,UAAU;IACX;IAEA,IAAA,CAAK,WAAW,KAAA,MAAY,GAAG;QAC9B,MAAM,IAAI,eAAe,OAAO,MAAM;QACtC,UAAU;QACV,MAAM,IAAI,eAAe,OAAO,MAAM;QACtC,UAAU;QAEV,OAAO;YAAC;YAAG,CAAC;SAAA;IACb;IAEA,MAAM,IAAI,MAAM,2BAA2B;AAC5C","debugId":null}},
    {"offset": {"line": 4971, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/postgis_extension/geometry.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\n\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from '../common.ts';\nimport { parseEWKB } from './utils.ts';\n\nexport type PgGeometryBuilderInitial<TName extends string> = PgGeometryBuilder<{\n\tname: TName;\n\tdataType: 'array';\n\tcolumnType: 'PgGeometry';\n\tdata: [number, number];\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgGeometryBuilder<T extends ColumnBuilderBaseConfig<'array', 'PgGeometry'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgGeometryBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'array', 'PgGeometry');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgGeometry<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgGeometry<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgGeometry<T extends ColumnBaseConfig<'array', 'PgGeometry'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgGeometry';\n\n\tgetSQLType(): string {\n\t\treturn 'geometry(point)';\n\t}\n\n\toverride mapFromDriverValue(value: string): [number, number] {\n\t\treturn parseEWKB(value);\n\t}\n\n\toverride mapToDriverValue(value: [number, number]): string {\n\t\treturn `point(${value[0]} ${value[1]})`;\n\t}\n}\n\nexport type PgGeometryObjectBuilderInitial<TName extends string> = PgGeometryObjectBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'PgGeometryObject';\n\tdata: { x: number; y: number };\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgGeometryObjectBuilder<T extends ColumnBuilderBaseConfig<'json', 'PgGeometryObject'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgGeometryObjectBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'PgGeometryObject');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgGeometryObject<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgGeometryObject<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgGeometryObject<T extends ColumnBaseConfig<'json', 'PgGeometryObject'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgGeometryObject';\n\n\tgetSQLType(): string {\n\t\treturn 'geometry(point)';\n\t}\n\n\toverride mapFromDriverValue(value: string): { x: number; y: number } {\n\t\tconst parsed = parseEWKB(value);\n\t\treturn { x: parsed[0], y: parsed[1] };\n\t}\n\n\toverride mapToDriverValue(value: { x: number; y: number }): string {\n\t\treturn `point(${value.x} ${value.y})`;\n\t}\n}\n\nexport interface PgGeometryConfig<T extends 'tuple' | 'xy' = 'tuple' | 'xy'> {\n\tmode?: T;\n\ttype?: 'point' | (string & {});\n\tsrid?: number;\n}\n\nexport function geometry(): PgGeometryBuilderInitial<''>;\nexport function geometry<TMode extends PgGeometryConfig['mode'] & {}>(\n\tconfig?: PgGeometryConfig<TMode>,\n): Equal<TMode, 'xy'> extends true ? PgGeometryObjectBuilderInitial<''> : PgGeometryBuilderInitial<''>;\nexport function geometry<TName extends string, TMode extends PgGeometryConfig['mode'] & {}>(\n\tname: TName,\n\tconfig?: PgGeometryConfig<TMode>,\n): Equal<TMode, 'xy'> extends true ? PgGeometryObjectBuilderInitial<TName> : PgGeometryBuilderInitial<TName>;\nexport function geometry(a?: string | PgGeometryConfig, b?: PgGeometryConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgGeometryConfig>(a, b);\n\tif (!config?.mode || config.mode === 'tuple') {\n\t\treturn new PgGeometryBuilder(name);\n\t}\n\treturn new PgGeometryObjectBuilder(name);\n}\n"],"names":[],"mappings":";;;;;;;AAEA,SAAS,kBAAkB;AAG3B,SAAqB,8BAA8B;AACnD,SAAS,UAAU,uBAAuB;AAC1C,SAAS,iBAAiB;;;;;AAWnB,MAAM,4LAAoF,kBAAA,CAAmB;IACnH,OAAA,0IAA0B,aAAU,CAAA,GAAY,oBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,SAAS,YAAY;IAClC;IAAA,cAAA,GAGS,MACR,KAAA,EAC8C;QAC9C,OAAO,IAAI,WACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,qLAAsE,WAAA,CAAY;IAC9F,OAAA,0IAA0B,aAAU,CAAA,GAAY,aAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAiC;QAC5D,iMAAO,YAAA,EAAU,KAAK;IACvB;IAES,iBAAiB,KAAA,EAAiC;QAC1D,OAAO,CAAA,MAAA,EAAS,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA,EAAI,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA,CAAA;IACrC;AACD;AAWO,MAAM,kMACJ,kBAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,0BAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,QAAQ,kBAAkB;IACvC;IAAA,cAAA,GAGS,MACR,KAAA,EACoD;QACpD,OAAO,IAAI,iBACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,2LAAiF,WAAA,CAAY;IACzG,OAAA,0IAA0B,aAAU,CAAA,GAAY,mBAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,mBAAmB,KAAA,EAAyC;QACpE,MAAM,mMAAS,YAAA,EAAU,KAAK;QAC9B,OAAO;YAAE,GAAG,MAAA,CAAO,CAAC,CAAA;YAAG,GAAG,MAAA,CAAO,CAAC,CAAA;QAAE;IACrC;IAES,iBAAiB,KAAA,EAAyC;QAClE,OAAO,CAAA,MAAA,EAAS,MAAM,CAAC,CAAA,CAAA,EAAI,MAAM,CAAC,CAAA,CAAA,CAAA;IACnC;AACD;AAgBO,SAAS,SAAS,CAAA,EAA+B,CAAA,EAAsB;IAC7E,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,+IAAI,yBAAA,EAAyC,GAAG,CAAC;IACtE,IAAI,CAAC,QAAQ,QAAQ,OAAO,IAAA,KAAS,SAAS;QAC7C,OAAO,IAAI,kBAAkB,IAAI;IAClC;IACA,OAAO,IAAI,wBAAwB,IAAI;AACxC","debugId":null}},
    {"offset": {"line": 5045, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/real.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgRealBuilderInitial<TName extends string> = PgRealBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'PgReal';\n\tdata: number;\n\tdriverParam: string | number;\n\tenumValues: undefined;\n}>;\n\nexport class PgRealBuilder<T extends ColumnBuilderBaseConfig<'number', 'PgReal'>> extends PgColumnBuilder<\n\tT,\n\t{ length: number | undefined }\n> {\n\tstatic override readonly [entityKind]: string = 'PgRealBuilder';\n\n\tconstructor(name: T['name'], length?: number) {\n\t\tsuper(name, 'number', 'PgReal');\n\t\tthis.config.length = length;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgReal<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgReal<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgReal<T extends ColumnBaseConfig<'number', 'PgReal'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgReal';\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgRealBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t}\n\n\tgetSQLType(): string {\n\t\treturn 'real';\n\t}\n\n\toverride mapFromDriverValue = (value: string | number): number => {\n\t\tif (typeof value === 'string') {\n\t\t\treturn Number.parseFloat(value);\n\t\t}\n\t\treturn value;\n\t};\n}\n\nexport function real(): PgRealBuilderInitial<''>;\nexport function real<TName extends string>(name: TName): PgRealBuilderInitial<TName>;\nexport function real(name?: string) {\n\treturn new PgRealBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAWnC,MAAM,wLAA6E,kBAAA,CAGxF;IACD,OAAA,0IAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,YAAY,IAAA,EAAiB,MAAA,CAAiB;QAC7C,KAAA,CAAM,MAAM,UAAU,QAAQ;QAC9B,IAAA,CAAK,MAAA,CAAO,MAAA,GAAS;IACtB;IAAA,cAAA,GAGS,MACR,KAAA,EAC0C;QAC1C,OAAO,IAAI,OAAwC,OAAO,IAAA,CAAK,MAA8C;IAC9G;AACD;AAEO,MAAM,iLAA+D,WAAA,CAAY;IACvF,OAAA,0IAA0B,aAAU,CAAA,GAAY,SAAA;IAEhD,YAAY,KAAA,EAA6C,MAAA,CAAoC;QAC5F,KAAA,CAAM,OAAO,MAAM;IACpB;IAEA,aAAqB;QACpB,OAAO;IACR;IAES,qBAAqB,CAAC,UAAmC;QACjE,IAAI,OAAO,UAAU,UAAU;YAC9B,OAAO,OAAO,UAAA,CAAW,KAAK;QAC/B;QACA,OAAO;IACR,EAAA;AACD;AAIO,SAAS,KAAK,IAAA,EAAe;IACnC,OAAO,IAAI,cAAc,QAAQ,EAAE;AACpC","debugId":null}},
    {"offset": {"line": 5088, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/serial.ts"],"sourcesContent":["import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tHasDefault,\n\tMakeColumnConfig,\n\tNotNull,\n} from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgSerialBuilderInitial<TName extends string> = NotNull<\n\tHasDefault<\n\t\tPgSerialBuilder<{\n\t\t\tname: TName;\n\t\t\tdataType: 'number';\n\t\t\tcolumnType: 'PgSerial';\n\t\t\tdata: number;\n\t\t\tdriverParam: number;\n\t\t\tenumValues: undefined;\n\t\t}>\n\t>\n>;\n\nexport class PgSerialBuilder<T extends ColumnBuilderBaseConfig<'number', 'PgSerial'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgSerialBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'PgSerial');\n\t\tthis.config.hasDefault = true;\n\t\tthis.config.notNull = true;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgSerial<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgSerial<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgSerial<T extends ColumnBaseConfig<'number', 'PgSerial'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgSerial';\n\n\tgetSQLType(): string {\n\t\treturn 'serial';\n\t}\n}\n\nexport function serial(): PgSerialBuilderInitial<''>;\nexport function serial<TName extends string>(name: TName): PgSerialBuilderInitial<TName>;\nexport function serial(name?: string) {\n\treturn new PgSerialBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAQA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAenC,MAAM,0LAAiF,kBAAA,CAAmB;IAChH,OAAA,0IAA0B,aAAU,CAAA,GAAY,kBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,UAAU;QAChC,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,IAAA,CAAK,MAAA,CAAO,OAAA,GAAU;IACvB;IAAA,cAAA,GAGS,MACR,KAAA,EAC4C;QAC5C,OAAO,IAAI,SAA0C,OAAO,IAAA,CAAK,MAA8C;IAChH;AACD;AAEO,MAAM,mLAAmE,WAAA,CAAY;IAC3F,OAAA,0IAA0B,aAAU,CAAA,GAAY,WAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAIO,SAAS,OAAO,IAAA,EAAe;IACrC,OAAO,IAAI,gBAAgB,QAAQ,EAAE;AACtC","debugId":null}},
    {"offset": {"line": 5123, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/smallint.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn } from './common.ts';\nimport { PgIntColumnBaseBuilder } from './int.common.ts';\n\nexport type PgSmallIntBuilderInitial<TName extends string> = PgSmallIntBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'PgSmallInt';\n\tdata: number;\n\tdriverParam: number | string;\n\tenumValues: undefined;\n}>;\n\nexport class PgSmallIntBuilder<T extends ColumnBuilderBaseConfig<'number', 'PgSmallInt'>>\n\textends PgIntColumnBaseBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgSmallIntBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'PgSmallInt');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgSmallInt<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgSmallInt<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgSmallInt<T extends ColumnBaseConfig<'number', 'PgSmallInt'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgSmallInt';\n\n\tgetSQLType(): string {\n\t\treturn 'smallint';\n\t}\n\n\toverride mapFromDriverValue = (value: number | string): number => {\n\t\tif (typeof value === 'string') {\n\t\t\treturn Number(value);\n\t\t}\n\t\treturn value;\n\t};\n}\n\nexport function smallint(): PgSmallIntBuilderInitial<''>;\nexport function smallint<TName extends string>(name: TName): PgSmallIntBuilderInitial<TName>;\nexport function smallint(name?: string) {\n\treturn new PgSmallIntBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,gBAAgB;AACzB,SAAS,8BAA8B;;;;AAWhC,MAAM,mMACJ,yBAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,oBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,YAAY;IACnC;IAAA,cAAA,GAGS,MACR,KAAA,EAC8C;QAC9C,OAAO,IAAI,WAA4C,OAAO,IAAA,CAAK,MAA8C;IAClH;AACD;AAEO,MAAM,qLAAuE,WAAA,CAAY;IAC/F,OAAA,0IAA0B,aAAU,CAAA,GAAY,aAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;IAES,qBAAqB,CAAC,UAAmC;QACjE,IAAI,OAAO,UAAU,UAAU;YAC9B,OAAO,OAAO,KAAK;QACpB;QACA,OAAO;IACR,EAAA;AACD;AAIO,SAAS,SAAS,IAAA,EAAe;IACvC,OAAO,IAAI,kBAAkB,QAAQ,EAAE;AACxC","debugId":null}},
    {"offset": {"line": 5164, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/smallserial.ts"],"sourcesContent":["import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tHasDefault,\n\tMakeColumnConfig,\n\tNotNull,\n} from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgSmallSerialBuilderInitial<TName extends string> = NotNull<\n\tHasDefault<\n\t\tPgSmallSerialBuilder<{\n\t\t\tname: TName;\n\t\t\tdataType: 'number';\n\t\t\tcolumnType: 'PgSmallSerial';\n\t\t\tdata: number;\n\t\t\tdriverParam: number;\n\t\t\tenumValues: undefined;\n\t\t}>\n\t>\n>;\n\nexport class PgSmallSerialBuilder<T extends ColumnBuilderBaseConfig<'number', 'PgSmallSerial'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'PgSmallSerialBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'PgSmallSerial');\n\t\tthis.config.hasDefault = true;\n\t\tthis.config.notNull = true;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgSmallSerial<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgSmallSerial<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgSmallSerial<T extends ColumnBaseConfig<'number', 'PgSmallSerial'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgSmallSerial';\n\n\tgetSQLType(): string {\n\t\treturn 'smallserial';\n\t}\n}\n\nexport function smallserial(): PgSmallSerialBuilderInitial<''>;\nexport function smallserial<TName extends string>(name: TName): PgSmallSerialBuilderInitial<TName>;\nexport function smallserial(name?: string) {\n\treturn new PgSmallSerialBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAQA,SAAS,kBAAkB;AAE3B,SAAS,UAAU,uBAAuB;;;AAenC,MAAM,+LACJ,kBAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,uBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,eAAe;QACrC,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,IAAA,CAAK,MAAA,CAAO,OAAA,GAAU;IACvB;IAAA,cAAA,GAGS,MACR,KAAA,EACiD;QACjD,OAAO,IAAI,cACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,wLAA6E,WAAA,CAAY;IACrG,OAAA,0IAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAIO,SAAS,YAAY,IAAA,EAAe;IAC1C,OAAO,IAAI,qBAAqB,QAAQ,EAAE;AAC3C","debugId":null}},
    {"offset": {"line": 5199, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/text.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { getColumnNameAndConfig, type Writable } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgTextBuilderInitial<TName extends string, TEnum extends [string, ...string[]]> = PgTextBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgText';\n\tdata: TEnum[number];\n\tenumValues: TEnum;\n\tdriverParam: string;\n}>;\n\nexport class PgTextBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'PgText'>,\n> extends PgColumnBuilder<T, { enumValues: T['enumValues'] }> {\n\tstatic override readonly [entityKind]: string = 'PgTextBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\tconfig: PgTextConfig<T['enumValues']>,\n\t) {\n\t\tsuper(name, 'string', 'PgText');\n\t\tthis.config.enumValues = config.enum;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgText<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgText<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgText<T extends ColumnBaseConfig<'string', 'PgText'>>\n\textends PgColumn<T, { enumValues: T['enumValues'] }>\n{\n\tstatic override readonly [entityKind]: string = 'PgText';\n\n\toverride readonly enumValues = this.config.enumValues;\n\n\tgetSQLType(): string {\n\t\treturn 'text';\n\t}\n}\n\nexport interface PgTextConfig<\n\tTEnum extends readonly string[] | string[] | undefined = readonly string[] | string[] | undefined,\n> {\n\tenum?: TEnum;\n}\n\nexport function text(): PgTextBuilderInitial<'', [string, ...string[]]>;\nexport function text<U extends string, T extends Readonly<[U, ...U[]]>>(\n\tconfig?: PgTextConfig<T | Writable<T>>,\n): PgTextBuilderInitial<'', Writable<T>>;\nexport function text<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(\n\tname: TName,\n\tconfig?: PgTextConfig<T | Writable<T>>,\n): PgTextBuilderInitial<TName, Writable<T>>;\nexport function text(a?: string | PgTextConfig, b: PgTextConfig = {}): any {\n\tconst { name, config } = getColumnNameAndConfig<PgTextConfig>(a, b);\n\treturn new PgTextBuilder(name, config as any);\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,8BAA6C;AACtD,SAAS,UAAU,uBAAuB;;;;AAWnC,MAAM,wLAEH,kBAAA,CAAoD;IAC7D,OAAA,0IAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,YACC,IAAA,EACA,MAAA,CACC;QACD,KAAA,CAAM,MAAM,UAAU,QAAQ;QAC9B,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa,OAAO,IAAA;IACjC;IAAA,cAAA,GAGS,MACR,KAAA,EAC0C;QAC1C,OAAO,IAAI,OAAwC,OAAO,IAAA,CAAK,MAA8C;IAC9G;AACD;AAEO,MAAM,iLACJ,WAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,SAAA;IAE9B,aAAa,IAAA,CAAK,MAAA,CAAO,UAAA,CAAA;IAE3C,aAAqB;QACpB,OAAO;IACR;AACD;AAgBO,SAAS,KAAK,CAAA,EAA2B,IAAkB,CAAC,CAAA,EAAQ;IAC1E,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,+IAAI,yBAAA,EAAqC,GAAG,CAAC;IAClE,OAAO,IAAI,cAAc,MAAM,MAAa;AAC7C","debugId":null}},
    {"offset": {"line": 5237, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/time.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn } from './common.ts';\nimport { PgDateColumnBaseBuilder } from './date.common.ts';\nimport type { Precision } from './timestamp.ts';\n\nexport type PgTimeBuilderInitial<TName extends string> = PgTimeBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgTime';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgTimeBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgTime'>> extends PgDateColumnBaseBuilder<\n\tT,\n\t{ withTimezone: boolean; precision: number | undefined }\n> {\n\tstatic override readonly [entityKind]: string = 'PgTimeBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\treadonly withTimezone: boolean,\n\t\treadonly precision: number | undefined,\n\t) {\n\t\tsuper(name, 'string', 'PgTime');\n\t\tthis.config.withTimezone = withTimezone;\n\t\tthis.config.precision = precision;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgTime<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgTime<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgTime<T extends ColumnBaseConfig<'string', 'PgTime'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgTime';\n\n\treadonly withTimezone: boolean;\n\treadonly precision: number | undefined;\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgTimeBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t\tthis.withTimezone = config.withTimezone;\n\t\tthis.precision = config.precision;\n\t}\n\n\tgetSQLType(): string {\n\t\tconst precision = this.precision === undefined ? '' : `(${this.precision})`;\n\t\treturn `time${precision}${this.withTimezone ? ' with time zone' : ''}`;\n\t}\n}\n\nexport interface TimeConfig {\n\tprecision?: Precision;\n\twithTimezone?: boolean;\n}\n\nexport function time(): PgTimeBuilderInitial<''>;\nexport function time(config?: TimeConfig): PgTimeBuilderInitial<''>;\nexport function time<TName extends string>(name: TName, config?: TimeConfig): PgTimeBuilderInitial<TName>;\nexport function time(a?: string | TimeConfig, b: TimeConfig = {}) {\n\tconst { name, config } = getColumnNameAndConfig<TimeConfig>(a, b);\n\treturn new PgTimeBuilder(name, config.withTimezone ?? false, config.precision);\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,8BAA8B;AACvC,SAAS,gBAAgB;AACzB,SAAS,+BAA+B;;;;;AAYjC,MAAM,gMAA6E,0BAAA,CAGxF;IAGD,YACC,IAAA,EACS,YAAA,EACA,SAAA,CACR;QACD,KAAA,CAAM,MAAM,UAAU,QAAQ;QAHrB,IAAA,CAAA,YAAA,GAAA;QACA,IAAA,CAAA,SAAA,GAAA;QAGT,IAAA,CAAK,MAAA,CAAO,YAAA,GAAe;QAC3B,IAAA,CAAK,MAAA,CAAO,SAAA,GAAY;IACzB;IAVA,OAAA,0IAA0B,aAAU,CAAA,GAAY,gBAAA;IAAA,cAAA,GAavC,MACR,KAAA,EAC0C;QAC1C,OAAO,IAAI,OAAwC,OAAO,IAAA,CAAK,MAA8C;IAC9G;AACD;AAEO,MAAM,gLAA+D,YAAA,CAAY;IACvF,OAAA,0IAA0B,aAAU,CAAA,GAAY,SAAA;IAEvC,aAAA;IACA,UAAA;IAET,YAAY,KAAA,EAA6C,MAAA,CAAoC;QAC5F,KAAA,CAAM,OAAO,MAAM;QACnB,IAAA,CAAK,YAAA,GAAe,OAAO,YAAA;QAC3B,IAAA,CAAK,SAAA,GAAY,OAAO,SAAA;IACzB;IAEA,aAAqB;QACpB,MAAM,YAAY,IAAA,CAAK,SAAA,KAAc,KAAA,IAAY,KAAK,CAAA,CAAA,EAAI,IAAA,CAAK,SAAS,CAAA,CAAA,CAAA;QACxE,OAAO,CAAA,IAAA,EAAO,SAAS,GAAG,IAAA,CAAK,YAAA,GAAe,oBAAoB,EAAE,EAAA;IACrE;AACD;AAUO,SAAS,KAAK,CAAA,EAAyB,IAAgB,CAAC,CAAA,EAAG;IACjE,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,+IAAI,yBAAA,EAAmC,GAAG,CAAC;IAChE,OAAO,IAAI,cAAc,MAAM,OAAO,YAAA,IAAgB,OAAO,OAAO,SAAS;AAC9E","debugId":null}},
    {"offset": {"line": 5287, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/timestamp.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn } from './common.ts';\nimport { PgDateColumnBaseBuilder } from './date.common.ts';\n\nexport type PgTimestampBuilderInitial<TName extends string> = PgTimestampBuilder<{\n\tname: TName;\n\tdataType: 'date';\n\tcolumnType: 'PgTimestamp';\n\tdata: Date;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgTimestampBuilder<T extends ColumnBuilderBaseConfig<'date', 'PgTimestamp'>>\n\textends PgDateColumnBaseBuilder<\n\t\tT,\n\t\t{ withTimezone: boolean; precision: number | undefined }\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'PgTimestampBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\twithTimezone: boolean,\n\t\tprecision: number | undefined,\n\t) {\n\t\tsuper(name, 'date', 'PgTimestamp');\n\t\tthis.config.withTimezone = withTimezone;\n\t\tthis.config.precision = precision;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgTimestamp<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgTimestamp<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgTimestamp<T extends ColumnBaseConfig<'date', 'PgTimestamp'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgTimestamp';\n\n\treadonly withTimezone: boolean;\n\treadonly precision: number | undefined;\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgTimestampBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t\tthis.withTimezone = config.withTimezone;\n\t\tthis.precision = config.precision;\n\t}\n\n\tgetSQLType(): string {\n\t\tconst precision = this.precision === undefined ? '' : ` (${this.precision})`;\n\t\treturn `timestamp${precision}${this.withTimezone ? ' with time zone' : ''}`;\n\t}\n\n\toverride mapFromDriverValue = (value: string): Date | null => {\n\t\treturn new Date(this.withTimezone ? value : value + '+0000');\n\t};\n\n\toverride mapToDriverValue = (value: Date): string => {\n\t\treturn value.toISOString();\n\t};\n}\n\nexport type PgTimestampStringBuilderInitial<TName extends string> = PgTimestampStringBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgTimestampString';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgTimestampStringBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgTimestampString'>>\n\textends PgDateColumnBaseBuilder<\n\t\tT,\n\t\t{ withTimezone: boolean; precision: number | undefined }\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'PgTimestampStringBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\twithTimezone: boolean,\n\t\tprecision: number | undefined,\n\t) {\n\t\tsuper(name, 'string', 'PgTimestampString');\n\t\tthis.config.withTimezone = withTimezone;\n\t\tthis.config.precision = precision;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgTimestampString<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgTimestampString<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgTimestampString<T extends ColumnBaseConfig<'string', 'PgTimestampString'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgTimestampString';\n\n\treadonly withTimezone: boolean;\n\treadonly precision: number | undefined;\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgTimestampStringBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t\tthis.withTimezone = config.withTimezone;\n\t\tthis.precision = config.precision;\n\t}\n\n\tgetSQLType(): string {\n\t\tconst precision = this.precision === undefined ? '' : `(${this.precision})`;\n\t\treturn `timestamp${precision}${this.withTimezone ? ' with time zone' : ''}`;\n\t}\n}\n\nexport type Precision = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\nexport interface PgTimestampConfig<TMode extends 'date' | 'string' = 'date' | 'string'> {\n\tmode?: TMode;\n\tprecision?: Precision;\n\twithTimezone?: boolean;\n}\n\nexport function timestamp(): PgTimestampBuilderInitial<''>;\nexport function timestamp<TMode extends PgTimestampConfig['mode'] & {}>(\n\tconfig?: PgTimestampConfig<TMode>,\n): Equal<TMode, 'string'> extends true ? PgTimestampStringBuilderInitial<''> : PgTimestampBuilderInitial<''>;\nexport function timestamp<TName extends string, TMode extends PgTimestampConfig['mode'] & {}>(\n\tname: TName,\n\tconfig?: PgTimestampConfig<TMode>,\n): Equal<TMode, 'string'> extends true ? PgTimestampStringBuilderInitial<TName> : PgTimestampBuilderInitial<TName>;\nexport function timestamp(a?: string | PgTimestampConfig, b: PgTimestampConfig = {}) {\n\tconst { name, config } = getColumnNameAndConfig<PgTimestampConfig | undefined>(a, b);\n\tif (config?.mode === 'string') {\n\t\treturn new PgTimestampStringBuilder(name, config.withTimezone ?? false, config.precision);\n\t}\n\treturn new PgTimestampBuilder(name, config?.withTimezone ?? false, config?.precision);\n}\n"],"names":[],"mappings":";;;;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAqB,8BAA8B;AACnD,SAAS,gBAAgB;AACzB,SAAS,+BAA+B;;;;;AAWjC,MAAM,qMACJ,0BAAA,CAIT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,qBAAA;IAEhD,YACC,IAAA,EACA,YAAA,EACA,SAAA,CACC;QACD,KAAA,CAAM,MAAM,QAAQ,aAAa;QACjC,IAAA,CAAK,MAAA,CAAO,YAAA,GAAe;QAC3B,IAAA,CAAK,MAAA,CAAO,SAAA,GAAY;IACzB;IAAA,cAAA,GAGS,MACR,KAAA,EAC+C;QAC/C,OAAO,IAAI,YAA6C,OAAO,IAAA,CAAK,MAA8C;IACnH;AACD;AAEO,MAAM,sLAAuE,WAAA,CAAY;IAC/F,OAAA,0IAA0B,aAAU,CAAA,GAAY,cAAA;IAEvC,aAAA;IACA,UAAA;IAET,YAAY,KAAA,EAA6C,MAAA,CAAyC;QACjG,KAAA,CAAM,OAAO,MAAM;QACnB,IAAA,CAAK,YAAA,GAAe,OAAO,YAAA;QAC3B,IAAA,CAAK,SAAA,GAAY,OAAO,SAAA;IACzB;IAEA,aAAqB;QACpB,MAAM,YAAY,IAAA,CAAK,SAAA,KAAc,KAAA,IAAY,KAAK,CAAA,EAAA,EAAK,IAAA,CAAK,SAAS,CAAA,CAAA,CAAA;QACzE,OAAO,CAAA,SAAA,EAAY,SAAS,GAAG,IAAA,CAAK,YAAA,GAAe,oBAAoB,EAAE,EAAA;IAC1E;IAES,qBAAqB,CAAC,UAA+B;QAC7D,OAAO,IAAI,KAAK,IAAA,CAAK,YAAA,GAAe,QAAQ,QAAQ,OAAO;IAC5D,EAAA;IAES,mBAAmB,CAAC,UAAwB;QACpD,OAAO,MAAM,WAAA,CAAY;IAC1B,EAAA;AACD;AAWO,MAAM,2MACJ,0BAAA,CAIT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,2BAAA;IAEhD,YACC,IAAA,EACA,YAAA,EACA,SAAA,CACC;QACD,KAAA,CAAM,MAAM,UAAU,mBAAmB;QACzC,IAAA,CAAK,MAAA,CAAO,YAAA,GAAe;QAC3B,IAAA,CAAK,MAAA,CAAO,SAAA,GAAY;IACzB;IAAA,cAAA,GAGS,MACR,KAAA,EACqD;QACrD,OAAO,IAAI,kBACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,4LAAqF,WAAA,CAAY;IAC7G,OAAA,0IAA0B,aAAU,CAAA,GAAY,oBAAA;IAEvC,aAAA;IACA,UAAA;IAET,YAAY,KAAA,EAA6C,MAAA,CAA+C;QACvG,KAAA,CAAM,OAAO,MAAM;QACnB,IAAA,CAAK,YAAA,GAAe,OAAO,YAAA;QAC3B,IAAA,CAAK,SAAA,GAAY,OAAO,SAAA;IACzB;IAEA,aAAqB;QACpB,MAAM,YAAY,IAAA,CAAK,SAAA,KAAc,KAAA,IAAY,KAAK,CAAA,CAAA,EAAI,IAAA,CAAK,SAAS,CAAA,CAAA,CAAA;QACxE,OAAO,CAAA,SAAA,EAAY,SAAS,GAAG,IAAA,CAAK,YAAA,GAAe,oBAAoB,EAAE,EAAA;IAC1E;AACD;AAkBO,SAAS,UAAU,CAAA,EAAgC,IAAuB,CAAC,CAAA,EAAG;IACpF,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,IAAI,oKAAA,EAAsD,GAAG,CAAC;IACnF,IAAI,QAAQ,SAAS,UAAU;QAC9B,OAAO,IAAI,yBAAyB,MAAM,OAAO,YAAA,IAAgB,OAAO,OAAO,SAAS;IACzF;IACA,OAAO,IAAI,mBAAmB,MAAM,QAAQ,gBAAgB,OAAO,QAAQ,SAAS;AACrF","debugId":null}},
    {"offset": {"line": 5371, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/uuid.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { sql } from '~/sql/sql.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgUUIDBuilderInitial<TName extends string> = PgUUIDBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgUUID';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgUUIDBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgUUID'>> extends PgColumnBuilder<T> {\n\tstatic override readonly [entityKind]: string = 'PgUUIDBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'PgUUID');\n\t}\n\n\t/**\n\t * Adds `default gen_random_uuid()` to the column definition.\n\t */\n\tdefaultRandom(): ReturnType<this['default']> {\n\t\treturn this.default(sql`gen_random_uuid()`) as ReturnType<this['default']>;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgUUID<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgUUID<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgUUID<T extends ColumnBaseConfig<'string', 'PgUUID'>> extends PgColumn<T> {\n\tstatic override readonly [entityKind]: string = 'PgUUID';\n\n\tgetSQLType(): string {\n\t\treturn 'uuid';\n\t}\n}\n\nexport function uuid(): PgUUIDBuilderInitial<''>;\nexport function uuid<TName extends string>(name: TName): PgUUIDBuilderInitial<TName>;\nexport function uuid(name?: string) {\n\treturn new PgUUIDBuilder(name ?? '');\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,WAAW;AACpB,SAAS,UAAU,uBAAuB;;;;AAWnC,MAAM,wLAA6E,kBAAA,CAAmB;IAC5G,OAAA,0IAA0B,aAAU,CAAA,GAAY,gBAAA;IAEhD,YAAY,IAAA,CAAiB;QAC5B,KAAA,CAAM,MAAM,UAAU,QAAQ;IAC/B;IAAA;;GAAA,GAKA,gBAA6C;QAC5C,OAAO,IAAA,CAAK,OAAA,8IAAQ,MAAA,CAAA,iBAAA,CAAsB;IAC3C;IAAA,cAAA,GAGS,MACR,KAAA,EAC0C;QAC1C,OAAO,IAAI,OAAwC,OAAO,IAAA,CAAK,MAA8C;IAC9G;AACD;AAEO,MAAM,iLAA+D,WAAA,CAAY;IACvF,OAAA,0IAA0B,aAAU,CAAA,GAAY,SAAA;IAEhD,aAAqB;QACpB,OAAO;IACR;AACD;AAIO,SAAS,KAAK,IAAA,EAAe;IACnC,OAAO,IAAI,cAAc,QAAQ,EAAE;AACpC","debugId":null}},
    {"offset": {"line": 5411, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/varchar.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { getColumnNameAndConfig, type Writable } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgVarcharBuilderInitial<\n\tTName extends string,\n\tTEnum extends [string, ...string[]],\n\tTLength extends number | undefined,\n> = PgVarcharBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgVarchar';\n\tdata: TEnum[number];\n\tdriverParam: string;\n\tenumValues: TEnum;\n\tlength: TLength;\n}>;\n\nexport class PgVarcharBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'PgVarchar'> & { length?: number | undefined },\n> extends PgColumnBuilder<\n\tT,\n\t{ length: T['length']; enumValues: T['enumValues'] },\n\t{ length: T['length'] }\n> {\n\tstatic override readonly [entityKind]: string = 'PgVarcharBuilder';\n\n\tconstructor(name: T['name'], config: PgVarcharConfig<T['enumValues'], T['length']>) {\n\t\tsuper(name, 'string', 'PgVarchar');\n\t\tthis.config.length = config.length;\n\t\tthis.config.enumValues = config.enum;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgVarchar<MakeColumnConfig<T, TTableName> & { length: T['length'] }> {\n\t\treturn new PgVarchar<MakeColumnConfig<T, TTableName> & { length: T['length'] }>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgVarchar<T extends ColumnBaseConfig<'string', 'PgVarchar'> & { length?: number | undefined }>\n\textends PgColumn<T, { length: T['length']; enumValues: T['enumValues'] }, { length: T['length'] }>\n{\n\tstatic override readonly [entityKind]: string = 'PgVarchar';\n\n\treadonly length = this.config.length;\n\toverride readonly enumValues = this.config.enumValues;\n\n\tgetSQLType(): string {\n\t\treturn this.length === undefined ? `varchar` : `varchar(${this.length})`;\n\t}\n}\n\nexport interface PgVarcharConfig<\n\tTEnum extends readonly string[] | string[] | undefined = readonly string[] | string[] | undefined,\n\tTLength extends number | undefined = number | undefined,\n> {\n\tenum?: TEnum;\n\tlength?: TLength;\n}\n\nexport function varchar(): PgVarcharBuilderInitial<'', [string, ...string[]], undefined>;\nexport function varchar<\n\tU extends string,\n\tT extends Readonly<[U, ...U[]]>,\n\tL extends number | undefined,\n>(\n\tconfig?: PgVarcharConfig<T | Writable<T>, L>,\n): PgVarcharBuilderInitial<'', Writable<T>, L>;\nexport function varchar<\n\tTName extends string,\n\tU extends string,\n\tT extends Readonly<[U, ...U[]]>,\n\tL extends number | undefined,\n>(\n\tname: TName,\n\tconfig?: PgVarcharConfig<T | Writable<T>, L>,\n): PgVarcharBuilderInitial<TName, Writable<T>, L>;\nexport function varchar(a?: string | PgVarcharConfig, b: PgVarcharConfig = {}): any {\n\tconst { name, config } = getColumnNameAndConfig<PgVarcharConfig>(a, b);\n\treturn new PgVarcharBuilder(name, config as any);\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,8BAA6C;AACtD,SAAS,UAAU,uBAAuB;;;;AAgBnC,MAAM,2LAEH,kBAAA,CAIR;IACD,OAAA,0IAA0B,aAAU,CAAA,GAAY,mBAAA;IAEhD,YAAY,IAAA,EAAiB,MAAA,CAAuD;QACnF,KAAA,CAAM,MAAM,UAAU,WAAW;QACjC,IAAA,CAAK,MAAA,CAAO,MAAA,GAAS,OAAO,MAAA;QAC5B,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa,OAAO,IAAA;IACjC;IAAA,cAAA,GAGS,MACR,KAAA,EACuE;QACvE,OAAO,IAAI,UACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,oLACJ,WAAA,CACT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,YAAA;IAEvC,SAAS,IAAA,CAAK,MAAA,CAAO,MAAA,CAAA;IACZ,aAAa,IAAA,CAAK,MAAA,CAAO,UAAA,CAAA;IAE3C,aAAqB;QACpB,OAAO,IAAA,CAAK,MAAA,KAAW,KAAA,IAAY,CAAA,OAAA,CAAA,GAAY,CAAA,QAAA,EAAW,IAAA,CAAK,MAAM,CAAA,CAAA,CAAA;IACtE;AACD;AA2BO,SAAS,QAAQ,CAAA,EAA8B,IAAqB,CAAC,CAAA,EAAQ;IACnF,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,+IAAI,yBAAA,EAAwC,GAAG,CAAC;IACrE,OAAO,IAAI,iBAAiB,MAAM,MAAa;AAChD","debugId":null}},
    {"offset": {"line": 5451, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/vector_extension/bit.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from '../common.ts';\n\nexport type PgBinaryVectorBuilderInitial<TName extends string, TDimensions extends number> = PgBinaryVectorBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgBinaryVector';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tdimensions: TDimensions;\n}>;\n\nexport class PgBinaryVectorBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'PgBinaryVector'> & { dimensions: number },\n> extends PgColumnBuilder<\n\tT,\n\t{ dimensions: T['dimensions'] }\n> {\n\tstatic override readonly [entityKind]: string = 'PgBinaryVectorBuilder';\n\n\tconstructor(name: string, config: PgBinaryVectorConfig<T['dimensions']>) {\n\t\tsuper(name, 'string', 'PgBinaryVector');\n\t\tthis.config.dimensions = config.dimensions;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgBinaryVector<MakeColumnConfig<T, TTableName> & { dimensions: T['dimensions'] }> {\n\t\treturn new PgBinaryVector<MakeColumnConfig<T, TTableName> & { dimensions: T['dimensions'] }>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgBinaryVector<T extends ColumnBaseConfig<'string', 'PgBinaryVector'> & { dimensions: number }>\n\textends PgColumn<T, { dimensions: T['dimensions'] }, { dimensions: T['dimensions'] }>\n{\n\tstatic override readonly [entityKind]: string = 'PgBinaryVector';\n\n\treadonly dimensions = this.config.dimensions;\n\n\tgetSQLType(): string {\n\t\treturn `bit(${this.dimensions})`;\n\t}\n}\n\nexport interface PgBinaryVectorConfig<TDimensions extends number = number> {\n\tdimensions: TDimensions;\n}\n\nexport function bit<D extends number>(\n\tconfig: PgBinaryVectorConfig<D>,\n): PgBinaryVectorBuilderInitial<'', D>;\nexport function bit<TName extends string, D extends number>(\n\tname: TName,\n\tconfig: PgBinaryVectorConfig<D>,\n): PgBinaryVectorBuilderInitial<TName, D>;\nexport function bit(a: string | PgBinaryVectorConfig, b?: PgBinaryVectorConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgBinaryVectorConfig>(a, b);\n\treturn new PgBinaryVectorBuilder(name, config);\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,8BAA8B;AACvC,SAAS,UAAU,uBAAuB;;;;AAYnC,MAAM,gMAEH,kBAAA,CAGR;IACD,OAAA,0IAA0B,aAAU,CAAA,GAAY,wBAAA;IAEhD,YAAY,IAAA,EAAc,MAAA,CAA+C;QACxE,KAAA,CAAM,MAAM,UAAU,gBAAgB;QACtC,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa,OAAO,UAAA;IACjC;IAAA,cAAA,GAGS,MACR,KAAA,EACoF;QACpF,OAAO,IAAI,eACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,yLACJ,WAAA,CACT;IACC,OAAA,CAA0B,sJAAU,CAAA,GAAY,iBAAA;IAEvC,aAAa,IAAA,CAAK,MAAA,CAAO,UAAA,CAAA;IAElC,aAAqB;QACpB,OAAO,CAAA,IAAA,EAAO,IAAA,CAAK,UAAU,CAAA,CAAA,CAAA;IAC9B;AACD;AAaO,SAAS,IAAI,CAAA,EAAkC,CAAA,EAA0B;IAC/E,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,+IAAI,yBAAA,EAA6C,GAAG,CAAC;IAC1E,OAAO,IAAI,sBAAsB,MAAM,MAAM;AAC9C","debugId":null}},
    {"offset": {"line": 5489, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/vector_extension/halfvec.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from '../common.ts';\n\nexport type PgHalfVectorBuilderInitial<TName extends string, TDimensions extends number> = PgHalfVectorBuilder<{\n\tname: TName;\n\tdataType: 'array';\n\tcolumnType: 'PgHalfVector';\n\tdata: number[];\n\tdriverParam: string;\n\tenumValues: undefined;\n\tdimensions: TDimensions;\n}>;\n\nexport class PgHalfVectorBuilder<T extends ColumnBuilderBaseConfig<'array', 'PgHalfVector'> & { dimensions: number }>\n\textends PgColumnBuilder<\n\t\tT,\n\t\t{ dimensions: T['dimensions'] },\n\t\t{ dimensions: T['dimensions'] }\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'PgHalfVectorBuilder';\n\n\tconstructor(name: string, config: PgHalfVectorConfig<T['dimensions']>) {\n\t\tsuper(name, 'array', 'PgHalfVector');\n\t\tthis.config.dimensions = config.dimensions;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgHalfVector<MakeColumnConfig<T, TTableName> & { dimensions: T['dimensions'] }> {\n\t\treturn new PgHalfVector<MakeColumnConfig<T, TTableName> & { dimensions: T['dimensions'] }>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgHalfVector<T extends ColumnBaseConfig<'array', 'PgHalfVector'> & { dimensions: number }>\n\textends PgColumn<T, { dimensions: T['dimensions'] }, { dimensions: T['dimensions'] }>\n{\n\tstatic override readonly [entityKind]: string = 'PgHalfVector';\n\n\treadonly dimensions: T['dimensions'] = this.config.dimensions;\n\n\tgetSQLType(): string {\n\t\treturn `halfvec(${this.dimensions})`;\n\t}\n\n\toverride mapToDriverValue(value: unknown): unknown {\n\t\treturn JSON.stringify(value);\n\t}\n\n\toverride mapFromDriverValue(value: string): unknown {\n\t\treturn value\n\t\t\t.slice(1, -1)\n\t\t\t.split(',')\n\t\t\t.map((v) => Number.parseFloat(v));\n\t}\n}\n\nexport interface PgHalfVectorConfig<TDimensions extends number = number> {\n\tdimensions: TDimensions;\n}\n\nexport function halfvec<D extends number>(\n\tconfig: PgHalfVectorConfig<D>,\n): PgHalfVectorBuilderInitial<'', D>;\nexport function halfvec<TName extends string, D extends number>(\n\tname: TName,\n\tconfig: PgHalfVectorConfig,\n): PgHalfVectorBuilderInitial<TName, D>;\nexport function halfvec(a: string | PgHalfVectorConfig, b?: PgHalfVectorConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgHalfVectorConfig>(a, b);\n\treturn new PgHalfVectorBuilder(name, config);\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,8BAA8B;AACvC,SAAS,UAAU,uBAAuB;;;;AAYnC,MAAM,8LACJ,kBAAA,CAKT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,sBAAA;IAEhD,YAAY,IAAA,EAAc,MAAA,CAA6C;QACtE,KAAA,CAAM,MAAM,SAAS,cAAc;QACnC,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa,OAAO,UAAA;IACjC;IAAA,cAAA,GAGS,MACR,KAAA,EACkF;QAClF,OAAO,IAAI,aACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,uLACJ,WAAA,CACT;IACC,OAAA,yIAA0B,cAAU,CAAA,GAAY,eAAA;IAEvC,aAA8B,IAAA,CAAK,MAAA,CAAO,UAAA,CAAA;IAEnD,aAAqB;QACpB,OAAO,CAAA,QAAA,EAAW,IAAA,CAAK,UAAU,CAAA,CAAA,CAAA;IAClC;IAES,iBAAiB,KAAA,EAAyB;QAClD,OAAO,KAAK,SAAA,CAAU,KAAK;IAC5B;IAES,mBAAmB,KAAA,EAAwB;QACnD,OAAO,MACL,KAAA,CAAM,GAAG,CAAA,CAAE,EACX,KAAA,CAAM,GAAG,EACT,GAAA,CAAI,CAAC,IAAM,OAAO,UAAA,CAAW,CAAC,CAAC;IAClC;AACD;AAaO,SAAS,QAAQ,CAAA,EAAgC,CAAA,EAAwB;IAC/E,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,+IAAI,yBAAA,EAA2C,GAAG,CAAC;IACxE,OAAO,IAAI,oBAAoB,MAAM,MAAM;AAC5C","debugId":null}},
    {"offset": {"line": 5533, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/vector_extension/sparsevec.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from '../common.ts';\n\nexport type PgSparseVectorBuilderInitial<TName extends string> = PgSparseVectorBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgSparseVector';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgSparseVectorBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgSparseVector'>>\n\textends PgColumnBuilder<\n\t\tT,\n\t\t{ dimensions: number | undefined }\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'PgSparseVectorBuilder';\n\n\tconstructor(name: string, config: PgSparseVectorConfig) {\n\t\tsuper(name, 'string', 'PgSparseVector');\n\t\tthis.config.dimensions = config.dimensions;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgSparseVector<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgSparseVector<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgSparseVector<T extends ColumnBaseConfig<'string', 'PgSparseVector'>>\n\textends PgColumn<T, { dimensions: number | undefined }>\n{\n\tstatic override readonly [entityKind]: string = 'PgSparseVector';\n\n\treadonly dimensions = this.config.dimensions;\n\n\tgetSQLType(): string {\n\t\treturn `sparsevec(${this.dimensions})`;\n\t}\n}\n\nexport interface PgSparseVectorConfig {\n\tdimensions: number;\n}\n\nexport function sparsevec(\n\tconfig: PgSparseVectorConfig,\n): PgSparseVectorBuilderInitial<''>;\nexport function sparsevec<TName extends string>(\n\tname: TName,\n\tconfig: PgSparseVectorConfig,\n): PgSparseVectorBuilderInitial<TName>;\nexport function sparsevec(a: string | PgSparseVectorConfig, b?: PgSparseVectorConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgSparseVectorConfig>(a, b);\n\treturn new PgSparseVectorBuilder(name, config);\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,8BAA8B;AACvC,SAAS,UAAU,uBAAuB;;;;AAWnC,MAAM,gMACJ,kBAAA,CAIT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,wBAAA;IAEhD,YAAY,IAAA,EAAc,MAAA,CAA8B;QACvD,KAAA,CAAM,MAAM,UAAU,gBAAgB;QACtC,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa,OAAO,UAAA;IACjC;IAAA,cAAA,GAGS,MACR,KAAA,EACkD;QAClD,OAAO,IAAI,eACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,yLACJ,WAAA,CACT;IACC,OAAA,CAA0B,sJAAU,CAAA,GAAY,iBAAA;IAEvC,aAAa,IAAA,CAAK,MAAA,CAAO,UAAA,CAAA;IAElC,aAAqB;QACpB,OAAO,CAAA,UAAA,EAAa,IAAA,CAAK,UAAU,CAAA,CAAA,CAAA;IACpC;AACD;AAaO,SAAS,UAAU,CAAA,EAAkC,CAAA,EAA0B;IACrF,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,+IAAI,yBAAA,EAA6C,GAAG,CAAC;IAC1E,OAAO,IAAI,sBAAsB,MAAM,MAAM;AAC9C","debugId":null}},
    {"offset": {"line": 5571, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/vector_extension/vector.ts"],"sourcesContent":["import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { getColumnNameAndConfig } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from '../common.ts';\n\nexport type PgVectorBuilderInitial<TName extends string, TDimensions extends number> = PgVectorBuilder<{\n\tname: TName;\n\tdataType: 'array';\n\tcolumnType: 'PgVector';\n\tdata: number[];\n\tdriverParam: string;\n\tenumValues: undefined;\n\tdimensions: TDimensions;\n}>;\n\nexport class PgVectorBuilder<T extends ColumnBuilderBaseConfig<'array', 'PgVector'> & { dimensions: number }>\n\textends PgColumnBuilder<\n\t\tT,\n\t\t{ dimensions: T['dimensions'] },\n\t\t{ dimensions: T['dimensions'] }\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'PgVectorBuilder';\n\n\tconstructor(name: string, config: PgVectorConfig<T['dimensions']>) {\n\t\tsuper(name, 'array', 'PgVector');\n\t\tthis.config.dimensions = config.dimensions;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgVector<MakeColumnConfig<T, TTableName> & { dimensions: T['dimensions'] }> {\n\t\treturn new PgVector<MakeColumnConfig<T, TTableName> & { dimensions: T['dimensions'] }>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgVector<T extends ColumnBaseConfig<'array', 'PgVector'> & { dimensions: number | undefined }>\n\textends PgColumn<T, { dimensions: T['dimensions'] }, { dimensions: T['dimensions'] }>\n{\n\tstatic override readonly [entityKind]: string = 'PgVector';\n\n\treadonly dimensions: T['dimensions'] = this.config.dimensions;\n\n\tgetSQLType(): string {\n\t\treturn `vector(${this.dimensions})`;\n\t}\n\n\toverride mapToDriverValue(value: unknown): unknown {\n\t\treturn JSON.stringify(value);\n\t}\n\n\toverride mapFromDriverValue(value: string): unknown {\n\t\treturn value\n\t\t\t.slice(1, -1)\n\t\t\t.split(',')\n\t\t\t.map((v) => Number.parseFloat(v));\n\t}\n}\n\nexport interface PgVectorConfig<TDimensions extends number = number> {\n\tdimensions: TDimensions;\n}\n\nexport function vector<D extends number>(\n\tconfig: PgVectorConfig<D>,\n): PgVectorBuilderInitial<'', D>;\nexport function vector<TName extends string, D extends number>(\n\tname: TName,\n\tconfig: PgVectorConfig<D>,\n): PgVectorBuilderInitial<TName, D>;\nexport function vector(a: string | PgVectorConfig, b?: PgVectorConfig) {\n\tconst { name, config } = getColumnNameAndConfig<PgVectorConfig>(a, b);\n\treturn new PgVectorBuilder(name, config);\n}\n"],"names":[],"mappings":";;;;;AAEA,SAAS,kBAAkB;AAE3B,SAAS,8BAA8B;AACvC,SAAS,UAAU,uBAAuB;;;;AAYnC,MAAM,0LACJ,kBAAA,CAKT;IACC,OAAA,0IAA0B,aAAU,CAAA,GAAY,kBAAA;IAEhD,YAAY,IAAA,EAAc,MAAA,CAAyC;QAClE,KAAA,CAAM,MAAM,SAAS,UAAU;QAC/B,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa,OAAO,UAAA;IACjC;IAAA,cAAA,GAGS,MACR,KAAA,EAC8E;QAC9E,OAAO,IAAI,SACV,OACA,IAAA,CAAK,MAAA;IAEP;AACD;AAEO,MAAM,mLACJ,WAAA,CACT;IACC,OAAA,yIAA0B,cAAU,CAAA,GAAY,WAAA;IAEvC,aAA8B,IAAA,CAAK,MAAA,CAAO,UAAA,CAAA;IAEnD,aAAqB;QACpB,OAAO,CAAA,OAAA,EAAU,IAAA,CAAK,UAAU,CAAA,CAAA,CAAA;IACjC;IAES,iBAAiB,KAAA,EAAyB;QAClD,OAAO,KAAK,SAAA,CAAU,KAAK;IAC5B;IAES,mBAAmB,KAAA,EAAwB;QACnD,OAAO,MACL,KAAA,CAAM,GAAG,CAAA,CAAE,EACX,KAAA,CAAM,GAAG,EACT,GAAA,CAAI,CAAC,IAAM,OAAO,UAAA,CAAW,CAAC,CAAC;IAClC;AACD;AAaO,SAAS,OAAO,CAAA,EAA4B,CAAA,EAAoB;IACtE,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,+IAAI,yBAAA,EAAuC,GAAG,CAAC;IACpE,OAAO,IAAI,gBAAgB,MAAM,MAAM;AACxC","debugId":null}},
    {"offset": {"line": 5615, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/columns/all.ts"],"sourcesContent":["import { bigint } from './bigint.ts';\nimport { bigserial } from './bigserial.ts';\nimport { boolean } from './boolean.ts';\nimport { char } from './char.ts';\nimport { cidr } from './cidr.ts';\nimport { customType } from './custom.ts';\nimport { date } from './date.ts';\nimport { doublePrecision } from './double-precision.ts';\nimport { inet } from './inet.ts';\nimport { integer } from './integer.ts';\nimport { interval } from './interval.ts';\nimport { json } from './json.ts';\nimport { jsonb } from './jsonb.ts';\nimport { line } from './line.ts';\nimport { macaddr } from './macaddr.ts';\nimport { macaddr8 } from './macaddr8.ts';\nimport { numeric } from './numeric.ts';\nimport { point } from './point.ts';\nimport { geometry } from './postgis_extension/geometry.ts';\nimport { real } from './real.ts';\nimport { serial } from './serial.ts';\nimport { smallint } from './smallint.ts';\nimport { smallserial } from './smallserial.ts';\nimport { text } from './text.ts';\nimport { time } from './time.ts';\nimport { timestamp } from './timestamp.ts';\nimport { uuid } from './uuid.ts';\nimport { varchar } from './varchar.ts';\nimport { bit } from './vector_extension/bit.ts';\nimport { halfvec } from './vector_extension/halfvec.ts';\nimport { sparsevec } from './vector_extension/sparsevec.ts';\nimport { vector } from './vector_extension/vector.ts';\n\nexport function getPgColumnBuilders() {\n\treturn {\n\t\tbigint,\n\t\tbigserial,\n\t\tboolean,\n\t\tchar,\n\t\tcidr,\n\t\tcustomType,\n\t\tdate,\n\t\tdoublePrecision,\n\t\tinet,\n\t\tinteger,\n\t\tinterval,\n\t\tjson,\n\t\tjsonb,\n\t\tline,\n\t\tmacaddr,\n\t\tmacaddr8,\n\t\tnumeric,\n\t\tpoint,\n\t\tgeometry,\n\t\treal,\n\t\tserial,\n\t\tsmallint,\n\t\tsmallserial,\n\t\ttext,\n\t\ttime,\n\t\ttimestamp,\n\t\tuuid,\n\t\tvarchar,\n\t\tbit,\n\t\thalfvec,\n\t\tsparsevec,\n\t\tvector,\n\t};\n}\n\nexport type PgColumnsBuilders = ReturnType<typeof getPgColumnBuilders>;\n"],"names":[],"mappings":";;;AAAA,SAAS,cAAc;AACvB,SAAS,iBAAiB;AAC1B,SAAS,eAAe;AACxB,SAAS,YAAY;AACrB,SAAS,YAAY;AACrB,SAAS,kBAAkB;AAC3B,SAAS,YAAY;AACrB,SAAS,uBAAuB;AAChC,SAAS,YAAY;AACrB,SAAS,eAAe;AACxB,SAAS,gBAAgB;AACzB,SAAS,YAAY;AACrB,SAAS,aAAa;AACtB,SAAS,YAAY;AACrB,SAAS,eAAe;AACxB,SAAS,gBAAgB;AACzB,SAAS,eAAe;AACxB,SAAS,aAAa;AACtB,SAAS,gBAAgB;AACzB,SAAS,YAAY;AACrB,SAAS,cAAc;AACvB,SAAS,gBAAgB;AACzB,SAAS,mBAAmB;AAC5B,SAAS,YAAY;AACrB,SAAS,YAAY;AACrB,SAAS,iBAAiB;AAC1B,SAAS,YAAY;AACrB,SAAS,eAAe;AACxB,SAAS,WAAW;AACpB,SAAS,eAAe;AACxB,SAAS,iBAAiB;AAC1B,SAAS,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEhB,SAAS,sBAAsB;IACrC,OAAO;kLACN,SAAA;wLACA,YAAA;oLACA,UAAA;8KACA,OAAA;8KACA,OAAA;sLACA,aAAA;8KACA,OAAA;wMACA,kBAAA;8KACA,OAAA;oLACA,UAAA;sLACA,WAAA;8KACA,OAAA;gLACA,QAAA;8KACA,OAAA;oLACA,UAAA;sLACA,WAAA;oLACA,UAAA;gLACA,QAAA;2MACA,WAAA;8KACA,OAAA;kLACA,SAAA;sLACA,WAAA;4LACA,cAAA;8KACA,OAAA;8KACA,OAAA;wLACA,YAAA;8KACA,OAAA;oLACA,UAAA;gMACA,MAAA;wMACA,UAAA;4MACA,YAAA;sMACA,SAAA;IACD;AACD","debugId":null}},
    {"offset": {"line": 5724, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/table.ts"],"sourcesContent":["import type { BuildColumns, BuildExtraConfigColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport { Table, type TableConfig as TableConfigBase, type UpdateTableConfig } from '~/table.ts';\nimport type { CheckBuilder } from './checks.ts';\nimport { getPgColumnBuilders, type PgColumnsBuilders } from './columns/all.ts';\nimport type { ExtraConfigColumn, PgColumn, PgColumnBuilder, PgColumnBuilderBase } from './columns/common.ts';\nimport type { ForeignKey, ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { AnyIndexBuilder } from './indexes.ts';\nimport type { PgPolicy } from './policies.ts';\nimport type { PrimaryKeyBuilder } from './primary-keys.ts';\nimport type { UniqueConstraintBuilder } from './unique-constraint.ts';\n\nexport type PgTableExtraConfigValue =\n\t| AnyIndexBuilder\n\t| CheckBuilder\n\t| ForeignKeyBuilder\n\t| PrimaryKeyBuilder\n\t| UniqueConstraintBuilder\n\t| PgPolicy;\n\nexport type PgTableExtraConfig = Record<\n\tstring,\n\tPgTableExtraConfigValue\n>;\n\nexport type TableConfig = TableConfigBase<PgColumn>;\n\n/** @internal */\nexport const InlineForeignKeys = Symbol.for('drizzle:PgInlineForeignKeys');\n/** @internal */\nexport const EnableRLS = Symbol.for('drizzle:EnableRLS');\n\nexport class PgTable<T extends TableConfig = TableConfig> extends Table<T> {\n\tstatic override readonly [entityKind]: string = 'PgTable';\n\n\t/** @internal */\n\tstatic override readonly Symbol = Object.assign({}, Table.Symbol, {\n\t\tInlineForeignKeys: InlineForeignKeys as typeof InlineForeignKeys,\n\t\tEnableRLS: EnableRLS as typeof EnableRLS,\n\t});\n\n\t/**@internal */\n\t[InlineForeignKeys]: ForeignKey[] = [];\n\n\t/** @internal */\n\t[EnableRLS]: boolean = false;\n\n\t/** @internal */\n\toverride [Table.Symbol.ExtraConfigBuilder]: ((self: Record<string, PgColumn>) => PgTableExtraConfig) | undefined =\n\t\tundefined;\n\n\t/** @internal */\n\toverride [Table.Symbol.ExtraConfigColumns]: Record<string, ExtraConfigColumn> = {};\n}\n\nexport type AnyPgTable<TPartial extends Partial<TableConfig> = {}> = PgTable<UpdateTableConfig<TableConfig, TPartial>>;\n\nexport type PgTableWithColumns<T extends TableConfig> =\n\t& PgTable<T>\n\t& {\n\t\t[Key in keyof T['columns']]: T['columns'][Key];\n\t}\n\t& {\n\t\tenableRLS: () => Omit<\n\t\t\tPgTableWithColumns<T>,\n\t\t\t'enableRLS'\n\t\t>;\n\t};\n\n/** @internal */\nexport function pgTableWithSchema<\n\tTTableName extends string,\n\tTSchemaName extends string | undefined,\n\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n>(\n\tname: TTableName,\n\tcolumns: TColumnsMap | ((columnTypes: PgColumnsBuilders) => TColumnsMap),\n\textraConfig:\n\t\t| ((self: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfig | PgTableExtraConfigValue[])\n\t\t| undefined,\n\tschema: TSchemaName,\n\tbaseName = name,\n): PgTableWithColumns<{\n\tname: TTableName;\n\tschema: TSchemaName;\n\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\tdialect: 'pg';\n}> {\n\tconst rawTable = new PgTable<{\n\t\tname: TTableName;\n\t\tschema: TSchemaName;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>(name, schema, baseName);\n\n\tconst parsedColumns: TColumnsMap = typeof columns === 'function' ? columns(getPgColumnBuilders()) : columns;\n\n\tconst builtColumns = Object.fromEntries(\n\t\tObject.entries(parsedColumns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as PgColumnBuilder;\n\t\t\tcolBuilder.setName(name);\n\t\t\tconst column = colBuilder.build(rawTable);\n\t\t\trawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\n\tconst builtColumnsForExtraConfig = Object.fromEntries(\n\t\tObject.entries(parsedColumns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as PgColumnBuilder;\n\t\t\tcolBuilder.setName(name);\n\t\t\tconst column = colBuilder.buildExtraConfigColumn(rawTable);\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>;\n\n\tconst table = Object.assign(rawTable, builtColumns);\n\n\ttable[Table.Symbol.Columns] = builtColumns;\n\ttable[Table.Symbol.ExtraConfigColumns] = builtColumnsForExtraConfig;\n\n\tif (extraConfig) {\n\t\ttable[PgTable.Symbol.ExtraConfigBuilder] = extraConfig as any;\n\t}\n\n\treturn Object.assign(table, {\n\t\tenableRLS: () => {\n\t\t\ttable[PgTable.Symbol.EnableRLS] = true;\n\t\t\treturn table as PgTableWithColumns<{\n\t\t\t\tname: TTableName;\n\t\t\t\tschema: TSchemaName;\n\t\t\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\t\t\tdialect: 'pg';\n\t\t\t}>;\n\t\t},\n\t});\n}\n\nexport interface PgTableFn<TSchema extends string | undefined = undefined> {\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig?: (\n\t\t\tself: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>,\n\t\t) => PgTableExtraConfigValue[],\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: (columnTypes: PgColumnsBuilders) => TColumnsMap,\n\t\textraConfig?: (self: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfigValue[],\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n\t/**\n\t * @deprecated The third parameter of pgTable is changing and will only accept an array instead of an object\n\t *\n\t * @example\n\t * Deprecated version:\n\t * ```ts\n\t * export const users = pgTable(\"users\", {\n\t * \tid: integer(),\n\t * }, (t) => ({\n\t * \tidx: index('custom_name').on(t.id)\n\t * }));\n\t * ```\n\t *\n\t * New API:\n\t * ```ts\n\t * export const users = pgTable(\"users\", {\n\t * \tid: integer(),\n\t * }, (t) => [\n\t * \tindex('custom_name').on(t.id)\n\t * ]);\n\t * ```\n\t */\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig: (\n\t\t\tself: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>,\n\t\t) => PgTableExtraConfig,\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n\n\t/**\n\t * @deprecated The third parameter of pgTable is changing and will only accept an array instead of an object\n\t *\n\t * @example\n\t * Deprecated version:\n\t * ```ts\n\t * export const users = pgTable(\"users\", {\n\t * \tid: integer(),\n\t * }, (t) => ({\n\t * \tidx: index('custom_name').on(t.id)\n\t * }));\n\t * ```\n\t *\n\t * New API:\n\t * ```ts\n\t * export const users = pgTable(\"users\", {\n\t * \tid: integer(),\n\t * }, (t) => [\n\t * \tindex('custom_name').on(t.id)\n\t * ]);\n\t * ```\n\t */\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: (columnTypes: PgColumnsBuilders) => TColumnsMap,\n\t\textraConfig: (self: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfig,\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n}\n\nexport const pgTable: PgTableFn = (name, columns, extraConfig) => {\n\treturn pgTableWithSchema(name, columns, extraConfig, undefined);\n};\n\nexport function pgTableCreator(customizeTableName: (name: string) => string): PgTableFn {\n\treturn (name, columns, extraConfig) => {\n\t\treturn pgTableWithSchema(customizeTableName(name) as typeof name, columns, extraConfig, undefined, name);\n\t};\n}\n"],"names":["name"],"mappings":";;;;;;;;AACA,SAAS,kBAAkB;AAC3B,SAAS,aAA0E;AAEnF,SAAS,2BAAmD;;;;AAwBrD,MAAM,oBAAoB,OAAO,GAAA,CAAI,6BAA6B;AAElE,MAAM,YAAY,OAAO,GAAA,CAAI,mBAAmB;AAEhD,MAAM,wJAAqD,QAAA,CAAS;IAC1E,OAAA,0IAA0B,aAAU,CAAA,GAAY,UAAA;IAAA,cAAA,GAGhD,OAAyB,SAAS,OAAO,MAAA,CAAO,CAAC,2IAAG,QAAA,CAAM,MAAA,EAAQ;QACjE;QACA;IACD,CAAC,EAAA;IAAA,aAAA,GAGD,CAAC,iBAAiB,CAAA,GAAkB,CAAC,CAAA,CAAA;IAAA,cAAA,GAGrC,CAAC,SAAS,CAAA,GAAa,MAAA;IAAA,cAAA,GAGvB,yIAAU,QAAA,CAAM,MAAA,CAAO,kBAAkB,CAAA,GACxC,KAAA,EAAA;IAAA,cAAA,GAGD,yIAAU,QAAA,CAAM,MAAA,CAAO,kBAAkB,CAAA,GAAuC,CAAC,EAAA;AAClF;AAiBO,SAAS,kBAKf,IAAA,EACA,OAAA,EACA,WAAA,EAGA,MAAA,EACA,WAAW,IAAA,EAMT;IACF,MAAM,WAAW,IAAI,QAKlB,MAAM,QAAQ,QAAQ;IAEzB,MAAM,gBAA6B,OAAO,YAAY,aAAa,2KAAQ,sBAAA,CAAoB,CAAC,KAAI;IAEpG,MAAM,eAAe,OAAO,WAAA,CAC3B,OAAO,OAAA,CAAQ,aAAa,EAAE,GAAA,CAAI,CAAC,CAACA,OAAM,cAAc,CAAA,KAAM;QAC7D,MAAM,aAAa;QACnB,WAAW,OAAA,CAAQA,KAAI;QACvB,MAAM,SAAS,WAAW,KAAA,CAAM,QAAQ;QACxC,QAAA,CAAS,iBAAiB,CAAA,CAAE,IAAA,CAAK,GAAG,WAAW,gBAAA,CAAiB,QAAQ,QAAQ,CAAC;QACjF,OAAO;YAACA;YAAM,MAAM;SAAA;IACrB,CAAC;IAGF,MAAM,6BAA6B,OAAO,WAAA,CACzC,OAAO,OAAA,CAAQ,aAAa,EAAE,GAAA,CAAI,CAAC,CAACA,OAAM,cAAc,CAAA,KAAM;QAC7D,MAAM,aAAa;QACnB,WAAW,OAAA,CAAQA,KAAI;QACvB,MAAM,SAAS,WAAW,sBAAA,CAAuB,QAAQ;QACzD,OAAO;YAACA;YAAM,MAAM;SAAA;IACrB,CAAC;IAGF,MAAM,QAAQ,OAAO,MAAA,CAAO,UAAU,YAAY;IAElD,KAAA,yIAAM,QAAA,CAAM,MAAA,CAAO,OAAO,CAAA,GAAI;IAC9B,KAAA,wIAAM,SAAA,CAAM,MAAA,CAAO,kBAAkB,CAAA,GAAI;IAEzC,IAAI,aAAa;QAChB,KAAA,CAAM,QAAQ,MAAA,CAAO,kBAAkB,CAAA,GAAI;IAC5C;IAEA,OAAO,OAAO,MAAA,CAAO,OAAO;QAC3B,WAAW,MAAM;YAChB,KAAA,CAAM,QAAQ,MAAA,CAAO,SAAS,CAAA,GAAI;YAClC,OAAO;QAMR;IACD,CAAC;AACF;AA2GO,MAAM,UAAqB,CAAC,MAAM,SAAS,gBAAgB;IACjE,OAAO,kBAAkB,MAAM,SAAS,aAAa,KAAA,CAAS;AAC/D;AAEO,SAAS,eAAe,kBAAA,EAAyD;IACvF,OAAO,CAAC,MAAM,SAAS,gBAAgB;QACtC,OAAO,kBAAkB,mBAAmB,IAAI,GAAkB,SAAS,aAAa,KAAA,GAAW,IAAI;IACxG;AACD","debugId":null}},
    {"offset": {"line": 5800, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/logger.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\n\nexport interface Logger {\n\tlogQuery(query: string, params: unknown[]): void;\n}\n\nexport interface LogWriter {\n\twrite(message: string): void;\n}\n\nexport class ConsoleLogWriter implements LogWriter {\n\tstatic readonly [entityKind]: string = 'ConsoleLogWriter';\n\n\twrite(message: string) {\n\t\tconsole.log(message);\n\t}\n}\n\nexport class DefaultLogger implements Logger {\n\tstatic readonly [entityKind]: string = 'DefaultLogger';\n\n\treadonly writer: LogWriter;\n\n\tconstructor(config?: { writer: LogWriter }) {\n\t\tthis.writer = config?.writer ?? new ConsoleLogWriter();\n\t}\n\n\tlogQuery(query: string, params: unknown[]): void {\n\t\tconst stringifiedParams = params.map((p) => {\n\t\t\ttry {\n\t\t\t\treturn JSON.stringify(p);\n\t\t\t} catch {\n\t\t\t\treturn String(p);\n\t\t\t}\n\t\t});\n\t\tconst paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(', ')}]` : '';\n\t\tthis.writer.write(`Query: ${query}${paramsStr}`);\n\t}\n}\n\nexport class NoopLogger implements Logger {\n\tstatic readonly [entityKind]: string = 'NoopLogger';\n\n\tlogQuery(): void {\n\t\t// noop\n\t}\n}\n"],"names":[],"mappings":";;;;;AAAA,SAAS,kBAAkB;;AAUpB,MAAM,iBAAsC;IAClD,OAAA,0IAAiB,aAAU,CAAA,GAAY,mBAAA;IAEvC,MAAM,OAAA,EAAiB;QACtB,QAAQ,GAAA,CAAI,OAAO;IACpB;AACD;AAEO,MAAM,cAAgC;IAC5C,OAAA,0IAAiB,aAAU,CAAA,GAAY,gBAAA;IAE9B,OAAA;IAET,YAAY,MAAA,CAAgC;QAC3C,IAAA,CAAK,MAAA,GAAS,QAAQ,UAAU,IAAI,iBAAiB;IACtD;IAEA,SAAS,KAAA,EAAe,MAAA,EAAyB;QAChD,MAAM,oBAAoB,OAAO,GAAA,CAAI,CAAC,MAAM;YAC3C,IAAI;gBACH,OAAO,KAAK,SAAA,CAAU,CAAC;YACxB,EAAA,OAAQ;gBACP,OAAO,OAAO,CAAC;YAChB;QACD,CAAC;QACD,MAAM,YAAY,kBAAkB,MAAA,GAAS,CAAA,aAAA,EAAgB,kBAAkB,IAAA,CAAK,IAAI,CAAC,CAAA,CAAA,CAAA,GAAM;QAC/F,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM,CAAA,OAAA,EAAU,KAAK,GAAG,SAAS,EAAE;IAChD;AACD;AAEO,MAAM,WAA6B;IACzC,OAAA,0IAAiB,aAAU,CAAA,GAAY,aAAA;IAEvC,WAAiB,CAEjB;AACD","debugId":null}},
    {"offset": {"line": 5841, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/query-promise.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\n\nexport abstract class QueryPromise<T> implements Promise<T> {\n\tstatic readonly [entityKind]: string = 'QueryPromise';\n\n\t[Symbol.toStringTag] = 'QueryPromise';\n\n\tcatch<TResult = never>(\n\t\tonRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null | undefined,\n\t): Promise<T | TResult> {\n\t\treturn this.then(undefined, onRejected);\n\t}\n\n\tfinally(onFinally?: (() => void) | null | undefined): Promise<T> {\n\t\treturn this.then(\n\t\t\t(value) => {\n\t\t\t\tonFinally?.();\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\t(reason) => {\n\t\t\t\tonFinally?.();\n\t\t\t\tthrow reason;\n\t\t\t},\n\t\t);\n\t}\n\n\tthen<TResult1 = T, TResult2 = never>(\n\t\tonFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n\t\tonRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n\t): Promise<TResult1 | TResult2> {\n\t\treturn this.execute().then(onFulfilled, onRejected);\n\t}\n\n\tabstract execute(): Promise<T>;\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;;AAEpB,MAAe,aAAsC;IAC3D,OAAA,0IAAiB,aAAU,CAAA,GAAY,eAAA;IAEvC,CAAC,OAAO,WAAW,CAAA,GAAI,eAAA;IAEvB,MACC,UAAA,EACuB;QACvB,OAAO,IAAA,CAAK,IAAA,CAAK,KAAA,GAAW,UAAU;IACvC;IAEA,QAAQ,SAAA,EAAyD;QAChE,OAAO,IAAA,CAAK,IAAA,CACX,CAAC,UAAU;YACV,YAAY;YACZ,OAAO;QACR,GACA,CAAC,WAAW;YACX,YAAY;YACZ,MAAM;QACP;IAEF;IAEA,KACC,WAAA,EACA,UAAA,EAC+B;QAC/B,OAAO,IAAA,CAAK,OAAA,CAAQ,EAAE,IAAA,CAAK,aAAa,UAAU;IACnD;AAGD","debugId":null}},
    {"offset": {"line": 5871, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/alias.ts"],"sourcesContent":["import type { AnyColumn } from './column.ts';\nimport { Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport type { Relation } from './relations.ts';\nimport type { View } from './sql/sql.ts';\nimport { SQL, sql } from './sql/sql.ts';\nimport { Table } from './table.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\nexport class ColumnAliasProxyHandler<TColumn extends Column> implements ProxyHandler<TColumn> {\n\tstatic readonly [entityKind]: string = 'ColumnAliasProxyHandler';\n\n\tconstructor(private table: Table | View) {}\n\n\tget(columnObj: TColumn, prop: string | symbol): any {\n\t\tif (prop === 'table') {\n\t\t\treturn this.table;\n\t\t}\n\n\t\treturn columnObj[prop as keyof TColumn];\n\t}\n}\n\nexport class TableAliasProxyHandler<T extends Table | View> implements ProxyHandler<T> {\n\tstatic readonly [entityKind]: string = 'TableAliasProxyHandler';\n\n\tconstructor(private alias: string, private replaceOriginalName: boolean) {}\n\n\tget(target: T, prop: string | symbol): any {\n\t\tif (prop === Table.Symbol.IsAlias) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (prop === Table.Symbol.Name) {\n\t\t\treturn this.alias;\n\t\t}\n\n\t\tif (this.replaceOriginalName && prop === Table.Symbol.OriginalName) {\n\t\t\treturn this.alias;\n\t\t}\n\n\t\tif (prop === ViewBaseConfig) {\n\t\t\treturn {\n\t\t\t\t...target[ViewBaseConfig as keyof typeof target],\n\t\t\t\tname: this.alias,\n\t\t\t\tisAlias: true,\n\t\t\t};\n\t\t}\n\n\t\tif (prop === Table.Symbol.Columns) {\n\t\t\tconst columns = (target as Table)[Table.Symbol.Columns];\n\t\t\tif (!columns) {\n\t\t\t\treturn columns;\n\t\t\t}\n\n\t\t\tconst proxiedColumns: { [key: string]: any } = {};\n\n\t\t\tObject.keys(columns).map((key) => {\n\t\t\t\tproxiedColumns[key] = new Proxy(\n\t\t\t\t\tcolumns[key]!,\n\t\t\t\t\tnew ColumnAliasProxyHandler(new Proxy(target, this)),\n\t\t\t\t);\n\t\t\t});\n\n\t\t\treturn proxiedColumns;\n\t\t}\n\n\t\tconst value = target[prop as keyof typeof target];\n\t\tif (is(value, Column)) {\n\t\t\treturn new Proxy(value as AnyColumn, new ColumnAliasProxyHandler(new Proxy(target, this)));\n\t\t}\n\n\t\treturn value;\n\t}\n}\n\nexport class RelationTableAliasProxyHandler<T extends Relation> implements ProxyHandler<T> {\n\tstatic readonly [entityKind]: string = 'RelationTableAliasProxyHandler';\n\n\tconstructor(private alias: string) {}\n\n\tget(target: T, prop: string | symbol): any {\n\t\tif (prop === 'sourceTable') {\n\t\t\treturn aliasedTable(target.sourceTable, this.alias);\n\t\t}\n\n\t\treturn target[prop as keyof typeof target];\n\t}\n}\n\nexport function aliasedTable<T extends Table | View>(\n\ttable: T,\n\ttableAlias: string,\n): T {\n\treturn new Proxy(table, new TableAliasProxyHandler(tableAlias, false)) as any;\n}\n\nexport function aliasedRelation<T extends Relation>(relation: T, tableAlias: string): T {\n\treturn new Proxy(relation, new RelationTableAliasProxyHandler(tableAlias));\n}\n\nexport function aliasedTableColumn<T extends AnyColumn>(column: T, tableAlias: string): T {\n\treturn new Proxy(\n\t\tcolumn,\n\t\tnew ColumnAliasProxyHandler(new Proxy(column.table, new TableAliasProxyHandler(tableAlias, false))),\n\t);\n}\n\nexport function mapColumnsInAliasedSQLToAlias(query: SQL.Aliased, alias: string): SQL.Aliased {\n\treturn new SQL.Aliased(mapColumnsInSQLToAlias(query.sql, alias), query.fieldAlias);\n}\n\nexport function mapColumnsInSQLToAlias(query: SQL, alias: string): SQL {\n\treturn sql.join(query.queryChunks.map((c) => {\n\t\tif (is(c, Column)) {\n\t\t\treturn aliasedTableColumn(c, alias);\n\t\t}\n\t\tif (is(c, SQL)) {\n\t\t\treturn mapColumnsInSQLToAlias(c, alias);\n\t\t}\n\t\tif (is(c, SQL.Aliased)) {\n\t\t\treturn mapColumnsInAliasedSQLToAlias(c, alias);\n\t\t}\n\t\treturn c;\n\t}));\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5988, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/selection-proxy.ts"],"sourcesContent":["import { ColumnAliasProxyHandler, TableAliasProxyHandler } from './alias.ts';\nimport { Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport { SQL, View } from './sql/sql.ts';\nimport { Subquery } from './subquery.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\nexport class SelectionProxyHandler<T extends Subquery | Record<string, unknown> | View>\n\timplements ProxyHandler<Subquery | Record<string, unknown> | View>\n{\n\tstatic readonly [entityKind]: string = 'SelectionProxyHandler';\n\n\tprivate config: {\n\t\t/**\n\t\t * Table alias for the columns\n\t\t */\n\t\talias?: string;\n\t\t/**\n\t\t * What to do when a field is an instance of `SQL.Aliased` and it's not a selection field (from a subquery)\n\t\t *\n\t\t * `sql` - return the underlying SQL expression\n\t\t *\n\t\t * `alias` - return the field alias\n\t\t */\n\t\tsqlAliasedBehavior: 'sql' | 'alias';\n\t\t/**\n\t\t * What to do when a field is an instance of `SQL` and it doesn't have an alias declared\n\t\t *\n\t\t * `sql` - return the underlying SQL expression\n\t\t *\n\t\t * `error` - return a DrizzleTypeError on type level and throw an error on runtime\n\t\t */\n\t\tsqlBehavior: 'sql' | 'error';\n\n\t\t/**\n\t\t * Whether to replace the original name of the column with the alias\n\t\t * Should be set to `true` for views creation\n\t\t * @default false\n\t\t */\n\t\treplaceOriginalName?: boolean;\n\t};\n\n\tconstructor(config: SelectionProxyHandler<T>['config']) {\n\t\tthis.config = { ...config };\n\t}\n\n\tget(subquery: T, prop: string | symbol): any {\n\t\tif (prop === '_') {\n\t\t\treturn {\n\t\t\t\t...subquery['_' as keyof typeof subquery],\n\t\t\t\tselectedFields: new Proxy(\n\t\t\t\t\t(subquery as Subquery)._.selectedFields,\n\t\t\t\t\tthis as ProxyHandler<Record<string, unknown>>,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tif (prop === ViewBaseConfig) {\n\t\t\treturn {\n\t\t\t\t...subquery[ViewBaseConfig as keyof typeof subquery],\n\t\t\t\tselectedFields: new Proxy(\n\t\t\t\t\t(subquery as View)[ViewBaseConfig].selectedFields,\n\t\t\t\t\tthis as ProxyHandler<Record<string, unknown>>,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tif (typeof prop === 'symbol') {\n\t\t\treturn subquery[prop as keyof typeof subquery];\n\t\t}\n\n\t\tconst columns = is(subquery, Subquery)\n\t\t\t? subquery._.selectedFields\n\t\t\t: is(subquery, View)\n\t\t\t? subquery[ViewBaseConfig].selectedFields\n\t\t\t: subquery;\n\t\tconst value: unknown = columns[prop as keyof typeof columns];\n\n\t\tif (is(value, SQL.Aliased)) {\n\t\t\t// Never return the underlying SQL expression for a field previously selected in a subquery\n\t\t\tif (this.config.sqlAliasedBehavior === 'sql' && !value.isSelectionField) {\n\t\t\t\treturn value.sql;\n\t\t\t}\n\n\t\t\tconst newValue = value.clone();\n\t\t\tnewValue.isSelectionField = true;\n\t\t\treturn newValue;\n\t\t}\n\n\t\tif (is(value, SQL)) {\n\t\t\tif (this.config.sqlBehavior === 'sql') {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\tthrow new Error(\n\t\t\t\t`You tried to reference \"${prop}\" field from a subquery, which is a raw SQL field, but it doesn't have an alias declared. Please add an alias to the field using \".as('alias')\" method.`,\n\t\t\t);\n\t\t}\n\n\t\tif (is(value, Column)) {\n\t\t\tif (this.config.alias) {\n\t\t\t\treturn new Proxy(\n\t\t\t\t\tvalue,\n\t\t\t\t\tnew ColumnAliasProxyHandler(\n\t\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\t\tvalue.table,\n\t\t\t\t\t\t\tnew TableAliasProxyHandler(this.config.alias, this.config.replaceOriginalName ?? false),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\n\t\tif (typeof value !== 'object' || value === null) {\n\t\t\treturn value;\n\t\t}\n\n\t\treturn new Proxy(value, new SelectionProxyHandler(this.config));\n\t}\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,yBAAyB,8BAA8B;AAChE,SAAS,cAAc;AACvB,SAAS,YAAY,UAAU;AAC/B,SAAS,KAAK,YAAY;AAC1B,SAAS,gBAAgB;AACzB,SAAS,sBAAsB;;;;;;;AAExB,MAAM,sBAEb;IACC,OAAA,0IAAiB,aAAU,CAAA,GAAY,wBAAA;IAE/B,OAAA;IA8BR,YAAY,MAAA,CAA4C;QACvD,IAAA,CAAK,MAAA,GAAS;YAAE,GAAG,MAAA;QAAO;IAC3B;IAEA,IAAI,QAAA,EAAa,IAAA,EAA4B;QAC5C,IAAI,SAAS,KAAK;YACjB,OAAO;gBACN,GAAG,QAAA,CAAS,GAA4B,CAAA;gBACxC,gBAAgB,IAAI,MAClB,SAAsB,CAAA,CAAE,cAAA,EACzB,IAAA;YAEF;QACD;QAEA,IAAI,0JAAS,iBAAA,EAAgB;YAC5B,OAAO;gBACN,GAAG,QAAA,iJAAS,kBAAuC,CAAA;gBACnD,gBAAgB,IAAI,MAClB,QAAA,kJAAkB,iBAAc,CAAA,CAAE,cAAA,EACnC,IAAA;YAEF;QACD;QAEA,IAAI,OAAO,SAAS,UAAU;YAC7B,OAAO,QAAA,CAAS,IAA6B,CAAA;QAC9C;QAEA,MAAM,cAAU,8IAAA,EAAG,qJAAU,WAAQ,IAClC,SAAS,CAAA,CAAE,cAAA,gJACX,KAAA,EAAG,sJAAU,QAAI,IACjB,QAAA,kJAAS,iBAAc,CAAA,CAAE,cAAA,GACzB;QACH,MAAM,QAAiB,OAAA,CAAQ,IAA4B,CAAA;QAE3D,iJAAI,KAAA,EAAG,oJAAO,MAAA,CAAI,OAAO,GAAG;YAE3B,IAAI,IAAA,CAAK,MAAA,CAAO,kBAAA,KAAuB,SAAS,CAAC,MAAM,gBAAA,EAAkB;gBACxE,OAAO,MAAM,GAAA;YACd;YAEA,MAAM,WAAW,MAAM,KAAA,CAAM;YAC7B,SAAS,gBAAA,GAAmB;YAC5B,OAAO;QACR;QAEA,iJAAI,KAAA,EAAG,oJAAO,MAAG,GAAG;YACnB,IAAI,IAAA,CAAK,MAAA,CAAO,WAAA,KAAgB,OAAO;gBACtC,OAAO;YACR;YAEA,MAAM,IAAI,MACT,CAAA,wBAAA,EAA2B,IAAI,CAAA,uJAAA,CAAA;QAEjC;QAEA,IAAI,kJAAA,EAAG,gJAAO,SAAM,GAAG;YACtB,IAAI,IAAA,CAAK,MAAA,CAAO,KAAA,EAAO;gBACtB,OAAO,IAAI,MACV,OACA,4IAAI,0BAAA,CACH,IAAI,MACH,MAAM,KAAA,EACN,4IAAI,yBAAA,CAAuB,IAAA,CAAK,MAAA,CAAO,KAAA,EAAO,IAAA,CAAK,MAAA,CAAO,mBAAA,IAAuB,KAAK;YAI1F;YACA,OAAO;QACR;QAEA,IAAI,OAAO,UAAU,YAAY,UAAU,MAAM;YAChD,OAAO;QACR;QAEA,OAAO,IAAI,MAAM,OAAO,IAAI,sBAAsB,IAAA,CAAK,MAAM,CAAC;IAC/D;AACD","debugId":null}},
    {"offset": {"line": 6061, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/checks.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/index.ts';\nimport type { PgTable } from './table.ts';\n\nexport class CheckBuilder {\n\tstatic readonly [entityKind]: string = 'PgCheckBuilder';\n\n\tprotected brand!: 'PgConstraintBuilder';\n\n\tconstructor(public name: string, public value: SQL) {}\n\n\t/** @internal */\n\tbuild(table: PgTable): Check {\n\t\treturn new Check(table, this);\n\t}\n}\n\nexport class Check {\n\tstatic readonly [entityKind]: string = 'PgCheck';\n\n\treadonly name: string;\n\treadonly value: SQL;\n\n\tconstructor(public table: PgTable, builder: CheckBuilder) {\n\t\tthis.name = builder.name;\n\t\tthis.value = builder.value;\n\t}\n}\n\nexport function check(name: string, value: SQL): CheckBuilder {\n\treturn new CheckBuilder(name, value);\n}\n"],"names":[],"mappings":";;;;;AAAA,SAAS,kBAAkB;;AAIpB,MAAM,aAAa;IAKzB,YAAmB,IAAA,EAAqB,KAAA,CAAY;QAAjC,IAAA,CAAA,IAAA,GAAA;QAAqB,IAAA,CAAA,KAAA,GAAA;IAAa;IAJrD,OAAA,0IAAiB,aAAU,CAAA,GAAY,iBAAA;IAE7B,MAAA;IAAA,cAAA,GAKV,MAAM,KAAA,EAAuB;QAC5B,OAAO,IAAI,MAAM,OAAO,IAAI;IAC7B;AACD;AAEO,MAAM,MAAM;IAMlB,YAAmB,KAAA,EAAgB,OAAA,CAAuB;QAAvC,IAAA,CAAA,KAAA,GAAA;QAClB,IAAA,CAAK,IAAA,GAAO,QAAQ,IAAA;QACpB,IAAA,CAAK,KAAA,GAAQ,QAAQ,KAAA;IACtB;IARA,OAAA,0IAAiB,aAAU,CAAA,GAAY,UAAA;IAE9B,KAAA;IACA,MAAA;AAMV;AAEO,SAAS,MAAM,IAAA,EAAc,KAAA,EAA0B;IAC7D,OAAO,IAAI,aAAa,MAAM,KAAK;AACpC","debugId":null}},
    {"offset": {"line": 6098, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/indexes.ts"],"sourcesContent":["import { SQL } from '~/sql/sql.ts';\n\nimport { entityKind, is } from '~/entity.ts';\nimport type { ExtraConfigColumn, PgColumn } from './columns/index.ts';\nimport { IndexedColumn } from './columns/index.ts';\nimport type { PgTable } from './table.ts';\n\ninterface IndexConfig {\n\tname?: string;\n\n\tcolumns: Partial<IndexedColumn | SQL>[];\n\n\t/**\n\t * If true, the index will be created as `create unique index` instead of `create index`.\n\t */\n\tunique: boolean;\n\n\t/**\n\t * If true, the index will be created as `create index concurrently` instead of `create index`.\n\t */\n\tconcurrently?: boolean;\n\n\t/**\n\t * If true, the index will be created as `create index ... on only <table>` instead of `create index ... on <table>`.\n\t */\n\tonly: boolean;\n\n\t/**\n\t * Condition for partial index.\n\t */\n\twhere?: SQL;\n\n\t/**\n\t * The optional WITH clause specifies storage parameters for the index\n\t */\n\twith?: Record<string, any>;\n\n\t/**\n\t * The optional WITH clause method for the index\n\t */\n\tmethod?: 'btree' | string;\n}\n\nexport type IndexColumn = PgColumn;\n\nexport type PgIndexMethod = 'btree' | 'hash' | 'gist' | 'spgist' | 'gin' | 'brin' | 'hnsw' | 'ivfflat' | (string & {});\n\nexport type PgIndexOpClass =\n\t| 'abstime_ops'\n\t| 'access_method'\n\t| 'anyarray_eq'\n\t| 'anyarray_ge'\n\t| 'anyarray_gt'\n\t| 'anyarray_le'\n\t| 'anyarray_lt'\n\t| 'anyarray_ne'\n\t| 'bigint_ops'\n\t| 'bit_ops'\n\t| 'bool_ops'\n\t| 'box_ops'\n\t| 'bpchar_ops'\n\t| 'char_ops'\n\t| 'cidr_ops'\n\t| 'cstring_ops'\n\t| 'date_ops'\n\t| 'float_ops'\n\t| 'int2_ops'\n\t| 'int4_ops'\n\t| 'int8_ops'\n\t| 'interval_ops'\n\t| 'jsonb_ops'\n\t| 'macaddr_ops'\n\t| 'name_ops'\n\t| 'numeric_ops'\n\t| 'oid_ops'\n\t| 'oidint4_ops'\n\t| 'oidint8_ops'\n\t| 'oidname_ops'\n\t| 'oidvector_ops'\n\t| 'point_ops'\n\t| 'polygon_ops'\n\t| 'range_ops'\n\t| 'record_eq'\n\t| 'record_ge'\n\t| 'record_gt'\n\t| 'record_le'\n\t| 'record_lt'\n\t| 'record_ne'\n\t| 'text_ops'\n\t| 'time_ops'\n\t| 'timestamp_ops'\n\t| 'timestamptz_ops'\n\t| 'timetz_ops'\n\t| 'uuid_ops'\n\t| 'varbit_ops'\n\t| 'varchar_ops'\n\t// pg_vector types\n\t| 'xml_ops'\n\t| 'vector_l2_ops'\n\t| 'vector_ip_ops'\n\t| 'vector_cosine_ops'\n\t| 'vector_l1_ops'\n\t| 'bit_hamming_ops'\n\t| 'bit_jaccard_ops'\n\t| 'halfvec_l2_ops'\n\t| 'sparsevec_l2_op'\n\t| (string & {});\n\nexport class IndexBuilderOn {\n\tstatic readonly [entityKind]: string = 'PgIndexBuilderOn';\n\n\tconstructor(private unique: boolean, private name?: string) {}\n\n\ton(...columns: [Partial<ExtraConfigColumn> | SQL, ...Partial<ExtraConfigColumn | SQL>[]]): IndexBuilder {\n\t\treturn new IndexBuilder(\n\t\t\tcolumns.map((it) => {\n\t\t\t\tif (is(it, SQL)) {\n\t\t\t\t\treturn it;\n\t\t\t\t}\n\t\t\t\tit = it as ExtraConfigColumn;\n\t\t\t\tconst clonedIndexedColumn = new IndexedColumn(it.name, !!it.keyAsName, it.columnType!, it.indexConfig!);\n\t\t\t\tit.indexConfig = JSON.parse(JSON.stringify(it.defaultConfig));\n\t\t\t\treturn clonedIndexedColumn;\n\t\t\t}),\n\t\t\tthis.unique,\n\t\t\tfalse,\n\t\t\tthis.name,\n\t\t);\n\t}\n\n\tonOnly(...columns: [Partial<ExtraConfigColumn | SQL>, ...Partial<ExtraConfigColumn | SQL>[]]): IndexBuilder {\n\t\treturn new IndexBuilder(\n\t\t\tcolumns.map((it) => {\n\t\t\t\tif (is(it, SQL)) {\n\t\t\t\t\treturn it;\n\t\t\t\t}\n\t\t\t\tit = it as ExtraConfigColumn;\n\t\t\t\tconst clonedIndexedColumn = new IndexedColumn(it.name, !!it.keyAsName, it.columnType!, it.indexConfig!);\n\t\t\t\tit.indexConfig = it.defaultConfig;\n\t\t\t\treturn clonedIndexedColumn;\n\t\t\t}),\n\t\t\tthis.unique,\n\t\t\ttrue,\n\t\t\tthis.name,\n\t\t);\n\t}\n\n\t/**\n\t * Specify what index method to use. Choices are `btree`, `hash`, `gist`, `spgist`, `gin`, `brin`, or user-installed access methods like `bloom`. The default method is `btree.\n\t *\n\t * If you have the `pg_vector` extension installed in your database, you can use the `hnsw` and `ivfflat` options, which are predefined types.\n\t *\n\t * **You can always specify any string you want in the method, in case Drizzle doesn't have it natively in its types**\n\t *\n\t * @param method The name of the index method to be used\n\t * @param columns\n\t * @returns\n\t */\n\tusing(\n\t\tmethod: PgIndexMethod,\n\t\t...columns: [Partial<ExtraConfigColumn | SQL>, ...Partial<ExtraConfigColumn | SQL>[]]\n\t): IndexBuilder {\n\t\treturn new IndexBuilder(\n\t\t\tcolumns.map((it) => {\n\t\t\t\tif (is(it, SQL)) {\n\t\t\t\t\treturn it;\n\t\t\t\t}\n\t\t\t\tit = it as ExtraConfigColumn;\n\t\t\t\tconst clonedIndexedColumn = new IndexedColumn(it.name, !!it.keyAsName, it.columnType!, it.indexConfig!);\n\t\t\t\tit.indexConfig = JSON.parse(JSON.stringify(it.defaultConfig));\n\t\t\t\treturn clonedIndexedColumn;\n\t\t\t}),\n\t\t\tthis.unique,\n\t\t\ttrue,\n\t\t\tthis.name,\n\t\t\tmethod,\n\t\t);\n\t}\n}\n\nexport interface AnyIndexBuilder {\n\tbuild(table: PgTable): Index;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IndexBuilder extends AnyIndexBuilder {}\n\nexport class IndexBuilder implements AnyIndexBuilder {\n\tstatic readonly [entityKind]: string = 'PgIndexBuilder';\n\n\t/** @internal */\n\tconfig: IndexConfig;\n\n\tconstructor(\n\t\tcolumns: Partial<IndexedColumn | SQL>[],\n\t\tunique: boolean,\n\t\tonly: boolean,\n\t\tname?: string,\n\t\tmethod: string = 'btree',\n\t) {\n\t\tthis.config = {\n\t\t\tname,\n\t\t\tcolumns,\n\t\t\tunique,\n\t\t\tonly,\n\t\t\tmethod,\n\t\t};\n\t}\n\n\tconcurrently(): this {\n\t\tthis.config.concurrently = true;\n\t\treturn this;\n\t}\n\n\twith(obj: Record<string, any>): this {\n\t\tthis.config.with = obj;\n\t\treturn this;\n\t}\n\n\twhere(condition: SQL): this {\n\t\tthis.config.where = condition;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): Index {\n\t\treturn new Index(this.config, table);\n\t}\n}\n\nexport class Index {\n\tstatic readonly [entityKind]: string = 'PgIndex';\n\n\treadonly config: IndexConfig & { table: PgTable };\n\n\tconstructor(config: IndexConfig, table: PgTable) {\n\t\tthis.config = { ...config, table };\n\t}\n}\n\nexport type GetColumnsTableName<TColumns> = TColumns extends PgColumn ? TColumns['_']['name']\n\t: TColumns extends PgColumn[] ? TColumns[number]['_']['name']\n\t: never;\n\nexport function index(name?: string): IndexBuilderOn {\n\treturn new IndexBuilderOn(false, name);\n}\n\nexport function uniqueIndex(name?: string): IndexBuilderOn {\n\treturn new IndexBuilderOn(true, name);\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6211, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/policies.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { PgRole } from './roles.ts';\nimport type { PgTable } from './table.ts';\n\nexport type PgPolicyToOption =\n\t| 'public'\n\t| 'current_role'\n\t| 'current_user'\n\t| 'session_user'\n\t| (string & {})\n\t| PgPolicyToOption[]\n\t| PgRole;\n\nexport interface PgPolicyConfig {\n\tas?: 'permissive' | 'restrictive';\n\tfor?: 'all' | 'select' | 'insert' | 'update' | 'delete';\n\tto?: PgPolicyToOption;\n\tusing?: SQL;\n\twithCheck?: SQL;\n}\n\nexport class PgPolicy implements PgPolicyConfig {\n\tstatic readonly [entityKind]: string = 'PgPolicy';\n\n\treadonly as: PgPolicyConfig['as'];\n\treadonly for: PgPolicyConfig['for'];\n\treadonly to: PgPolicyConfig['to'];\n\treadonly using: PgPolicyConfig['using'];\n\treadonly withCheck: PgPolicyConfig['withCheck'];\n\n\t/** @internal */\n\t_linkedTable?: PgTable;\n\n\tconstructor(\n\t\treadonly name: string,\n\t\tconfig?: PgPolicyConfig,\n\t) {\n\t\tif (config) {\n\t\t\tthis.as = config.as;\n\t\t\tthis.for = config.for;\n\t\t\tthis.to = config.to;\n\t\t\tthis.using = config.using;\n\t\t\tthis.withCheck = config.withCheck;\n\t\t}\n\t}\n\n\tlink(table: PgTable): this {\n\t\tthis._linkedTable = table;\n\t\treturn this;\n\t}\n}\n\nexport function pgPolicy(name: string, config?: PgPolicyConfig) {\n\treturn new PgPolicy(name, config);\n}\n"],"names":[],"mappings":";;;;AAAA,SAAS,kBAAkB;;AAsBpB,MAAM,SAAmC;IAY/C,YACU,IAAA,EACT,MAAA,CACC;QAFQ,IAAA,CAAA,IAAA,GAAA;QAGT,IAAI,QAAQ;YACX,IAAA,CAAK,EAAA,GAAK,OAAO,EAAA;YACjB,IAAA,CAAK,GAAA,GAAM,OAAO,GAAA;YAClB,IAAA,CAAK,EAAA,GAAK,OAAO,EAAA;YACjB,IAAA,CAAK,KAAA,GAAQ,OAAO,KAAA;YACpB,IAAA,CAAK,SAAA,GAAY,OAAO,SAAA;QACzB;IACD;IAtBA,OAAA,0IAAiB,aAAU,CAAA,GAAY,WAAA;IAE9B,GAAA;IACA,IAAA;IACA,GAAA;IACA,MAAA;IACA,UAAA;IAAA,cAAA,GAGT,aAAA;IAeA,KAAK,KAAA,EAAsB;QAC1B,IAAA,CAAK,YAAA,GAAe;QACpB,OAAO,IAAA;IACR;AACD;AAEO,SAAS,SAAS,IAAA,EAAc,MAAA,EAAyB;IAC/D,OAAO,IAAI,SAAS,MAAM,MAAM;AACjC","debugId":null}},
    {"offset": {"line": 6249, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/primary-keys.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { AnyPgColumn, PgColumn } from './columns/index.ts';\nimport { PgTable } from './table.ts';\n\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumn extends AnyPgColumn<{ tableName: TTableName }>,\n\tTColumns extends AnyPgColumn<{ tableName: TTableName }>[],\n>(config: { name?: string; columns: [TColumn, ...TColumns] }): PrimaryKeyBuilder;\n/**\n * @deprecated: Please use primaryKey({ columns: [] }) instead of this function\n * @param columns\n */\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumns extends AnyPgColumn<{ tableName: TTableName }>[],\n>(...columns: TColumns): PrimaryKeyBuilder;\nexport function primaryKey(...config: any) {\n\tif (config[0].columns) {\n\t\treturn new PrimaryKeyBuilder(config[0].columns, config[0].name);\n\t}\n\treturn new PrimaryKeyBuilder(config);\n}\n\nexport class PrimaryKeyBuilder {\n\tstatic readonly [entityKind]: string = 'PgPrimaryKeyBuilder';\n\n\t/** @internal */\n\tcolumns: PgColumn[];\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tcolumns: PgColumn[],\n\t\tname?: string,\n\t) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): PrimaryKey {\n\t\treturn new PrimaryKey(table, this.columns, this.name);\n\t}\n}\n\nexport class PrimaryKey {\n\tstatic readonly [entityKind]: string = 'PgPrimaryKey';\n\n\treadonly columns: AnyPgColumn<{}>[];\n\treadonly name?: string;\n\n\tconstructor(readonly table: PgTable, columns: AnyPgColumn<{}>[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\tgetName(): string {\n\t\treturn this.name ?? `${this.table[PgTable.Symbol.Name]}_${this.columns.map((column) => column.name).join('_')}_pk`;\n\t}\n}\n"],"names":[],"mappings":";;;;;AAAA,SAAS,kBAAkB;AAE3B,SAAS,eAAe;;;AAejB,SAAS,WAAA,GAAc,MAAA,EAAa;IAC1C,IAAI,MAAA,CAAO,CAAC,CAAA,CAAE,OAAA,EAAS;QACtB,OAAO,IAAI,kBAAkB,MAAA,CAAO,CAAC,CAAA,CAAE,OAAA,EAAS,MAAA,CAAO,CAAC,CAAA,CAAE,IAAI;IAC/D;IACA,OAAO,IAAI,kBAAkB,MAAM;AACpC;AAEO,MAAM,kBAAkB;IAC9B,OAAA,0IAAiB,aAAU,CAAA,GAAY,sBAAA;IAAA,cAAA,GAGvC,QAAA;IAAA,cAAA,GAGA,KAAA;IAEA,YACC,OAAA,EACA,IAAA,CACC;QACD,IAAA,CAAK,OAAA,GAAU;QACf,IAAA,CAAK,IAAA,GAAO;IACb;IAAA,cAAA,GAGA,MAAM,KAAA,EAA4B;QACjC,OAAO,IAAI,WAAW,OAAO,IAAA,CAAK,OAAA,EAAS,IAAA,CAAK,IAAI;IACrD;AACD;AAEO,MAAM,WAAW;IAMvB,YAAqB,KAAA,EAAgB,OAAA,EAA4B,IAAA,CAAe;QAA3D,IAAA,CAAA,KAAA,GAAA;QACpB,IAAA,CAAK,OAAA,GAAU;QACf,IAAA,CAAK,IAAA,GAAO;IACb;IARA,OAAA,0IAAiB,aAAU,CAAA,GAAY,eAAA;IAE9B,QAAA;IACA,KAAA;IAOT,UAAkB;QACjB,OAAO,IAAA,CAAK,IAAA,IAAQ,GAAG,IAAA,CAAK,KAAA,uJAAM,UAAA,CAAQ,MAAA,CAAO,IAAI,CAAC,CAAA,CAAA,EAAI,IAAA,CAAK,OAAA,CAAQ,GAAA,CAAI,CAAC,SAAW,OAAO,IAAI,EAAE,IAAA,CAAK,GAAG,CAAC,CAAA,GAAA,CAAA;IAC9G;AACD","debugId":null}},
    {"offset": {"line": 6295, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/view-common.ts"],"sourcesContent":["export const PgViewConfig = Symbol.for('drizzle:PgViewConfig');\n"],"names":[],"mappings":";;;AAAO,MAAM,eAAe,OAAO,GAAA,CAAI,sBAAsB","debugId":null}},
    {"offset": {"line": 6305, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/casing.ts"],"sourcesContent":["import type { Column } from '~/column.ts';\nimport { entityKind } from './entity.ts';\nimport { Table } from './table.ts';\nimport type { Casing } from './utils.ts';\n\nexport function toSnakeCase(input: string) {\n\tconst words = input\n\t\t.replace(/['\\u2019]/g, '')\n\t\t.match(/[\\da-z]+|[A-Z]+(?![a-z])|[A-Z][\\da-z]+/g) ?? [];\n\n\treturn words.map((word) => word.toLowerCase()).join('_');\n}\n\nexport function toCamelCase(input: string) {\n\tconst words = input\n\t\t.replace(/['\\u2019]/g, '')\n\t\t.match(/[\\da-z]+|[A-Z]+(?![a-z])|[A-Z][\\da-z]+/g) ?? [];\n\n\treturn words.reduce((acc, word, i) => {\n\t\tconst formattedWord = i === 0 ? word.toLowerCase() : `${word[0]!.toUpperCase()}${word.slice(1)}`;\n\t\treturn acc + formattedWord;\n\t}, '');\n}\n\nfunction noopCase(input: string) {\n\treturn input;\n}\n\nexport class CasingCache {\n\tstatic readonly [entityKind]: string = 'CasingCache';\n\n\t/** @internal */\n\tcache: Record<string, string> = {};\n\tprivate cachedTables: Record<string, true> = {};\n\tprivate convert: (input: string) => string;\n\n\tconstructor(casing?: Casing) {\n\t\tthis.convert = casing === 'snake_case'\n\t\t\t? toSnakeCase\n\t\t\t: casing === 'camelCase'\n\t\t\t? toCamelCase\n\t\t\t: noopCase;\n\t}\n\n\tgetColumnCasing(column: Column): string {\n\t\tif (!column.keyAsName) return column.name;\n\n\t\tconst schema = column.table[Table.Symbol.Schema] ?? 'public';\n\t\tconst tableName = column.table[Table.Symbol.OriginalName];\n\t\tconst key = `${schema}.${tableName}.${column.name}`;\n\n\t\tif (!this.cache[key]) {\n\t\t\tthis.cacheTable(column.table);\n\t\t}\n\t\treturn this.cache[key]!;\n\t}\n\n\tprivate cacheTable(table: Table) {\n\t\tconst schema = table[Table.Symbol.Schema] ?? 'public';\n\t\tconst tableName = table[Table.Symbol.OriginalName];\n\t\tconst tableKey = `${schema}.${tableName}`;\n\n\t\tif (!this.cachedTables[tableKey]) {\n\t\t\tfor (const column of Object.values(table[Table.Symbol.Columns])) {\n\t\t\t\tconst columnKey = `${tableKey}.${column.name}`;\n\t\t\t\tthis.cache[columnKey] = this.convert(column.name);\n\t\t\t}\n\t\t\tthis.cachedTables[tableKey] = true;\n\t\t}\n\t}\n\n\tclearCache() {\n\t\tthis.cache = {};\n\t\tthis.cachedTables = {};\n\t}\n}\n"],"names":[],"mappings":";;;;;AACA,SAAS,kBAAkB;AAC3B,SAAS,aAAa;;;AAGf,SAAS,YAAY,KAAA,EAAe;IAC1C,MAAM,QAAQ,MACZ,OAAA,CAAQ,cAAc,EAAE,EACxB,KAAA,CAAM,yCAAyC,KAAK,CAAC,CAAA;IAEvD,OAAO,MAAM,GAAA,CAAI,CAAC,OAAS,KAAK,WAAA,CAAY,CAAC,EAAE,IAAA,CAAK,GAAG;AACxD;AAEO,SAAS,YAAY,KAAA,EAAe;IAC1C,MAAM,QAAQ,MACZ,OAAA,CAAQ,cAAc,EAAE,EACxB,KAAA,CAAM,yCAAyC,KAAK,CAAC,CAAA;IAEvD,OAAO,MAAM,MAAA,CAAO,CAAC,KAAK,MAAM,MAAM;QACrC,MAAM,gBAAgB,MAAM,IAAI,KAAK,WAAA,CAAY,IAAI,GAAG,IAAA,CAAK,CAAC,CAAA,CAAG,WAAA,CAAY,CAAC,GAAG,KAAK,KAAA,CAAM,CAAC,CAAC,EAAA;QAC9F,OAAO,MAAM;IACd,GAAG,EAAE;AACN;AAEA,SAAS,SAAS,KAAA,EAAe;IAChC,OAAO;AACR;AAEO,MAAM,YAAY;IACxB,OAAA,0IAAiB,aAAU,CAAA,GAAY,cAAA;IAAA,cAAA,GAGvC,QAAgC,CAAC,EAAA;IACzB,eAAqC,CAAC,EAAA;IACtC,QAAA;IAER,YAAY,MAAA,CAAiB;QAC5B,IAAA,CAAK,OAAA,GAAU,WAAW,eACvB,cACA,WAAW,cACX,cACA;IACJ;IAEA,gBAAgB,MAAA,EAAwB;QACvC,IAAI,CAAC,OAAO,SAAA,CAAW,CAAA,OAAO,OAAO,IAAA;QAErC,MAAM,SAAS,OAAO,KAAA,yIAAM,QAAA,CAAM,MAAA,CAAO,MAAM,CAAA,IAAK;QACpD,MAAM,YAAY,OAAO,KAAA,yIAAM,QAAA,CAAM,MAAA,CAAO,YAAY,CAAA;QACxD,MAAM,MAAM,GAAG,MAAM,CAAA,CAAA,EAAI,SAAS,CAAA,CAAA,EAAI,OAAO,IAAI,EAAA;QAEjD,IAAI,CAAC,IAAA,CAAK,KAAA,CAAM,GAAG,CAAA,EAAG;YACrB,IAAA,CAAK,UAAA,CAAW,OAAO,KAAK;QAC7B;QACA,OAAO,IAAA,CAAK,KAAA,CAAM,GAAG,CAAA;IACtB;IAEQ,WAAW,KAAA,EAAc;QAChC,MAAM,SAAS,KAAA,yIAAM,QAAA,CAAM,MAAA,CAAO,MAAM,CAAA,IAAK;QAC7C,MAAM,YAAY,KAAA,yIAAM,QAAA,CAAM,MAAA,CAAO,YAAY,CAAA;QACjD,MAAM,WAAW,GAAG,MAAM,CAAA,CAAA,EAAI,SAAS,EAAA;QAEvC,IAAI,CAAC,IAAA,CAAK,YAAA,CAAa,QAAQ,CAAA,EAAG;YACjC,KAAA,MAAW,UAAU,OAAO,MAAA,CAAO,KAAA,yIAAM,QAAA,CAAM,MAAA,CAAO,OAAO,CAAC,EAAG;gBAChE,MAAM,YAAY,GAAG,QAAQ,CAAA,CAAA,EAAI,OAAO,IAAI,EAAA;gBAC5C,IAAA,CAAK,KAAA,CAAM,SAAS,CAAA,GAAI,IAAA,CAAK,OAAA,CAAQ,OAAO,IAAI;YACjD;YACA,IAAA,CAAK,YAAA,CAAa,QAAQ,CAAA,GAAI;QAC/B;IACD;IAEA,aAAa;QACZ,IAAA,CAAK,KAAA,GAAQ,CAAC;QACd,IAAA,CAAK,YAAA,GAAe,CAAC;IACtB;AACD","debugId":null}},
    {"offset": {"line": 6369, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/errors.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\n\nexport class DrizzleError extends Error {\n\tstatic readonly [entityKind]: string = 'DrizzleError';\n\n\tconstructor({ message, cause }: { message?: string; cause?: unknown }) {\n\t\tsuper(message);\n\t\tthis.name = 'DrizzleError';\n\t\tthis.cause = cause;\n\t}\n}\n\nexport class DrizzleQueryError extends Error {\n\tconstructor(\n\t\tpublic query: string,\n\t\tpublic params: any[],\n\t\tpublic override cause?: Error,\n\t) {\n\t\tsuper(`Failed query: ${query}\\nparams: ${params}`);\n\t\tError.captureStackTrace(this, DrizzleQueryError);\n\n\t\t// ES2022+: preserves original error on `.cause`\n\t\tif (cause) (this as any).cause = cause;\n\t}\n}\n\nexport class TransactionRollbackError extends DrizzleError {\n\tstatic override readonly [entityKind]: string = 'TransactionRollbackError';\n\n\tconstructor() {\n\t\tsuper({ message: 'Rollback' });\n\t}\n}\n"],"names":[],"mappings":";;;;;AAAA,SAAS,kBAAkB;;AAEpB,MAAM,qBAAqB,MAAM;IACvC,OAAA,0IAAiB,aAAU,CAAA,GAAY,eAAA;IAEvC,YAAY,EAAE,OAAA,EAAS,KAAA,CAAM,CAAA,CAA0C;QACtE,KAAA,CAAM,OAAO;QACb,IAAA,CAAK,IAAA,GAAO;QACZ,IAAA,CAAK,KAAA,GAAQ;IACd;AACD;AAEO,MAAM,0BAA0B,MAAM;IAC5C,YACQ,KAAA,EACA,MAAA,EACS,KAAA,CACf;QACD,KAAA,CAAM,CAAA,cAAA,EAAiB,KAAK,CAAA;QAAA,EAAa,MAAM,EAAE;QAJ1C,IAAA,CAAA,KAAA,GAAA;QACA,IAAA,CAAA,MAAA,GAAA;QACS,IAAA,CAAA,KAAA,GAAA;QAGhB,MAAM,iBAAA,CAAkB,IAAA,EAAM,iBAAiB;QAG/C,IAAI,MAAO,CAAC,IAAA,CAAa,KAAA,GAAQ;IAClC;AACD;AAEO,MAAM,iCAAiC,aAAa;IAC1D,OAAA,0IAA0B,aAAU,CAAA,GAAY,2BAAA;IAEhD,aAAc;QACb,KAAA,CAAM;YAAE,SAAS;QAAW,CAAC;IAC9B;AACD","debugId":null}},
    {"offset": {"line": 6409, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/sql/expressions/conditions.ts"],"sourcesContent":["import { type AnyColumn, Column, type GetColumnData } from '~/column.ts';\nimport { is } from '~/entity.ts';\nimport { Table } from '~/table.ts';\nimport {\n\tisDriverValueEncoder,\n\tisSQLWrapper,\n\tParam,\n\tPlaceholder,\n\tSQL,\n\tsql,\n\ttype SQLChunk,\n\ttype SQLWrapper,\n\tStringChunk,\n\tView,\n} from '../sql.ts';\n\nexport function bindIfParam(value: unknown, column: SQLWrapper): SQLChunk {\n\tif (\n\t\tisDriverValueEncoder(column)\n\t\t&& !isSQLWrapper(value)\n\t\t&& !is(value, Param)\n\t\t&& !is(value, Placeholder)\n\t\t&& !is(value, Column)\n\t\t&& !is(value, Table)\n\t\t&& !is(value, View)\n\t) {\n\t\treturn new Param(value, column);\n\t}\n\treturn value as SQLChunk;\n}\n\nexport interface BinaryOperator {\n\t<TColumn extends Column>(\n\t\tleft: TColumn,\n\t\tright: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\t): SQL;\n\t<T>(left: SQL.Aliased<T>, right: T | SQLWrapper): SQL;\n\t<T extends SQLWrapper>(\n\t\tleft: Exclude<T, SQL.Aliased | Column>,\n\t\tright: unknown,\n\t): SQL;\n}\n\n/**\n * Test that two values are equal.\n *\n * Remember that the SQL standard dictates that\n * two NULL values are not equal, so if you want to test\n * whether a value is null, you may want to use\n * `isNull` instead.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by Ford\n * db.select().from(cars)\n *   .where(eq(cars.make, 'Ford'))\n * ```\n *\n * @see isNull for a way to test equality to NULL.\n */\nexport const eq: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} = ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that two values are not equal.\n *\n * Remember that the SQL standard dictates that\n * two NULL values are not equal, so if you want to test\n * whether a value is not null, you may want to use\n * `isNotNull` instead.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars not made by Ford\n * db.select().from(cars)\n *   .where(ne(cars.make, 'Ford'))\n * ```\n *\n * @see isNotNull for a way to test whether a value is not null.\n */\nexport const ne: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} <> ${bindIfParam(right, left)}`;\n};\n\n/**\n * Combine a list of conditions with the `and` operator. Conditions\n * that are equal `undefined` are automatically ignored.\n *\n * ## Examples\n *\n * ```ts\n * db.select().from(cars)\n *   .where(\n *     and(\n *       eq(cars.make, 'Volvo'),\n *       eq(cars.year, 1950),\n *     )\n *   )\n * ```\n */\nexport function and(...conditions: (SQLWrapper | undefined)[]): SQL | undefined;\nexport function and(\n\t...unfilteredConditions: (SQLWrapper | undefined)[]\n): SQL | undefined {\n\tconst conditions = unfilteredConditions.filter(\n\t\t(c): c is Exclude<typeof c, undefined> => c !== undefined,\n\t);\n\n\tif (conditions.length === 0) {\n\t\treturn undefined;\n\t}\n\n\tif (conditions.length === 1) {\n\t\treturn new SQL(conditions);\n\t}\n\n\treturn new SQL([\n\t\tnew StringChunk('('),\n\t\tsql.join(conditions, new StringChunk(' and ')),\n\t\tnew StringChunk(')'),\n\t]);\n}\n\n/**\n * Combine a list of conditions with the `or` operator. Conditions\n * that are equal `undefined` are automatically ignored.\n *\n * ## Examples\n *\n * ```ts\n * db.select().from(cars)\n *   .where(\n *     or(\n *       eq(cars.make, 'GM'),\n *       eq(cars.make, 'Ford'),\n *     )\n *   )\n * ```\n */\nexport function or(...conditions: (SQLWrapper | undefined)[]): SQL | undefined;\nexport function or(\n\t...unfilteredConditions: (SQLWrapper | undefined)[]\n): SQL | undefined {\n\tconst conditions = unfilteredConditions.filter(\n\t\t(c): c is Exclude<typeof c, undefined> => c !== undefined,\n\t);\n\n\tif (conditions.length === 0) {\n\t\treturn undefined;\n\t}\n\n\tif (conditions.length === 1) {\n\t\treturn new SQL(conditions);\n\t}\n\n\treturn new SQL([\n\t\tnew StringChunk('('),\n\t\tsql.join(conditions, new StringChunk(' or ')),\n\t\tnew StringChunk(')'),\n\t]);\n}\n\n/**\n * Negate the meaning of an expression using the `not` keyword.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars _not_ made by GM or Ford.\n * db.select().from(cars)\n *   .where(not(inArray(cars.make, ['GM', 'Ford'])))\n * ```\n */\nexport function not(condition: SQLWrapper): SQL {\n\treturn sql`not ${condition}`;\n}\n\n/**\n * Test that the first expression passed is greater than\n * the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made after 2000.\n * db.select().from(cars)\n *   .where(gt(cars.year, 2000))\n * ```\n *\n * @see gte for greater-than-or-equal\n */\nexport const gt: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} > ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is greater than\n * or equal to the second expression. Use `gt` to\n * test whether an expression is strictly greater\n * than another.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made on or after 2000.\n * db.select().from(cars)\n *   .where(gte(cars.year, 2000))\n * ```\n *\n * @see gt for a strictly greater-than condition\n */\nexport const gte: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} >= ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is less than\n * the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made before 2000.\n * db.select().from(cars)\n *   .where(lt(cars.year, 2000))\n * ```\n *\n * @see lte for less-than-or-equal\n */\nexport const lt: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} < ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is less than\n * or equal to the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made before 2000.\n * db.select().from(cars)\n *   .where(lte(cars.year, 2000))\n * ```\n *\n * @see lt for a strictly less-than condition\n */\nexport const lte: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} <= ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test whether the first parameter, a column or expression,\n * has a value from a list passed as the second argument.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by Ford or GM.\n * db.select().from(cars)\n *   .where(inArray(cars.make, ['Ford', 'GM']))\n * ```\n *\n * @see notInArray for the inverse of this test\n */\nexport function inArray<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function inArray<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: ReadonlyArray<GetColumnData<TColumn, 'raw'> | Placeholder> | SQLWrapper,\n): SQL;\nexport function inArray<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: ReadonlyArray<unknown | Placeholder> | SQLWrapper,\n): SQL;\nexport function inArray(\n\tcolumn: SQLWrapper,\n\tvalues: ReadonlyArray<unknown | Placeholder> | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\treturn sql`false`;\n\t\t}\n\t\treturn sql`${column} in ${values.map((v) => bindIfParam(v, column))}`;\n\t}\n\n\treturn sql`${column} in ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test whether the first parameter, a column or expression,\n * has a value that is not present in a list passed as the\n * second argument.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by any company except Ford or GM.\n * db.select().from(cars)\n *   .where(notInArray(cars.make, ['Ford', 'GM']))\n * ```\n *\n * @see inArray for the inverse of this test\n */\nexport function notInArray<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\treturn sql`true`;\n\t\t}\n\t\treturn sql`${column} not in ${values.map((v) => bindIfParam(v, column))}`;\n\t}\n\n\treturn sql`${column} not in ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test whether an expression is NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have no discontinuedAt date.\n * db.select().from(cars)\n *   .where(isNull(cars.discontinuedAt))\n * ```\n *\n * @see isNotNull for the inverse of this test\n */\nexport function isNull(value: SQLWrapper): SQL {\n\treturn sql`${value} is null`;\n}\n\n/**\n * Test whether an expression is not NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have been discontinued.\n * db.select().from(cars)\n *   .where(isNotNull(cars.discontinuedAt))\n * ```\n *\n * @see isNull for the inverse of this test\n */\nexport function isNotNull(value: SQLWrapper): SQL {\n\treturn sql`${value} is not null`;\n}\n\n/**\n * Test whether a subquery evaluates to have any rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column has a match in a cities\n * // table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     exists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see notExists for the inverse of this test\n */\nexport function exists(subquery: SQLWrapper): SQL {\n\treturn sql`exists ${subquery}`;\n}\n\n/**\n * Test whether a subquery doesn't include any result\n * rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column doesn't match\n * // a row in the cities table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     notExists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see exists for the inverse of this test\n */\nexport function notExists(subquery: SQLWrapper): SQL {\n\treturn sql`not exists ${subquery}`;\n}\n\n/**\n * Test whether an expression is between two values. This\n * is an easier way to express range tests, which would be\n * expressed mathematically as `x <= a <= y` but in SQL\n * would have to be like `a >= x AND a <= y`.\n *\n * Between is inclusive of the endpoints: if `column`\n * is equal to `min` or `max`, it will be TRUE.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made between 1990 and 2000\n * db.select().from(cars)\n *   .where(between(cars.year, 1990, 2000))\n * ```\n *\n * @see notBetween for the inverse of this test\n */\nexport function between<T>(\n\tcolumn: SQL.Aliased,\n\tmin: T | SQLWrapper,\n\tmax: T | SQLWrapper,\n): SQL;\nexport function between<TColumn extends AnyColumn>(\n\tcolumn: TColumn,\n\tmin: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\tmax: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n): SQL;\nexport function between<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tmin: unknown,\n\tmax: unknown,\n): SQL;\nexport function between(column: SQLWrapper, min: unknown, max: unknown): SQL {\n\treturn sql`${column} between ${bindIfParam(min, column)} and ${\n\t\tbindIfParam(\n\t\t\tmax,\n\t\t\tcolumn,\n\t\t)\n\t}`;\n}\n\n/**\n * Test whether an expression is not between two values.\n *\n * This, like `between`, includes its endpoints, so if\n * the `column` is equal to `min` or `max`, in this case\n * it will evaluate to FALSE.\n *\n * ## Examples\n *\n * ```ts\n * // Exclude cars made in the 1970s\n * db.select().from(cars)\n *   .where(notBetween(cars.year, 1970, 1979))\n * ```\n *\n * @see between for the inverse of this test\n */\nexport function notBetween<T>(\n\tcolumn: SQL.Aliased,\n\tmin: T | SQLWrapper,\n\tmax: T | SQLWrapper,\n): SQL;\nexport function notBetween<TColumn extends AnyColumn>(\n\tcolumn: TColumn,\n\tmin: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\tmax: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n): SQL;\nexport function notBetween<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tmin: unknown,\n\tmax: unknown,\n): SQL;\nexport function notBetween(\n\tcolumn: SQLWrapper,\n\tmin: unknown,\n\tmax: unknown,\n): SQL {\n\treturn sql`${column} not between ${\n\t\tbindIfParam(\n\t\t\tmin,\n\t\t\tcolumn,\n\t\t)\n\t} and ${bindIfParam(max, column)}`;\n}\n\n/**\n * Compare a column to a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(like(cars.name, '%Turbo%'))\n * ```\n *\n * @see ilike for a case-insensitive version of this condition\n */\nexport function like(column: Column | SQL.Aliased | SQL, value: string | SQLWrapper): SQL {\n\treturn sql`${column} like ${value}`;\n}\n\n/**\n * The inverse of like - this tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"ROver\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see like for the inverse condition\n * @see notIlike for a case-insensitive version of this condition\n */\nexport function notLike(column: Column | SQL.Aliased | SQL, value: string | SQLWrapper): SQL {\n\treturn sql`${column} not like ${value}`;\n}\n\n/**\n * Case-insensitively compare a column to a pattern,\n * which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * Unlike like, this performs a case-insensitive comparison.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(ilike(cars.name, '%Turbo%'))\n * ```\n *\n * @see like for a case-sensitive version of this condition\n */\nexport function ilike(column: Column | SQL.Aliased | SQL, value: string | SQLWrapper): SQL {\n\treturn sql`${column} ilike ${value}`;\n}\n\n/**\n * The inverse of ilike - this case-insensitively tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"Rover\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see ilike for the inverse condition\n * @see notLike for a case-sensitive version of this condition\n */\nexport function notIlike(column: Column | SQL.Aliased | SQL, value: string | SQLWrapper): SQL {\n\treturn sql`${column} not ilike ${value}`;\n}\n\n/**\n * Test that a column or expression contains all elements of\n * the list passed as the second argument.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\" and \"ORM\".\n * db.select().from(posts)\n *   .where(arrayContains(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContained to find if an array contains all elements of a column or expression\n * @see arrayOverlaps to find if a column or expression contains any elements of an array\n */\nexport function arrayContains<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContains<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContains<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayContains(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayContains requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} @> ${array}`;\n\t}\n\n\treturn sql`${column} @> ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test that the list passed as the second argument contains\n * all elements of a column or expression.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\", \"ORM\" or both,\n * // but filtering posts that have additional tags.\n * db.select().from(posts)\n *   .where(arrayContained(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContains to find if a column or expression contains all elements of an array\n * @see arrayOverlaps to find if a column or expression contains any elements of an array\n */\nexport function arrayContained<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContained<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContained<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayContained(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayContained requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} <@ ${array}`;\n\t}\n\n\treturn sql`${column} <@ ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test that a column or expression contains any elements of\n * the list passed as the second argument.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\", \"ORM\" or both.\n * db.select().from(posts)\n *   .where(arrayOverlaps(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContains to find if a column or expression contains all elements of an array\n * @see arrayContained to find if an array contains all elements of a column or expression\n */\nexport function arrayOverlaps<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayOverlaps<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayOverlaps<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayOverlaps(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayOverlaps requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} && ${array}`;\n\t}\n\n\treturn sql`${column} && ${bindIfParam(values, column)}`;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6583, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/sql/expressions/select.ts"],"sourcesContent":["import type { AnyColumn } from '../../column.ts';\nimport type { SQL, SQLWrapper } from '../sql.ts';\nimport { sql } from '../sql.ts';\n\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in ascending\n * order. By the SQL standard, ascending order is the\n * default, so it is not usually necessary to specify\n * ascending sort order.\n *\n * ## Examples\n *\n * ```ts\n * // Return cars, starting with the oldest models\n * // and going in ascending order to the newest.\n * db.select().from(cars)\n *   .orderBy(asc(cars.year));\n * ```\n *\n * @see desc to sort in descending order\n */\nexport function asc(column: AnyColumn | SQLWrapper): SQL {\n\treturn sql`${column} asc`;\n}\n\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in descending\n * order.\n *\n * ## Examples\n *\n * ```ts\n * // Select users, with the most recently created\n * // records coming first.\n * db.select().from(users)\n *   .orderBy(desc(users.createdAt));\n * ```\n *\n * @see asc to sort in ascending order\n */\nexport function desc(column: AnyColumn | SQLWrapper): SQL {\n\treturn sql`${column} desc`;\n}\n"],"names":[],"mappings":";;;;AAEA,SAAS,WAAW;;AAoBb,SAAS,IAAI,MAAA,EAAqC;IACxD,oJAAO,MAAA,CAAA,EAAM,MAAM,CAAA,IAAA,CAAA;AACpB;AAkBO,SAAS,KAAK,MAAA,EAAqC;IACzD,oJAAO,MAAA,CAAA,EAAM,MAAM,CAAA,KAAA,CAAA;AACpB","debugId":null}},
    {"offset": {"line": 6601, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/relations.ts"],"sourcesContent":["import { type AnyTable, getTableUniqueName, type InferModelFromColumns, Table } from '~/table.ts';\nimport { type AnyColumn, Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport { PrimaryKeyBuilder } from './pg-core/primary-keys.ts';\nimport {\n\tand,\n\tasc,\n\tbetween,\n\tdesc,\n\teq,\n\texists,\n\tgt,\n\tgte,\n\tilike,\n\tinArray,\n\tisNotNull,\n\tisNull,\n\tlike,\n\tlt,\n\tlte,\n\tne,\n\tnot,\n\tnotBetween,\n\tnotExists,\n\tnotIlike,\n\tnotInArray,\n\tnotLike,\n\tor,\n} from './sql/expressions/index.ts';\nimport { type Placeholder, SQL, sql } from './sql/sql.ts';\nimport type { Assume, ColumnsWithTable, Equal, Simplify, ValueOrArray } from './utils.ts';\n\nexport abstract class Relation<TTableName extends string = string> {\n\tstatic readonly [entityKind]: string = 'Relation';\n\n\tdeclare readonly $brand: 'Relation';\n\treadonly referencedTableName: TTableName;\n\tfieldName!: string;\n\n\tconstructor(\n\t\treadonly sourceTable: Table,\n\t\treadonly referencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly relationName: string | undefined,\n\t) {\n\t\tthis.referencedTableName = referencedTable[Table.Symbol.Name] as TTableName;\n\t}\n\n\tabstract withFieldName(fieldName: string): Relation<TTableName>;\n}\n\nexport class Relations<\n\tTTableName extends string = string,\n\tTConfig extends Record<string, Relation> = Record<string, Relation>,\n> {\n\tstatic readonly [entityKind]: string = 'Relations';\n\n\tdeclare readonly $brand: 'Relations';\n\n\tconstructor(\n\t\treadonly table: AnyTable<{ name: TTableName }>,\n\t\treadonly config: (helpers: TableRelationsHelpers<TTableName>) => TConfig,\n\t) {}\n}\n\nexport class One<\n\tTTableName extends string = string,\n\tTIsNullable extends boolean = boolean,\n> extends Relation<TTableName> {\n\tstatic override readonly [entityKind]: string = 'One';\n\n\tdeclare protected $relationBrand: 'One';\n\n\tconstructor(\n\t\tsourceTable: Table,\n\t\treferencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly config:\n\t\t\t| RelationConfig<\n\t\t\t\tTTableName,\n\t\t\t\tstring,\n\t\t\t\tAnyColumn<{ tableName: TTableName }>[]\n\t\t\t>\n\t\t\t| undefined,\n\t\treadonly isNullable: TIsNullable,\n\t) {\n\t\tsuper(sourceTable, referencedTable, config?.relationName);\n\t}\n\n\twithFieldName(fieldName: string): One<TTableName> {\n\t\tconst relation = new One(\n\t\t\tthis.sourceTable,\n\t\t\tthis.referencedTable,\n\t\t\tthis.config,\n\t\t\tthis.isNullable,\n\t\t);\n\t\trelation.fieldName = fieldName;\n\t\treturn relation;\n\t}\n}\n\nexport class Many<TTableName extends string> extends Relation<TTableName> {\n\tstatic override readonly [entityKind]: string = 'Many';\n\n\tdeclare protected $relationBrand: 'Many';\n\n\tconstructor(\n\t\tsourceTable: Table,\n\t\treferencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly config: { relationName: string } | undefined,\n\t) {\n\t\tsuper(sourceTable, referencedTable, config?.relationName);\n\t}\n\n\twithFieldName(fieldName: string): Many<TTableName> {\n\t\tconst relation = new Many(\n\t\t\tthis.sourceTable,\n\t\t\tthis.referencedTable,\n\t\t\tthis.config,\n\t\t);\n\t\trelation.fieldName = fieldName;\n\t\treturn relation;\n\t}\n}\n\nexport type TableRelationsKeysOnly<\n\tTSchema extends Record<string, unknown>,\n\tTTableName extends string,\n\tK extends keyof TSchema,\n> = TSchema[K] extends Relations<TTableName> ? K : never;\n\nexport type ExtractTableRelationsFromSchema<\n\tTSchema extends Record<string, unknown>,\n\tTTableName extends string,\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TSchema as TableRelationsKeysOnly<\n\t\t\t\tTSchema,\n\t\t\t\tTTableName,\n\t\t\t\tK\n\t\t\t>\n\t\t]: TSchema[K] extends Relations<TTableName, infer TConfig> ? TConfig : never;\n\t}\n>;\n\nexport type ExtractObjectValues<T> = T[keyof T];\n\nexport type ExtractRelationsFromTableExtraConfigSchema<\n\tTConfig extends unknown[],\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TConfig as TConfig[K] extends Relations<any> ? K\n\t\t\t\t: never\n\t\t]: TConfig[K] extends Relations<infer TRelationConfig> ? TRelationConfig\n\t\t\t: never;\n\t}\n>;\n\nexport function getOperators() {\n\treturn {\n\t\tand,\n\t\tbetween,\n\t\teq,\n\t\texists,\n\t\tgt,\n\t\tgte,\n\t\tilike,\n\t\tinArray,\n\t\tisNull,\n\t\tisNotNull,\n\t\tlike,\n\t\tlt,\n\t\tlte,\n\t\tne,\n\t\tnot,\n\t\tnotBetween,\n\t\tnotExists,\n\t\tnotLike,\n\t\tnotIlike,\n\t\tnotInArray,\n\t\tor,\n\t\tsql,\n\t};\n}\n\nexport type Operators = ReturnType<typeof getOperators>;\n\nexport function getOrderByOperators() {\n\treturn {\n\t\tsql,\n\t\tasc,\n\t\tdesc,\n\t};\n}\n\nexport type OrderByOperators = ReturnType<typeof getOrderByOperators>;\n\nexport type FindTableByDBName<\n\tTSchema extends TablesRelationalConfig,\n\tTTableName extends string,\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TSchema as TSchema[K]['dbName'] extends TTableName ? K\n\t\t\t\t: never\n\t\t]: TSchema[K];\n\t}\n>;\n\nexport type DBQueryConfig<\n\tTRelationType extends 'one' | 'many' = 'one' | 'many',\n\tTIsRoot extends boolean = boolean,\n\tTSchema extends TablesRelationalConfig = TablesRelationalConfig,\n\tTTableConfig extends TableRelationalConfig = TableRelationalConfig,\n> =\n\t& {\n\t\tcolumns?:\n\t\t\t| {\n\t\t\t\t[K in keyof TTableConfig['columns']]?: boolean;\n\t\t\t}\n\t\t\t| undefined;\n\t\twith?:\n\t\t\t| {\n\t\t\t\t[K in keyof TTableConfig['relations']]?:\n\t\t\t\t\t| true\n\t\t\t\t\t| DBQueryConfig<\n\t\t\t\t\t\tTTableConfig['relations'][K] extends One ? 'one' : 'many',\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tTSchema,\n\t\t\t\t\t\tFindTableByDBName<\n\t\t\t\t\t\t\tTSchema,\n\t\t\t\t\t\t\tTTableConfig['relations'][K]['referencedTableName']\n\t\t\t\t\t\t>\n\t\t\t\t\t>\n\t\t\t\t\t| undefined;\n\t\t\t}\n\t\t\t| undefined;\n\t\textras?:\n\t\t\t| Record<string, SQL.Aliased>\n\t\t\t| ((\n\t\t\t\tfields: Simplify<\n\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t>,\n\t\t\t\toperators: { sql: Operators['sql'] },\n\t\t\t) => Record<string, SQL.Aliased>)\n\t\t\t| undefined;\n\t}\n\t& (TRelationType extends 'many' ?\n\t\t\t& {\n\t\t\t\twhere?:\n\t\t\t\t\t| SQL\n\t\t\t\t\t| undefined\n\t\t\t\t\t| ((\n\t\t\t\t\t\tfields: Simplify<\n\t\t\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t\t\t>,\n\t\t\t\t\t\toperators: Operators,\n\t\t\t\t\t) => SQL | undefined);\n\t\t\t\torderBy?:\n\t\t\t\t\t| ValueOrArray<AnyColumn | SQL>\n\t\t\t\t\t| ((\n\t\t\t\t\t\tfields: Simplify<\n\t\t\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t\t\t>,\n\t\t\t\t\t\toperators: OrderByOperators,\n\t\t\t\t\t) => ValueOrArray<AnyColumn | SQL>)\n\t\t\t\t\t| undefined;\n\t\t\t\tlimit?: number | Placeholder | undefined;\n\t\t\t}\n\t\t\t& (TIsRoot extends true ? {\n\t\t\t\t\toffset?: number | Placeholder | undefined;\n\t\t\t\t}\n\t\t\t\t: {})\n\t\t: {});\n\nexport interface TableRelationalConfig {\n\ttsName: string;\n\tdbName: string;\n\tcolumns: Record<string, Column>;\n\trelations: Record<string, Relation>;\n\tprimaryKey: AnyColumn[];\n\tschema?: string;\n}\n\nexport type TablesRelationalConfig = Record<string, TableRelationalConfig>;\n\nexport interface RelationalSchemaConfig<\n\tTSchema extends TablesRelationalConfig,\n> {\n\tfullSchema: Record<string, unknown>;\n\tschema: TSchema;\n\ttableNamesMap: Record<string, string>;\n}\n\nexport type ExtractTablesWithRelations<\n\tTSchema extends Record<string, unknown>,\n> = {\n\t[\n\t\tK in keyof TSchema as TSchema[K] extends Table ? K\n\t\t\t: never\n\t]: TSchema[K] extends Table ? {\n\t\t\ttsName: K & string;\n\t\t\tdbName: TSchema[K]['_']['name'];\n\t\t\tcolumns: TSchema[K]['_']['columns'];\n\t\t\trelations: ExtractTableRelationsFromSchema<\n\t\t\t\tTSchema,\n\t\t\t\tTSchema[K]['_']['name']\n\t\t\t>;\n\t\t\tprimaryKey: AnyColumn[];\n\t\t}\n\t\t: never;\n};\n\nexport type ReturnTypeOrValue<T> = T extends (...args: any[]) => infer R ? R\n\t: T;\n\nexport type BuildRelationResult<\n\tTSchema extends TablesRelationalConfig,\n\tTInclude,\n\tTRelations extends Record<string, Relation>,\n> = {\n\t[\n\t\tK in\n\t\t\t& NonUndefinedKeysOnly<TInclude>\n\t\t\t& keyof TRelations\n\t]: TRelations[K] extends infer TRel extends Relation ? BuildQueryResult<\n\t\t\tTSchema,\n\t\t\tFindTableByDBName<TSchema, TRel['referencedTableName']>,\n\t\t\tAssume<TInclude[K], true | Record<string, unknown>>\n\t\t> extends infer TResult ? TRel extends One ?\n\t\t\t\t\t| TResult\n\t\t\t\t\t| (Equal<TRel['isNullable'], false> extends true ? null : never)\n\t\t\t: TResult[]\n\t\t: never\n\t\t: never;\n};\n\nexport type NonUndefinedKeysOnly<T> =\n\t& ExtractObjectValues<\n\t\t{\n\t\t\t[K in keyof T as T[K] extends undefined ? never : K]: K;\n\t\t}\n\t>\n\t& keyof T;\n\nexport type BuildQueryResult<\n\tTSchema extends TablesRelationalConfig,\n\tTTableConfig extends TableRelationalConfig,\n\tTFullSelection extends true | Record<string, unknown>,\n> = Equal<TFullSelection, true> extends true ? InferModelFromColumns<TTableConfig['columns']>\n\t: TFullSelection extends Record<string, unknown> ? Simplify<\n\t\t\t& (TFullSelection['columns'] extends Record<string, unknown> ? InferModelFromColumns<\n\t\t\t\t\t{\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tK in Equal<\n\t\t\t\t\t\t\t\tExclude<\n\t\t\t\t\t\t\t\t\tTFullSelection['columns'][\n\t\t\t\t\t\t\t\t\t\t& keyof TFullSelection['columns']\n\t\t\t\t\t\t\t\t\t\t& keyof TTableConfig['columns']\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tundefined\n\t\t\t\t\t\t\t\t>,\n\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t\t> extends true ? Exclude<\n\t\t\t\t\t\t\t\t\tkeyof TTableConfig['columns'],\n\t\t\t\t\t\t\t\t\tNonUndefinedKeysOnly<TFullSelection['columns']>\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t& {\n\t\t\t\t\t\t\t\t\t\t[K in keyof TFullSelection['columns']]: Equal<\n\t\t\t\t\t\t\t\t\t\t\tTFullSelection['columns'][K],\n\t\t\t\t\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t\t\t\t\t> extends true ? K\n\t\t\t\t\t\t\t\t\t\t\t: never;\n\t\t\t\t\t\t\t\t\t}[keyof TFullSelection['columns']]\n\t\t\t\t\t\t\t\t\t& keyof TTableConfig['columns']\n\t\t\t\t\t\t]: TTableConfig['columns'][K];\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t: InferModelFromColumns<TTableConfig['columns']>)\n\t\t\t& (TFullSelection['extras'] extends\n\t\t\t\t| Record<string, unknown>\n\t\t\t\t| ((...args: any[]) => Record<string, unknown>) ? {\n\t\t\t\t\t[\n\t\t\t\t\t\tK in NonUndefinedKeysOnly<\n\t\t\t\t\t\t\tReturnTypeOrValue<TFullSelection['extras']>\n\t\t\t\t\t\t>\n\t\t\t\t\t]: Assume<\n\t\t\t\t\t\tReturnTypeOrValue<TFullSelection['extras']>[K],\n\t\t\t\t\t\tSQL.Aliased\n\t\t\t\t\t>['_']['type'];\n\t\t\t\t}\n\t\t\t\t: {})\n\t\t\t& (TFullSelection['with'] extends Record<string, unknown> ? BuildRelationResult<\n\t\t\t\t\tTSchema,\n\t\t\t\t\tTFullSelection['with'],\n\t\t\t\t\tTTableConfig['relations']\n\t\t\t\t>\n\t\t\t\t: {})\n\t\t>\n\t: never;\n\nexport interface RelationConfig<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends AnyColumn<{ tableName: TTableName }>[],\n> {\n\trelationName?: string;\n\tfields: TColumns;\n\treferences: ColumnsWithTable<TTableName, TForeignTableName, TColumns>;\n}\n\nexport function extractTablesRelationalConfig<\n\tTTables extends TablesRelationalConfig,\n>(\n\tschema: Record<string, unknown>,\n\tconfigHelpers: (table: Table) => any,\n): { tables: TTables; tableNamesMap: Record<string, string> } {\n\tif (\n\t\tObject.keys(schema).length === 1\n\t\t&& 'default' in schema\n\t\t&& !is(schema['default'], Table)\n\t) {\n\t\tschema = schema['default'] as Record<string, unknown>;\n\t}\n\n\t// table DB name -> schema table key\n\tconst tableNamesMap: Record<string, string> = {};\n\t// Table relations found before their tables - need to buffer them until we know the schema table key\n\tconst relationsBuffer: Record<\n\t\tstring,\n\t\t{ relations: Record<string, Relation>; primaryKey?: AnyColumn[] }\n\t> = {};\n\tconst tablesConfig: TablesRelationalConfig = {};\n\tfor (const [key, value] of Object.entries(schema)) {\n\t\tif (is(value, Table)) {\n\t\t\tconst dbName = getTableUniqueName(value);\n\t\t\tconst bufferedRelations = relationsBuffer[dbName];\n\t\t\ttableNamesMap[dbName] = key;\n\t\t\ttablesConfig[key] = {\n\t\t\t\ttsName: key,\n\t\t\t\tdbName: value[Table.Symbol.Name],\n\t\t\t\tschema: value[Table.Symbol.Schema],\n\t\t\t\tcolumns: value[Table.Symbol.Columns],\n\t\t\t\trelations: bufferedRelations?.relations ?? {},\n\t\t\t\tprimaryKey: bufferedRelations?.primaryKey ?? [],\n\t\t\t};\n\n\t\t\t// Fill in primary keys\n\t\t\tfor (\n\t\t\t\tconst column of Object.values(\n\t\t\t\t\t(value as Table)[Table.Symbol.Columns],\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tif (column.primary) {\n\t\t\t\t\ttablesConfig[key]!.primaryKey.push(column);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst extraConfig = value[Table.Symbol.ExtraConfigBuilder]?.((value as Table)[Table.Symbol.ExtraConfigColumns]);\n\t\t\tif (extraConfig) {\n\t\t\t\tfor (const configEntry of Object.values(extraConfig)) {\n\t\t\t\t\tif (is(configEntry, PrimaryKeyBuilder)) {\n\t\t\t\t\t\ttablesConfig[key]!.primaryKey.push(...configEntry.columns);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (is(value, Relations)) {\n\t\t\tconst dbName = getTableUniqueName(value.table);\n\t\t\tconst tableName = tableNamesMap[dbName];\n\t\t\tconst relations: Record<string, Relation> = value.config(\n\t\t\t\tconfigHelpers(value.table),\n\t\t\t);\n\t\t\tlet primaryKey: AnyColumn[] | undefined;\n\n\t\t\tfor (const [relationName, relation] of Object.entries(relations)) {\n\t\t\t\tif (tableName) {\n\t\t\t\t\tconst tableConfig = tablesConfig[tableName]!;\n\t\t\t\t\ttableConfig.relations[relationName] = relation;\n\t\t\t\t\tif (primaryKey) {\n\t\t\t\t\t\ttableConfig.primaryKey.push(...primaryKey);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!(dbName in relationsBuffer)) {\n\t\t\t\t\t\trelationsBuffer[dbName] = {\n\t\t\t\t\t\t\trelations: {},\n\t\t\t\t\t\t\tprimaryKey,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\trelationsBuffer[dbName]!.relations[relationName] = relation;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { tables: tablesConfig as TTables, tableNamesMap };\n}\n\nexport function relations<\n\tTTableName extends string,\n\tTRelations extends Record<string, Relation<any>>,\n>(\n\ttable: AnyTable<{ name: TTableName }>,\n\trelations: (helpers: TableRelationsHelpers<TTableName>) => TRelations,\n): Relations<TTableName, TRelations> {\n\treturn new Relations<TTableName, TRelations>(\n\t\ttable,\n\t\t(helpers: TableRelationsHelpers<TTableName>) =>\n\t\t\tObject.fromEntries(\n\t\t\t\tObject.entries(relations(helpers)).map(([key, value]) => [\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue.withFieldName(key),\n\t\t\t\t]),\n\t\t\t) as TRelations,\n\t);\n}\n\nexport function createOne<TTableName extends string>(sourceTable: Table) {\n\treturn function one<\n\t\tTForeignTable extends Table,\n\t\tTColumns extends [\n\t\t\tAnyColumn<{ tableName: TTableName }>,\n\t\t\t...AnyColumn<{ tableName: TTableName }>[],\n\t\t],\n\t>(\n\t\ttable: TForeignTable,\n\t\tconfig?: RelationConfig<TTableName, TForeignTable['_']['name'], TColumns>,\n\t): One<\n\t\tTForeignTable['_']['name'],\n\t\tEqual<TColumns[number]['_']['notNull'], true>\n\t> {\n\t\treturn new One(\n\t\t\tsourceTable,\n\t\t\ttable,\n\t\t\tconfig,\n\t\t\t(config?.fields.reduce<boolean>((res, f) => res && f.notNull, true)\n\t\t\t\t?? false) as Equal<TColumns[number]['_']['notNull'], true>,\n\t\t);\n\t};\n}\n\nexport function createMany(sourceTable: Table) {\n\treturn function many<TForeignTable extends Table>(\n\t\treferencedTable: TForeignTable,\n\t\tconfig?: { relationName: string },\n\t): Many<TForeignTable['_']['name']> {\n\t\treturn new Many(sourceTable, referencedTable, config);\n\t};\n}\n\nexport interface NormalizedRelation {\n\tfields: AnyColumn[];\n\treferences: AnyColumn[];\n}\n\nexport function normalizeRelation(\n\tschema: TablesRelationalConfig,\n\ttableNamesMap: Record<string, string>,\n\trelation: Relation,\n): NormalizedRelation {\n\tif (is(relation, One) && relation.config) {\n\t\treturn {\n\t\t\tfields: relation.config.fields,\n\t\t\treferences: relation.config.references,\n\t\t};\n\t}\n\n\tconst referencedTableTsName = tableNamesMap[getTableUniqueName(relation.referencedTable)];\n\tif (!referencedTableTsName) {\n\t\tthrow new Error(\n\t\t\t`Table \"${relation.referencedTable[Table.Symbol.Name]}\" not found in schema`,\n\t\t);\n\t}\n\n\tconst referencedTableConfig = schema[referencedTableTsName];\n\tif (!referencedTableConfig) {\n\t\tthrow new Error(`Table \"${referencedTableTsName}\" not found in schema`);\n\t}\n\n\tconst sourceTable = relation.sourceTable;\n\tconst sourceTableTsName = tableNamesMap[getTableUniqueName(sourceTable)];\n\tif (!sourceTableTsName) {\n\t\tthrow new Error(\n\t\t\t`Table \"${sourceTable[Table.Symbol.Name]}\" not found in schema`,\n\t\t);\n\t}\n\n\tconst reverseRelations: Relation[] = [];\n\tfor (\n\t\tconst referencedTableRelation of Object.values(\n\t\t\treferencedTableConfig.relations,\n\t\t)\n\t) {\n\t\tif (\n\t\t\t(relation.relationName\n\t\t\t\t&& relation !== referencedTableRelation\n\t\t\t\t&& referencedTableRelation.relationName === relation.relationName)\n\t\t\t|| (!relation.relationName\n\t\t\t\t&& referencedTableRelation.referencedTable === relation.sourceTable)\n\t\t) {\n\t\t\treverseRelations.push(referencedTableRelation);\n\t\t}\n\t}\n\n\tif (reverseRelations.length > 1) {\n\t\tthrow relation.relationName\n\t\t\t? new Error(\n\t\t\t\t`There are multiple relations with name \"${relation.relationName}\" in table \"${referencedTableTsName}\"`,\n\t\t\t)\n\t\t\t: new Error(\n\t\t\t\t`There are multiple relations between \"${referencedTableTsName}\" and \"${\n\t\t\t\t\trelation.sourceTable[Table.Symbol.Name]\n\t\t\t\t}\". Please specify relation name`,\n\t\t\t);\n\t}\n\n\tif (\n\t\treverseRelations[0]\n\t\t&& is(reverseRelations[0], One)\n\t\t&& reverseRelations[0].config\n\t) {\n\t\treturn {\n\t\t\tfields: reverseRelations[0].config.references,\n\t\t\treferences: reverseRelations[0].config.fields,\n\t\t};\n\t}\n\n\tthrow new Error(\n\t\t`There is not enough information to infer relation \"${sourceTableTsName}.${relation.fieldName}\"`,\n\t);\n}\n\nexport function createTableRelationsHelpers<TTableName extends string>(\n\tsourceTable: AnyTable<{ name: TTableName }>,\n) {\n\treturn {\n\t\tone: createOne<TTableName>(sourceTable),\n\t\tmany: createMany(sourceTable),\n\t};\n}\n\nexport type TableRelationsHelpers<TTableName extends string> = ReturnType<\n\ttypeof createTableRelationsHelpers<TTableName>\n>;\n\nexport interface BuildRelationalQueryResult<\n\tTTable extends Table = Table,\n\tTColumn extends Column = Column,\n> {\n\ttableTsKey: string;\n\tselection: {\n\t\tdbKey: string;\n\t\ttsKey: string;\n\t\tfield: TColumn | SQL | SQL.Aliased;\n\t\trelationTableTsKey: string | undefined;\n\t\tisJson: boolean;\n\t\tisExtra?: boolean;\n\t\tselection: BuildRelationalQueryResult<TTable>['selection'];\n\t}[];\n\tsql: TTable | SQL;\n}\n\nexport function mapRelationalRow(\n\ttablesConfig: TablesRelationalConfig,\n\ttableConfig: TableRelationalConfig,\n\trow: unknown[],\n\tbuildQueryResultSelection: BuildRelationalQueryResult['selection'],\n\tmapColumnValue: (value: unknown) => unknown = (value) => value,\n): Record<string, unknown> {\n\tconst result: Record<string, unknown> = {};\n\n\tfor (\n\t\tconst [\n\t\t\tselectionItemIndex,\n\t\t\tselectionItem,\n\t\t] of buildQueryResultSelection.entries()\n\t) {\n\t\tif (selectionItem.isJson) {\n\t\t\tconst relation = tableConfig.relations[selectionItem.tsKey]!;\n\t\t\tconst rawSubRows = row[selectionItemIndex] as\n\t\t\t\t| unknown[]\n\t\t\t\t| null\n\t\t\t\t| [null]\n\t\t\t\t| string;\n\t\t\tconst subRows = typeof rawSubRows === 'string'\n\t\t\t\t? (JSON.parse(rawSubRows) as unknown[])\n\t\t\t\t: rawSubRows;\n\t\t\tresult[selectionItem.tsKey] = is(relation, One)\n\t\t\t\t? subRows\n\t\t\t\t\t&& mapRelationalRow(\n\t\t\t\t\t\ttablesConfig,\n\t\t\t\t\t\ttablesConfig[selectionItem.relationTableTsKey!]!,\n\t\t\t\t\t\tsubRows,\n\t\t\t\t\t\tselectionItem.selection,\n\t\t\t\t\t\tmapColumnValue,\n\t\t\t\t\t)\n\t\t\t\t: (subRows as unknown[][]).map((subRow) =>\n\t\t\t\t\tmapRelationalRow(\n\t\t\t\t\t\ttablesConfig,\n\t\t\t\t\t\ttablesConfig[selectionItem.relationTableTsKey!]!,\n\t\t\t\t\t\tsubRow,\n\t\t\t\t\t\tselectionItem.selection,\n\t\t\t\t\t\tmapColumnValue,\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t} else {\n\t\t\tconst value = mapColumnValue(row[selectionItemIndex]);\n\t\t\tconst field = selectionItem.field!;\n\t\t\tlet decoder;\n\t\t\tif (is(field, Column)) {\n\t\t\t\tdecoder = field;\n\t\t\t} else if (is(field, SQL)) {\n\t\t\t\tdecoder = field.decoder;\n\t\t\t} else {\n\t\t\t\tdecoder = field.sql.decoder;\n\t\t\t}\n\t\t\tresult[selectionItem.tsKey] = value === null ? null : decoder.mapFromDriverValue(value);\n\t\t}\n\t}\n\n\treturn result;\n}\n"],"names":["relations"],"mappings":"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","debugId":null}},
    {"offset": {"line": 6856, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/view-base.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { type ColumnsSelection, View } from '~/sql/sql.ts';\n\nexport abstract class PgViewBase<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelectedFields extends ColumnsSelection = ColumnsSelection,\n> extends View<TName, TExisting, TSelectedFields> {\n\tstatic override readonly [entityKind]: string = 'PgViewBase';\n\n\tdeclare readonly _: View<TName, TExisting, TSelectedFields>['_'] & {\n\t\treadonly viewBrand: 'PgViewBase';\n\t};\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;AAC3B,SAAgC,YAAY;;;AAErC,MAAe,gKAIZ,OAAA,CAAwC;IACjD,OAAA,0IAA0B,aAAU,CAAA,GAAY,aAAA;AAKjD","debugId":null}},
    {"offset": {"line": 6872, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/dialect.ts"],"sourcesContent":["import { aliasedTable, aliasedTableColumn, mapColumnsInAliasedSQLToAlias, mapColumnsInSQLToAlias } from '~/alias.ts';\nimport { CasingCache } from '~/casing.ts';\nimport { Column } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport { DrizzleError } from '~/errors.ts';\nimport type { MigrationConfig, MigrationMeta } from '~/migrator.ts';\nimport {\n\tPgColumn,\n\tPgDate,\n\tPgDateString,\n\tPgJson,\n\tPgJsonb,\n\tPgNumeric,\n\tPgTime,\n\tPgTimestamp,\n\tPgTimestampString,\n\tPgUUID,\n} from '~/pg-core/columns/index.ts';\nimport type {\n\tAnyPgSelectQueryBuilder,\n\tPgDeleteConfig,\n\tPgInsertConfig,\n\tPgSelectJoinConfig,\n\tPgUpdateConfig,\n} from '~/pg-core/query-builders/index.ts';\nimport type { PgSelectConfig, SelectedFieldsOrdered } from '~/pg-core/query-builders/select.types.ts';\nimport { PgTable } from '~/pg-core/table.ts';\nimport {\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tgetOperators,\n\tgetOrderByOperators,\n\tMany,\n\tnormalizeRelation,\n\tOne,\n\ttype Relation,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport { and, eq, View } from '~/sql/index.ts';\nimport {\n\ttype DriverValueEncoder,\n\ttype Name,\n\tParam,\n\ttype QueryTypingsValue,\n\ttype QueryWithTypings,\n\tSQL,\n\tsql,\n\ttype SQLChunk,\n} from '~/sql/sql.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { getTableName, getTableUniqueName, Table } from '~/table.ts';\nimport { type Casing, orderSelectedFields, type UpdateSet } from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { PgSession } from './session.ts';\nimport { PgViewBase } from './view-base.ts';\nimport type { PgMaterializedView } from './view.ts';\n\nexport interface PgDialectConfig {\n\tcasing?: Casing;\n}\n\nexport class PgDialect {\n\tstatic readonly [entityKind]: string = 'PgDialect';\n\n\t/** @internal */\n\treadonly casing: CasingCache;\n\n\tconstructor(config?: PgDialectConfig) {\n\t\tthis.casing = new CasingCache(config?.casing);\n\t}\n\n\tasync migrate(migrations: MigrationMeta[], session: PgSession, config: string | MigrationConfig): Promise<void> {\n\t\tconst migrationsTable = typeof config === 'string'\n\t\t\t? '__drizzle_migrations'\n\t\t\t: config.migrationsTable ?? '__drizzle_migrations';\n\t\tconst migrationsSchema = typeof config === 'string' ? 'drizzle' : config.migrationsSchema ?? 'drizzle';\n\t\tconst migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsSchema)}.${sql.identifier(migrationsTable)} (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at bigint\n\t\t\t)\n\t\t`;\n\t\tawait session.execute(sql`CREATE SCHEMA IF NOT EXISTS ${sql.identifier(migrationsSchema)}`);\n\t\tawait session.execute(migrationTableCreate);\n\n\t\tconst dbMigrations = await session.all<{ id: number; hash: string; created_at: string }>(\n\t\t\tsql`select id, hash, created_at from ${sql.identifier(migrationsSchema)}.${\n\t\t\t\tsql.identifier(migrationsTable)\n\t\t\t} order by created_at desc limit 1`,\n\t\t);\n\n\t\tconst lastDbMigration = dbMigrations[0];\n\t\tawait session.transaction(async (tx) => {\n\t\t\tfor await (const migration of migrations) {\n\t\t\t\tif (\n\t\t\t\t\t!lastDbMigration\n\t\t\t\t\t|| Number(lastDbMigration.created_at) < migration.folderMillis\n\t\t\t\t) {\n\t\t\t\t\tfor (const stmt of migration.sql) {\n\t\t\t\t\t\tawait tx.execute(sql.raw(stmt));\n\t\t\t\t\t}\n\t\t\t\t\tawait tx.execute(\n\t\t\t\t\t\tsql`insert into ${sql.identifier(migrationsSchema)}.${\n\t\t\t\t\t\t\tsql.identifier(migrationsTable)\n\t\t\t\t\t\t} (\"hash\", \"created_at\") values(${migration.hash}, ${migration.folderMillis})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tescapeName(name: string): string {\n\t\treturn `\"${name}\"`;\n\t}\n\n\tescapeParam(num: number): string {\n\t\treturn `$${num + 1}`;\n\t}\n\n\tescapeString(str: string): string {\n\t\treturn `'${str.replace(/'/g, \"''\")}'`;\n\t}\n\n\tprivate buildWithCTE(queries: Subquery[] | undefined): SQL | undefined {\n\t\tif (!queries?.length) return undefined;\n\n\t\tconst withSqlChunks = [sql`with `];\n\t\tfor (const [i, w] of queries.entries()) {\n\t\t\twithSqlChunks.push(sql`${sql.identifier(w._.alias)} as (${w._.sql})`);\n\t\t\tif (i < queries.length - 1) {\n\t\t\t\twithSqlChunks.push(sql`, `);\n\t\t\t}\n\t\t}\n\t\twithSqlChunks.push(sql` `);\n\t\treturn sql.join(withSqlChunks);\n\t}\n\n\tbuildDeleteQuery({ table, where, returning, withList }: PgDeleteConfig): SQL {\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\treturn sql`${withSql}delete from ${table}${whereSql}${returningSql}`;\n\t}\n\n\tbuildUpdateSet(table: PgTable, set: UpdateSet): SQL {\n\t\tconst tableColumns = table[Table.Symbol.Columns];\n\n\t\tconst columnNames = Object.keys(tableColumns).filter((colName) =>\n\t\t\tset[colName] !== undefined || tableColumns[colName]?.onUpdateFn !== undefined\n\t\t);\n\n\t\tconst setSize = columnNames.length;\n\t\treturn sql.join(columnNames.flatMap((colName, i) => {\n\t\t\tconst col = tableColumns[colName]!;\n\n\t\t\tconst value = set[colName] ?? sql.param(col.onUpdateFn!(), col);\n\t\t\tconst res = sql`${sql.identifier(this.casing.getColumnCasing(col))} = ${value}`;\n\n\t\t\tif (i < setSize - 1) {\n\t\t\t\treturn [res, sql.raw(', ')];\n\t\t\t}\n\t\t\treturn [res];\n\t\t}));\n\t}\n\n\tbuildUpdateQuery({ table, set, where, returning, withList, from, joins }: PgUpdateConfig): SQL {\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst tableName = table[PgTable.Symbol.Name];\n\t\tconst tableSchema = table[PgTable.Symbol.Schema];\n\t\tconst origTableName = table[PgTable.Symbol.OriginalName];\n\t\tconst alias = tableName === origTableName ? undefined : tableName;\n\t\tconst tableSql = sql`${tableSchema ? sql`${sql.identifier(tableSchema)}.` : undefined}${\n\t\t\tsql.identifier(origTableName)\n\t\t}${alias && sql` ${sql.identifier(alias)}`}`;\n\n\t\tconst setSql = this.buildUpdateSet(table, set);\n\n\t\tconst fromSql = from && sql.join([sql.raw(' from '), this.buildFromTable(from)]);\n\n\t\tconst joinsSql = this.buildJoins(joins);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: !from })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\treturn sql`${withSql}update ${tableSql} set ${setSql}${fromSql}${joinsSql}${whereSql}${returningSql}`;\n\t}\n\n\t/**\n\t * Builds selection SQL with provided fields/expressions\n\t *\n\t * Examples:\n\t *\n\t * `select <selection> from`\n\t *\n\t * `insert ... returning <selection>`\n\t *\n\t * If `isSingleTable` is true, then columns won't be prefixed with table name\n\t */\n\tprivate buildSelection(\n\t\tfields: SelectedFieldsOrdered,\n\t\t{ isSingleTable = false }: { isSingleTable?: boolean } = {},\n\t): SQL {\n\t\tconst columnsLen = fields.length;\n\n\t\tconst chunks = fields\n\t\t\t.flatMap(({ field }, i) => {\n\t\t\t\tconst chunk: SQLChunk[] = [];\n\n\t\t\t\tif (is(field, SQL.Aliased) && field.isSelectionField) {\n\t\t\t\t\tchunk.push(sql.identifier(field.fieldAlias));\n\t\t\t\t} else if (is(field, SQL.Aliased) || is(field, SQL)) {\n\t\t\t\t\tconst query = is(field, SQL.Aliased) ? field.sql : field;\n\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(\n\t\t\t\t\t\t\tnew SQL(\n\t\t\t\t\t\t\t\tquery.queryChunks.map((c) => {\n\t\t\t\t\t\t\t\t\tif (is(c, PgColumn)) {\n\t\t\t\t\t\t\t\t\t\treturn sql.identifier(this.casing.getColumnCasing(c));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn c;\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(query);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is(field, SQL.Aliased)) {\n\t\t\t\t\t\tchunk.push(sql` as ${sql.identifier(field.fieldAlias)}`);\n\t\t\t\t\t}\n\t\t\t\t} else if (is(field, Column)) {\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(sql.identifier(this.casing.getColumnCasing(field)));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(field);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (i < columnsLen - 1) {\n\t\t\t\t\tchunk.push(sql`, `);\n\t\t\t\t}\n\n\t\t\t\treturn chunk;\n\t\t\t});\n\n\t\treturn sql.join(chunks);\n\t}\n\n\tprivate buildJoins(joins: PgSelectJoinConfig[] | undefined): SQL | undefined {\n\t\tif (!joins || joins.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst joinsArray: SQL[] = [];\n\n\t\tfor (const [index, joinMeta] of joins.entries()) {\n\t\t\tif (index === 0) {\n\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t}\n\t\t\tconst table = joinMeta.table;\n\t\t\tconst lateralSql = joinMeta.lateral ? sql` lateral` : undefined;\n\t\t\tconst onSql = joinMeta.on ? sql` on ${joinMeta.on}` : undefined;\n\n\t\t\tif (is(table, PgTable)) {\n\t\t\t\tconst tableName = table[PgTable.Symbol.Name];\n\t\t\t\tconst tableSchema = table[PgTable.Symbol.Schema];\n\t\t\t\tconst origTableName = table[PgTable.Symbol.OriginalName];\n\t\t\t\tconst alias = tableName === origTableName ? undefined : joinMeta.alias;\n\t\t\t\tjoinsArray.push(\n\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${\n\t\t\t\t\t\ttableSchema ? sql`${sql.identifier(tableSchema)}.` : undefined\n\t\t\t\t\t}${sql.identifier(origTableName)}${alias && sql` ${sql.identifier(alias)}`}${onSql}`,\n\t\t\t\t);\n\t\t\t} else if (is(table, View)) {\n\t\t\t\tconst viewName = table[ViewBaseConfig].name;\n\t\t\t\tconst viewSchema = table[ViewBaseConfig].schema;\n\t\t\t\tconst origViewName = table[ViewBaseConfig].originalName;\n\t\t\t\tconst alias = viewName === origViewName ? undefined : joinMeta.alias;\n\t\t\t\tjoinsArray.push(\n\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${\n\t\t\t\t\t\tviewSchema ? sql`${sql.identifier(viewSchema)}.` : undefined\n\t\t\t\t\t}${sql.identifier(origViewName)}${alias && sql` ${sql.identifier(alias)}`}${onSql}`,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tjoinsArray.push(\n\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${table}${onSql}`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (index < joins.length - 1) {\n\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t}\n\t\t}\n\n\t\treturn sql.join(joinsArray);\n\t}\n\n\tprivate buildFromTable(\n\t\ttable: SQL | Subquery | PgViewBase | PgTable | undefined,\n\t): SQL | Subquery | PgViewBase | PgTable | undefined {\n\t\tif (is(table, Table) && table[Table.Symbol.IsAlias]) {\n\t\t\tlet fullName = sql`${sql.identifier(table[Table.Symbol.OriginalName])}`;\n\t\t\tif (table[Table.Symbol.Schema]) {\n\t\t\t\tfullName = sql`${sql.identifier(table[Table.Symbol.Schema]!)}.${fullName}`;\n\t\t\t}\n\t\t\treturn sql`${fullName} ${sql.identifier(table[Table.Symbol.Name])}`;\n\t\t}\n\n\t\treturn table;\n\t}\n\n\tbuildSelectQuery(\n\t\t{\n\t\t\twithList,\n\t\t\tfields,\n\t\t\tfieldsFlat,\n\t\t\twhere,\n\t\t\thaving,\n\t\t\ttable,\n\t\t\tjoins,\n\t\t\torderBy,\n\t\t\tgroupBy,\n\t\t\tlimit,\n\t\t\toffset,\n\t\t\tlockingClause,\n\t\t\tdistinct,\n\t\t\tsetOperators,\n\t\t}: PgSelectConfig,\n\t): SQL {\n\t\tconst fieldsList = fieldsFlat ?? orderSelectedFields<PgColumn>(fields);\n\t\tfor (const f of fieldsList) {\n\t\t\tif (\n\t\t\t\tis(f.field, Column)\n\t\t\t\t&& getTableName(f.field.table)\n\t\t\t\t\t!== (is(table, Subquery)\n\t\t\t\t\t\t? table._.alias\n\t\t\t\t\t\t: is(table, PgViewBase)\n\t\t\t\t\t\t? table[ViewBaseConfig].name\n\t\t\t\t\t\t: is(table, SQL)\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: getTableName(table))\n\t\t\t\t&& !((table) =>\n\t\t\t\t\tjoins?.some(({ alias }) =>\n\t\t\t\t\t\talias === (table[Table.Symbol.IsAlias] ? getTableName(table) : table[Table.Symbol.BaseName])\n\t\t\t\t\t))(f.field.table)\n\t\t\t) {\n\t\t\t\tconst tableName = getTableName(f.field.table);\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Your \"${\n\t\t\t\t\t\tf.path.join('->')\n\t\t\t\t\t}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst isSingleTable = !joins || joins.length === 0;\n\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tlet distinctSql: SQL | undefined;\n\t\tif (distinct) {\n\t\t\tdistinctSql = distinct === true ? sql` distinct` : sql` distinct on (${sql.join(distinct.on, sql`, `)})`;\n\t\t}\n\n\t\tconst selection = this.buildSelection(fieldsList, { isSingleTable });\n\n\t\tconst tableSql = this.buildFromTable(table);\n\n\t\tconst joinsSql = this.buildJoins(joins);\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst havingSql = having ? sql` having ${having}` : undefined;\n\n\t\tlet orderBySql;\n\t\tif (orderBy && orderBy.length > 0) {\n\t\t\torderBySql = sql` order by ${sql.join(orderBy, sql`, `)}`;\n\t\t}\n\n\t\tlet groupBySql;\n\t\tif (groupBy && groupBy.length > 0) {\n\t\t\tgroupBySql = sql` group by ${sql.join(groupBy, sql`, `)}`;\n\t\t}\n\n\t\tconst limitSql = typeof limit === 'object' || (typeof limit === 'number' && limit >= 0)\n\t\t\t? sql` limit ${limit}`\n\t\t\t: undefined;\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\tconst lockingClauseSql = sql.empty();\n\t\tif (lockingClause) {\n\t\t\tconst clauseSql = sql` for ${sql.raw(lockingClause.strength)}`;\n\t\t\tif (lockingClause.config.of) {\n\t\t\t\tclauseSql.append(\n\t\t\t\t\tsql` of ${\n\t\t\t\t\t\tsql.join(\n\t\t\t\t\t\t\tArray.isArray(lockingClause.config.of) ? lockingClause.config.of : [lockingClause.config.of],\n\t\t\t\t\t\t\tsql`, `,\n\t\t\t\t\t\t)\n\t\t\t\t\t}`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (lockingClause.config.noWait) {\n\t\t\t\tclauseSql.append(sql` nowait`);\n\t\t\t} else if (lockingClause.config.skipLocked) {\n\t\t\t\tclauseSql.append(sql` skip locked`);\n\t\t\t}\n\t\t\tlockingClauseSql.append(clauseSql);\n\t\t}\n\t\tconst finalQuery =\n\t\t\tsql`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}${lockingClauseSql}`;\n\n\t\tif (setOperators.length > 0) {\n\t\t\treturn this.buildSetOperations(finalQuery, setOperators);\n\t\t}\n\n\t\treturn finalQuery;\n\t}\n\n\tbuildSetOperations(leftSelect: SQL, setOperators: PgSelectConfig['setOperators']): SQL {\n\t\tconst [setOperator, ...rest] = setOperators;\n\n\t\tif (!setOperator) {\n\t\t\tthrow new Error('Cannot pass undefined values to any set operator');\n\t\t}\n\n\t\tif (rest.length === 0) {\n\t\t\treturn this.buildSetOperationQuery({ leftSelect, setOperator });\n\t\t}\n\n\t\t// Some recursive magic here\n\t\treturn this.buildSetOperations(\n\t\t\tthis.buildSetOperationQuery({ leftSelect, setOperator }),\n\t\t\trest,\n\t\t);\n\t}\n\n\tbuildSetOperationQuery({\n\t\tleftSelect,\n\t\tsetOperator: { type, isAll, rightSelect, limit, orderBy, offset },\n\t}: { leftSelect: SQL; setOperator: PgSelectConfig['setOperators'][number] }): SQL {\n\t\tconst leftChunk = sql`(${leftSelect.getSQL()}) `;\n\t\tconst rightChunk = sql`(${rightSelect.getSQL()})`;\n\n\t\tlet orderBySql;\n\t\tif (orderBy && orderBy.length > 0) {\n\t\t\tconst orderByValues: (SQL<unknown> | Name)[] = [];\n\n\t\t\t// The next bit is necessary because the sql operator replaces ${table.column} with `table`.`column`\n\t\t\t// which is invalid Sql syntax, Table from one of the SELECTs cannot be used in global ORDER clause\n\t\t\tfor (const singleOrderBy of orderBy) {\n\t\t\t\tif (is(singleOrderBy, PgColumn)) {\n\t\t\t\t\torderByValues.push(sql.identifier(singleOrderBy.name));\n\t\t\t\t} else if (is(singleOrderBy, SQL)) {\n\t\t\t\t\tfor (let i = 0; i < singleOrderBy.queryChunks.length; i++) {\n\t\t\t\t\t\tconst chunk = singleOrderBy.queryChunks[i];\n\n\t\t\t\t\t\tif (is(chunk, PgColumn)) {\n\t\t\t\t\t\t\tsingleOrderBy.queryChunks[i] = sql.identifier(chunk.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\torderByValues.push(sql`${singleOrderBy}`);\n\t\t\t\t} else {\n\t\t\t\t\torderByValues.push(sql`${singleOrderBy}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\torderBySql = sql` order by ${sql.join(orderByValues, sql`, `)} `;\n\t\t}\n\n\t\tconst limitSql = typeof limit === 'object' || (typeof limit === 'number' && limit >= 0)\n\t\t\t? sql` limit ${limit}`\n\t\t\t: undefined;\n\n\t\tconst operatorChunk = sql.raw(`${type} ${isAll ? 'all ' : ''}`);\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\treturn sql`${leftChunk}${operatorChunk}${rightChunk}${orderBySql}${limitSql}${offsetSql}`;\n\t}\n\n\tbuildInsertQuery(\n\t\t{ table, values: valuesOrSelect, onConflict, returning, withList, select, overridingSystemValue_ }: PgInsertConfig,\n\t): SQL {\n\t\tconst valuesSqlList: ((SQLChunk | SQL)[] | SQL)[] = [];\n\t\tconst columns: Record<string, PgColumn> = table[Table.Symbol.Columns];\n\n\t\tconst colEntries: [string, PgColumn][] = Object.entries(columns).filter(([_, col]) => !col.shouldDisableInsert());\n\n\t\tconst insertOrder = colEntries.map(\n\t\t\t([, column]) => sql.identifier(this.casing.getColumnCasing(column)),\n\t\t);\n\n\t\tif (select) {\n\t\t\tconst select = valuesOrSelect as AnyPgSelectQueryBuilder | SQL;\n\n\t\t\tif (is(select, SQL)) {\n\t\t\t\tvaluesSqlList.push(select);\n\t\t\t} else {\n\t\t\t\tvaluesSqlList.push(select.getSQL());\n\t\t\t}\n\t\t} else {\n\t\t\tconst values = valuesOrSelect as Record<string, Param | SQL>[];\n\t\t\tvaluesSqlList.push(sql.raw('values '));\n\n\t\t\tfor (const [valueIndex, value] of values.entries()) {\n\t\t\t\tconst valueList: (SQLChunk | SQL)[] = [];\n\t\t\t\tfor (const [fieldName, col] of colEntries) {\n\t\t\t\t\tconst colValue = value[fieldName];\n\t\t\t\t\tif (colValue === undefined || (is(colValue, Param) && colValue.value === undefined)) {\n\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\t\tif (col.defaultFn !== undefined) {\n\t\t\t\t\t\t\tconst defaultFnResult = col.defaultFn();\n\t\t\t\t\t\t\tconst defaultValue = is(defaultFnResult, SQL) ? defaultFnResult : sql.param(defaultFnResult, col);\n\t\t\t\t\t\t\tvalueList.push(defaultValue);\n\t\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\t\t} else if (!col.default && col.onUpdateFn !== undefined) {\n\t\t\t\t\t\t\tconst onUpdateFnResult = col.onUpdateFn();\n\t\t\t\t\t\t\tconst newValue = is(onUpdateFnResult, SQL) ? onUpdateFnResult : sql.param(onUpdateFnResult, col);\n\t\t\t\t\t\t\tvalueList.push(newValue);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvalueList.push(sql`default`);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalueList.push(colValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvaluesSqlList.push(valueList);\n\t\t\t\tif (valueIndex < values.length - 1) {\n\t\t\t\t\tvaluesSqlList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst valuesSql = sql.join(valuesSqlList);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst onConflictSql = onConflict ? sql` on conflict ${onConflict}` : undefined;\n\n\t\tconst overridingSql = overridingSystemValue_ === true ? sql`overriding system value ` : undefined;\n\n\t\treturn sql`${withSql}insert into ${table} ${insertOrder} ${overridingSql}${valuesSql}${onConflictSql}${returningSql}`;\n\t}\n\n\tbuildRefreshMaterializedViewQuery(\n\t\t{ view, concurrently, withNoData }: { view: PgMaterializedView; concurrently?: boolean; withNoData?: boolean },\n\t): SQL {\n\t\tconst concurrentlySql = concurrently ? sql` concurrently` : undefined;\n\t\tconst withNoDataSql = withNoData ? sql` with no data` : undefined;\n\n\t\treturn sql`refresh materialized view${concurrentlySql} ${view}${withNoDataSql}`;\n\t}\n\n\tprepareTyping(encoder: DriverValueEncoder<unknown, unknown>): QueryTypingsValue {\n\t\tif (is(encoder, PgJsonb) || is(encoder, PgJson)) {\n\t\t\treturn 'json';\n\t\t} else if (is(encoder, PgNumeric)) {\n\t\t\treturn 'decimal';\n\t\t} else if (is(encoder, PgTime)) {\n\t\t\treturn 'time';\n\t\t} else if (is(encoder, PgTimestamp) || is(encoder, PgTimestampString)) {\n\t\t\treturn 'timestamp';\n\t\t} else if (is(encoder, PgDate) || is(encoder, PgDateString)) {\n\t\t\treturn 'date';\n\t\t} else if (is(encoder, PgUUID)) {\n\t\t\treturn 'uuid';\n\t\t} else {\n\t\t\treturn 'none';\n\t\t}\n\t}\n\n\tsqlToQuery(sql: SQL, invokeSource?: 'indexes' | undefined): QueryWithTypings {\n\t\treturn sql.toQuery({\n\t\t\tcasing: this.casing,\n\t\t\tescapeName: this.escapeName,\n\t\t\tescapeParam: this.escapeParam,\n\t\t\tescapeString: this.escapeString,\n\t\t\tprepareTyping: this.prepareTyping,\n\t\t\tinvokeSource,\n\t\t});\n\t}\n\n\t// buildRelationalQueryWithPK({\n\t// \tfullSchema,\n\t// \tschema,\n\t// \ttableNamesMap,\n\t// \ttable,\n\t// \ttableConfig,\n\t// \tqueryConfig: config,\n\t// \ttableAlias,\n\t// \tisRoot = false,\n\t// \tjoinOn,\n\t// }: {\n\t// \tfullSchema: Record<string, unknown>;\n\t// \tschema: TablesRelationalConfig;\n\t// \ttableNamesMap: Record<string, string>;\n\t// \ttable: PgTable;\n\t// \ttableConfig: TableRelationalConfig;\n\t// \tqueryConfig: true | DBQueryConfig<'many', true>;\n\t// \ttableAlias: string;\n\t// \tisRoot?: boolean;\n\t// \tjoinOn?: SQL;\n\t// }): BuildRelationalQueryResult<PgTable, PgColumn> {\n\t// \t// For { \"<relation>\": true }, return a table with selection of all columns\n\t// \tif (config === true) {\n\t// \t\tconst selectionEntries = Object.entries(tableConfig.columns);\n\t// \t\tconst selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = selectionEntries.map((\n\t// \t\t\t[key, value],\n\t// \t\t) => ({\n\t// \t\t\tdbKey: value.name,\n\t// \t\t\ttsKey: key,\n\t// \t\t\tfield: value as PgColumn,\n\t// \t\t\trelationTableTsKey: undefined,\n\t// \t\t\tisJson: false,\n\t// \t\t\tselection: [],\n\t// \t\t}));\n\n\t// \t\treturn {\n\t// \t\t\ttableTsKey: tableConfig.tsName,\n\t// \t\t\tsql: table,\n\t// \t\t\tselection,\n\t// \t\t};\n\t// \t}\n\n\t// \t// let selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = [];\n\t// \t// let selectionForBuild = selection;\n\n\t// \tconst aliasedColumns = Object.fromEntries(\n\t// \t\tObject.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)]),\n\t// \t);\n\n\t// \tconst aliasedRelations = Object.fromEntries(\n\t// \t\tObject.entries(tableConfig.relations).map(([key, value]) => [key, aliasedRelation(value, tableAlias)]),\n\t// \t);\n\n\t// \tconst aliasedFields = Object.assign({}, aliasedColumns, aliasedRelations);\n\n\t// \tlet where, hasUserDefinedWhere;\n\t// \tif (config.where) {\n\t// \t\tconst whereSql = typeof config.where === 'function' ? config.where(aliasedFields, operators) : config.where;\n\t// \t\twhere = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n\t// \t\thasUserDefinedWhere = !!where;\n\t// \t}\n\t// \twhere = and(joinOn, where);\n\n\t// \t// const fieldsSelection: { tsKey: string; value: PgColumn | SQL.Aliased; isExtra?: boolean }[] = [];\n\t// \tlet joins: Join[] = [];\n\t// \tlet selectedColumns: string[] = [];\n\n\t// \t// Figure out which columns to select\n\t// \tif (config.columns) {\n\t// \t\tlet isIncludeMode = false;\n\n\t// \t\tfor (const [field, value] of Object.entries(config.columns)) {\n\t// \t\t\tif (value === undefined) {\n\t// \t\t\t\tcontinue;\n\t// \t\t\t}\n\n\t// \t\t\tif (field in tableConfig.columns) {\n\t// \t\t\t\tif (!isIncludeMode && value === true) {\n\t// \t\t\t\t\tisIncludeMode = true;\n\t// \t\t\t\t}\n\t// \t\t\t\tselectedColumns.push(field);\n\t// \t\t\t}\n\t// \t\t}\n\n\t// \t\tif (selectedColumns.length > 0) {\n\t// \t\t\tselectedColumns = isIncludeMode\n\t// \t\t\t\t? selectedColumns.filter((c) => config.columns?.[c] === true)\n\t// \t\t\t\t: Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n\t// \t\t}\n\t// \t} else {\n\t// \t\t// Select all columns if selection is not specified\n\t// \t\tselectedColumns = Object.keys(tableConfig.columns);\n\t// \t}\n\n\t// \t// for (const field of selectedColumns) {\n\t// \t// \tconst column = tableConfig.columns[field]! as PgColumn;\n\t// \t// \tfieldsSelection.push({ tsKey: field, value: column });\n\t// \t// }\n\n\t// \tlet initiallySelectedRelations: {\n\t// \t\ttsKey: string;\n\t// \t\tqueryConfig: true | DBQueryConfig<'many', false>;\n\t// \t\trelation: Relation;\n\t// \t}[] = [];\n\n\t// \t// let selectedRelations: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = [];\n\n\t// \t// Figure out which relations to select\n\t// \tif (config.with) {\n\t// \t\tinitiallySelectedRelations = Object.entries(config.with)\n\t// \t\t\t.filter((entry): entry is [typeof entry[0], NonNullable<typeof entry[1]>] => !!entry[1])\n\t// \t\t\t.map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey]! }));\n\t// \t}\n\n\t// \tconst manyRelations = initiallySelectedRelations.filter((r) =>\n\t// \t\tis(r.relation, Many)\n\t// \t\t&& (schema[tableNamesMap[r.relation.referencedTable[Table.Symbol.Name]]!]?.primaryKey.length ?? 0) > 0\n\t// \t);\n\t// \t// If this is the last Many relation (or there are no Many relations), we are on the innermost subquery level\n\t// \tconst isInnermostQuery = manyRelations.length < 2;\n\n\t// \tconst selectedExtras: {\n\t// \t\ttsKey: string;\n\t// \t\tvalue: SQL.Aliased;\n\t// \t}[] = [];\n\n\t// \t// Figure out which extras to select\n\t// \tif (isInnermostQuery && config.extras) {\n\t// \t\tconst extras = typeof config.extras === 'function'\n\t// \t\t\t? config.extras(aliasedFields, { sql })\n\t// \t\t\t: config.extras;\n\t// \t\tfor (const [tsKey, value] of Object.entries(extras)) {\n\t// \t\t\tselectedExtras.push({\n\t// \t\t\t\ttsKey,\n\t// \t\t\t\tvalue: mapColumnsInAliasedSQLToAlias(value, tableAlias),\n\t// \t\t\t});\n\t// \t\t}\n\t// \t}\n\n\t// \t// Transform `fieldsSelection` into `selection`\n\t// \t// `fieldsSelection` shouldn't be used after this point\n\t// \t// for (const { tsKey, value, isExtra } of fieldsSelection) {\n\t// \t// \tselection.push({\n\t// \t// \t\tdbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey]!.name,\n\t// \t// \t\ttsKey,\n\t// \t// \t\tfield: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n\t// \t// \t\trelationTableTsKey: undefined,\n\t// \t// \t\tisJson: false,\n\t// \t// \t\tisExtra,\n\t// \t// \t\tselection: [],\n\t// \t// \t});\n\t// \t// }\n\n\t// \tlet orderByOrig = typeof config.orderBy === 'function'\n\t// \t\t? config.orderBy(aliasedFields, orderByOperators)\n\t// \t\t: config.orderBy ?? [];\n\t// \tif (!Array.isArray(orderByOrig)) {\n\t// \t\torderByOrig = [orderByOrig];\n\t// \t}\n\t// \tconst orderBy = orderByOrig.map((orderByValue) => {\n\t// \t\tif (is(orderByValue, Column)) {\n\t// \t\t\treturn aliasedTableColumn(orderByValue, tableAlias) as PgColumn;\n\t// \t\t}\n\t// \t\treturn mapColumnsInSQLToAlias(orderByValue, tableAlias);\n\t// \t});\n\n\t// \tconst limit = isInnermostQuery ? config.limit : undefined;\n\t// \tconst offset = isInnermostQuery ? config.offset : undefined;\n\n\t// \t// For non-root queries without additional config except columns, return a table with selection\n\t// \tif (\n\t// \t\t!isRoot\n\t// \t\t&& initiallySelectedRelations.length === 0\n\t// \t\t&& selectedExtras.length === 0\n\t// \t\t&& !where\n\t// \t\t&& orderBy.length === 0\n\t// \t\t&& limit === undefined\n\t// \t\t&& offset === undefined\n\t// \t) {\n\t// \t\treturn {\n\t// \t\t\ttableTsKey: tableConfig.tsName,\n\t// \t\t\tsql: table,\n\t// \t\t\tselection: selectedColumns.map((key) => ({\n\t// \t\t\t\tdbKey: tableConfig.columns[key]!.name,\n\t// \t\t\t\ttsKey: key,\n\t// \t\t\t\tfield: tableConfig.columns[key] as PgColumn,\n\t// \t\t\t\trelationTableTsKey: undefined,\n\t// \t\t\t\tisJson: false,\n\t// \t\t\t\tselection: [],\n\t// \t\t\t})),\n\t// \t\t};\n\t// \t}\n\n\t// \tconst selectedRelationsWithoutPK:\n\n\t// \t// Process all relations without primary keys, because they need to be joined differently and will all be on the same query level\n\t// \tfor (\n\t// \t\tconst {\n\t// \t\t\ttsKey: selectedRelationTsKey,\n\t// \t\t\tqueryConfig: selectedRelationConfigValue,\n\t// \t\t\trelation,\n\t// \t\t} of initiallySelectedRelations\n\t// \t) {\n\t// \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t// \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n\t// \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t// \t\tconst relationTable = schema[relationTableTsName]!;\n\n\t// \t\tif (relationTable.primaryKey.length > 0) {\n\t// \t\t\tcontinue;\n\t// \t\t}\n\n\t// \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t// \t\tconst joinOn = and(\n\t// \t\t\t...normalizedRelation.fields.map((field, i) =>\n\t// \t\t\t\teq(\n\t// \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t// \t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t// \t\t\t\t)\n\t// \t\t\t),\n\t// \t\t);\n\t// \t\tconst builtRelation = this.buildRelationalQueryWithoutPK({\n\t// \t\t\tfullSchema,\n\t// \t\t\tschema,\n\t// \t\t\ttableNamesMap,\n\t// \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n\t// \t\t\ttableConfig: schema[relationTableTsName]!,\n\t// \t\t\tqueryConfig: selectedRelationConfigValue,\n\t// \t\t\ttableAlias: relationTableAlias,\n\t// \t\t\tjoinOn,\n\t// \t\t\tnestedQueryRelation: relation,\n\t// \t\t});\n\t// \t\tconst field = sql`${sql.identifier(relationTableAlias)}.${sql.identifier('data')}`.as(selectedRelationTsKey);\n\t// \t\tjoins.push({\n\t// \t\t\ton: sql`true`,\n\t// \t\t\ttable: new Subquery(builtRelation.sql as SQL, {}, relationTableAlias),\n\t// \t\t\talias: relationTableAlias,\n\t// \t\t\tjoinType: 'left',\n\t// \t\t\tlateral: true,\n\t// \t\t});\n\t// \t\tselectedRelations.push({\n\t// \t\t\tdbKey: selectedRelationTsKey,\n\t// \t\t\ttsKey: selectedRelationTsKey,\n\t// \t\t\tfield,\n\t// \t\t\trelationTableTsKey: relationTableTsName,\n\t// \t\t\tisJson: true,\n\t// \t\t\tselection: builtRelation.selection,\n\t// \t\t});\n\t// \t}\n\n\t// \tconst oneRelations = initiallySelectedRelations.filter((r): r is typeof r & { relation: One } =>\n\t// \t\tis(r.relation, One)\n\t// \t);\n\n\t// \t// Process all One relations with PKs, because they can all be joined on the same level\n\t// \tfor (\n\t// \t\tconst {\n\t// \t\t\ttsKey: selectedRelationTsKey,\n\t// \t\t\tqueryConfig: selectedRelationConfigValue,\n\t// \t\t\trelation,\n\t// \t\t} of oneRelations\n\t// \t) {\n\t// \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t// \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n\t// \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t// \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t// \t\tconst relationTable = schema[relationTableTsName]!;\n\n\t// \t\tif (relationTable.primaryKey.length === 0) {\n\t// \t\t\tcontinue;\n\t// \t\t}\n\n\t// \t\tconst joinOn = and(\n\t// \t\t\t...normalizedRelation.fields.map((field, i) =>\n\t// \t\t\t\teq(\n\t// \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t// \t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t// \t\t\t\t)\n\t// \t\t\t),\n\t// \t\t);\n\t// \t\tconst builtRelation = this.buildRelationalQueryWithPK({\n\t// \t\t\tfullSchema,\n\t// \t\t\tschema,\n\t// \t\t\ttableNamesMap,\n\t// \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n\t// \t\t\ttableConfig: schema[relationTableTsName]!,\n\t// \t\t\tqueryConfig: selectedRelationConfigValue,\n\t// \t\t\ttableAlias: relationTableAlias,\n\t// \t\t\tjoinOn,\n\t// \t\t});\n\t// \t\tconst field = sql`case when ${sql.identifier(relationTableAlias)} is null then null else json_build_array(${\n\t// \t\t\tsql.join(\n\t// \t\t\t\tbuiltRelation.selection.map(({ field }) =>\n\t// \t\t\t\t\tis(field, SQL.Aliased)\n\t// \t\t\t\t\t\t? sql`${sql.identifier(relationTableAlias)}.${sql.identifier(field.fieldAlias)}`\n\t// \t\t\t\t\t\t: is(field, Column)\n\t// \t\t\t\t\t\t? aliasedTableColumn(field, relationTableAlias)\n\t// \t\t\t\t\t\t: field\n\t// \t\t\t\t),\n\t// \t\t\t\tsql`, `,\n\t// \t\t\t)\n\t// \t\t}) end`.as(selectedRelationTsKey);\n\t// \t\tconst isLateralJoin = is(builtRelation.sql, SQL);\n\t// \t\tjoins.push({\n\t// \t\t\ton: isLateralJoin ? sql`true` : joinOn,\n\t// \t\t\ttable: is(builtRelation.sql, SQL)\n\t// \t\t\t\t? new Subquery(builtRelation.sql, {}, relationTableAlias)\n\t// \t\t\t\t: aliasedTable(builtRelation.sql, relationTableAlias),\n\t// \t\t\talias: relationTableAlias,\n\t// \t\t\tjoinType: 'left',\n\t// \t\t\tlateral: is(builtRelation.sql, SQL),\n\t// \t\t});\n\t// \t\tselectedRelations.push({\n\t// \t\t\tdbKey: selectedRelationTsKey,\n\t// \t\t\ttsKey: selectedRelationTsKey,\n\t// \t\t\tfield,\n\t// \t\t\trelationTableTsKey: relationTableTsName,\n\t// \t\t\tisJson: true,\n\t// \t\t\tselection: builtRelation.selection,\n\t// \t\t});\n\t// \t}\n\n\t// \tlet distinct: PgSelectConfig['distinct'];\n\t// \tlet tableFrom: PgTable | Subquery = table;\n\n\t// \t// Process first Many relation - each one requires a nested subquery\n\t// \tconst manyRelation = manyRelations[0];\n\t// \tif (manyRelation) {\n\t// \t\tconst {\n\t// \t\t\ttsKey: selectedRelationTsKey,\n\t// \t\t\tqueryConfig: selectedRelationQueryConfig,\n\t// \t\t\trelation,\n\t// \t\t} = manyRelation;\n\n\t// \t\tdistinct = {\n\t// \t\t\ton: tableConfig.primaryKey.map((c) => aliasedTableColumn(c as PgColumn, tableAlias)),\n\t// \t\t};\n\n\t// \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t// \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n\t// \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t// \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t// \t\tconst joinOn = and(\n\t// \t\t\t...normalizedRelation.fields.map((field, i) =>\n\t// \t\t\t\teq(\n\t// \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t// \t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t// \t\t\t\t)\n\t// \t\t\t),\n\t// \t\t);\n\n\t// \t\tconst builtRelationJoin = this.buildRelationalQueryWithPK({\n\t// \t\t\tfullSchema,\n\t// \t\t\tschema,\n\t// \t\t\ttableNamesMap,\n\t// \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n\t// \t\t\ttableConfig: schema[relationTableTsName]!,\n\t// \t\t\tqueryConfig: selectedRelationQueryConfig,\n\t// \t\t\ttableAlias: relationTableAlias,\n\t// \t\t\tjoinOn,\n\t// \t\t});\n\n\t// \t\tconst builtRelationSelectionField = sql`case when ${\n\t// \t\t\tsql.identifier(relationTableAlias)\n\t// \t\t} is null then '[]' else json_agg(json_build_array(${\n\t// \t\t\tsql.join(\n\t// \t\t\t\tbuiltRelationJoin.selection.map(({ field }) =>\n\t// \t\t\t\t\tis(field, SQL.Aliased)\n\t// \t\t\t\t\t\t? sql`${sql.identifier(relationTableAlias)}.${sql.identifier(field.fieldAlias)}`\n\t// \t\t\t\t\t\t: is(field, Column)\n\t// \t\t\t\t\t\t? aliasedTableColumn(field, relationTableAlias)\n\t// \t\t\t\t\t\t: field\n\t// \t\t\t\t),\n\t// \t\t\t\tsql`, `,\n\t// \t\t\t)\n\t// \t\t})) over (partition by ${sql.join(distinct.on, sql`, `)}) end`.as(selectedRelationTsKey);\n\t// \t\tconst isLateralJoin = is(builtRelationJoin.sql, SQL);\n\t// \t\tjoins.push({\n\t// \t\t\ton: isLateralJoin ? sql`true` : joinOn,\n\t// \t\t\ttable: isLateralJoin\n\t// \t\t\t\t? new Subquery(builtRelationJoin.sql as SQL, {}, relationTableAlias)\n\t// \t\t\t\t: aliasedTable(builtRelationJoin.sql as PgTable, relationTableAlias),\n\t// \t\t\talias: relationTableAlias,\n\t// \t\t\tjoinType: 'left',\n\t// \t\t\tlateral: isLateralJoin,\n\t// \t\t});\n\n\t// \t\t// Build the \"from\" subquery with the remaining Many relations\n\t// \t\tconst builtTableFrom = this.buildRelationalQueryWithPK({\n\t// \t\t\tfullSchema,\n\t// \t\t\tschema,\n\t// \t\t\ttableNamesMap,\n\t// \t\t\ttable,\n\t// \t\t\ttableConfig,\n\t// \t\t\tqueryConfig: {\n\t// \t\t\t\t...config,\n\t// \t\t\t\twhere: undefined,\n\t// \t\t\t\torderBy: undefined,\n\t// \t\t\t\tlimit: undefined,\n\t// \t\t\t\toffset: undefined,\n\t// \t\t\t\twith: manyRelations.slice(1).reduce<NonNullable<typeof config['with']>>(\n\t// \t\t\t\t\t(result, { tsKey, queryConfig: configValue }) => {\n\t// \t\t\t\t\t\tresult[tsKey] = configValue;\n\t// \t\t\t\t\t\treturn result;\n\t// \t\t\t\t\t},\n\t// \t\t\t\t\t{},\n\t// \t\t\t\t),\n\t// \t\t\t},\n\t// \t\t\ttableAlias,\n\t// \t\t});\n\n\t// \t\tselectedRelations.push({\n\t// \t\t\tdbKey: selectedRelationTsKey,\n\t// \t\t\ttsKey: selectedRelationTsKey,\n\t// \t\t\tfield: builtRelationSelectionField,\n\t// \t\t\trelationTableTsKey: relationTableTsName,\n\t// \t\t\tisJson: true,\n\t// \t\t\tselection: builtRelationJoin.selection,\n\t// \t\t});\n\n\t// \t\t// selection = builtTableFrom.selection.map((item) =>\n\t// \t\t// \tis(item.field, SQL.Aliased)\n\t// \t\t// \t\t? { ...item, field: sql`${sql.identifier(tableAlias)}.${sql.identifier(item.field.fieldAlias)}` }\n\t// \t\t// \t\t: item\n\t// \t\t// );\n\t// \t\t// selectionForBuild = [{\n\t// \t\t// \tdbKey: '*',\n\t// \t\t// \ttsKey: '*',\n\t// \t\t// \tfield: sql`${sql.identifier(tableAlias)}.*`,\n\t// \t\t// \tselection: [],\n\t// \t\t// \tisJson: false,\n\t// \t\t// \trelationTableTsKey: undefined,\n\t// \t\t// }];\n\t// \t\t// const newSelectionItem: (typeof selection)[number] = {\n\t// \t\t// \tdbKey: selectedRelationTsKey,\n\t// \t\t// \ttsKey: selectedRelationTsKey,\n\t// \t\t// \tfield,\n\t// \t\t// \trelationTableTsKey: relationTableTsName,\n\t// \t\t// \tisJson: true,\n\t// \t\t// \tselection: builtRelationJoin.selection,\n\t// \t\t// };\n\t// \t\t// selection.push(newSelectionItem);\n\t// \t\t// selectionForBuild.push(newSelectionItem);\n\n\t// \t\ttableFrom = is(builtTableFrom.sql, PgTable)\n\t// \t\t\t? builtTableFrom.sql\n\t// \t\t\t: new Subquery(builtTableFrom.sql, {}, tableAlias);\n\t// \t}\n\n\t// \tif (selectedColumns.length === 0 && selectedRelations.length === 0 && selectedExtras.length === 0) {\n\t// \t\tthrow new DrizzleError(`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\")`);\n\t// \t}\n\n\t// \tlet selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'];\n\n\t// \tfunction prepareSelectedColumns() {\n\t// \t\treturn selectedColumns.map((key) => ({\n\t// \t\t\tdbKey: tableConfig.columns[key]!.name,\n\t// \t\t\ttsKey: key,\n\t// \t\t\tfield: tableConfig.columns[key] as PgColumn,\n\t// \t\t\trelationTableTsKey: undefined,\n\t// \t\t\tisJson: false,\n\t// \t\t\tselection: [],\n\t// \t\t}));\n\t// \t}\n\n\t// \tfunction prepareSelectedExtras() {\n\t// \t\treturn selectedExtras.map((item) => ({\n\t// \t\t\tdbKey: item.value.fieldAlias,\n\t// \t\t\ttsKey: item.tsKey,\n\t// \t\t\tfield: item.value,\n\t// \t\t\trelationTableTsKey: undefined,\n\t// \t\t\tisJson: false,\n\t// \t\t\tselection: [],\n\t// \t\t}));\n\t// \t}\n\n\t// \tif (isRoot) {\n\t// \t\tselection = [\n\t// \t\t\t...prepareSelectedColumns(),\n\t// \t\t\t...prepareSelectedExtras(),\n\t// \t\t];\n\t// \t}\n\n\t// \tif (hasUserDefinedWhere || orderBy.length > 0) {\n\t// \t\ttableFrom = new Subquery(\n\t// \t\t\tthis.buildSelectQuery({\n\t// \t\t\t\ttable: is(tableFrom, PgTable) ? aliasedTable(tableFrom, tableAlias) : tableFrom,\n\t// \t\t\t\tfields: {},\n\t// \t\t\t\tfieldsFlat: selectionForBuild.map(({ field }) => ({\n\t// \t\t\t\t\tpath: [],\n\t// \t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t// \t\t\t\t})),\n\t// \t\t\t\tjoins,\n\t// \t\t\t\tdistinct,\n\t// \t\t\t}),\n\t// \t\t\t{},\n\t// \t\t\ttableAlias,\n\t// \t\t);\n\t// \t\tselectionForBuild = selection.map((item) =>\n\t// \t\t\tis(item.field, SQL.Aliased)\n\t// \t\t\t\t? { ...item, field: sql`${sql.identifier(tableAlias)}.${sql.identifier(item.field.fieldAlias)}` }\n\t// \t\t\t\t: item\n\t// \t\t);\n\t// \t\tjoins = [];\n\t// \t\tdistinct = undefined;\n\t// \t}\n\n\t// \tconst result = this.buildSelectQuery({\n\t// \t\ttable: is(tableFrom, PgTable) ? aliasedTable(tableFrom, tableAlias) : tableFrom,\n\t// \t\tfields: {},\n\t// \t\tfieldsFlat: selectionForBuild.map(({ field }) => ({\n\t// \t\t\tpath: [],\n\t// \t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t// \t\t})),\n\t// \t\twhere,\n\t// \t\tlimit,\n\t// \t\toffset,\n\t// \t\tjoins,\n\t// \t\torderBy,\n\t// \t\tdistinct,\n\t// \t});\n\n\t// \treturn {\n\t// \t\ttableTsKey: tableConfig.tsName,\n\t// \t\tsql: result,\n\t// \t\tselection,\n\t// \t};\n\t// }\n\n\tbuildRelationalQueryWithoutPK({\n\t\tfullSchema,\n\t\tschema,\n\t\ttableNamesMap,\n\t\ttable,\n\t\ttableConfig,\n\t\tqueryConfig: config,\n\t\ttableAlias,\n\t\tnestedQueryRelation,\n\t\tjoinOn,\n\t}: {\n\t\tfullSchema: Record<string, unknown>;\n\t\tschema: TablesRelationalConfig;\n\t\ttableNamesMap: Record<string, string>;\n\t\ttable: PgTable;\n\t\ttableConfig: TableRelationalConfig;\n\t\tqueryConfig: true | DBQueryConfig<'many', true>;\n\t\ttableAlias: string;\n\t\tnestedQueryRelation?: Relation;\n\t\tjoinOn?: SQL;\n\t}): BuildRelationalQueryResult<PgTable, PgColumn> {\n\t\tlet selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = [];\n\t\tlet limit, offset, orderBy: NonNullable<PgSelectConfig['orderBy']> = [], where;\n\t\tconst joins: PgSelectJoinConfig[] = [];\n\n\t\tif (config === true) {\n\t\t\tconst selectionEntries = Object.entries(tableConfig.columns);\n\t\t\tselection = selectionEntries.map((\n\t\t\t\t[key, value],\n\t\t\t) => ({\n\t\t\t\tdbKey: value.name,\n\t\t\t\ttsKey: key,\n\t\t\t\tfield: aliasedTableColumn(value as PgColumn, tableAlias),\n\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\tisJson: false,\n\t\t\t\tselection: [],\n\t\t\t}));\n\t\t} else {\n\t\t\tconst aliasedColumns = Object.fromEntries(\n\t\t\t\tObject.entries(tableConfig.columns).map((\n\t\t\t\t\t[key, value],\n\t\t\t\t) => [key, aliasedTableColumn(value, tableAlias)]),\n\t\t\t);\n\n\t\t\tif (config.where) {\n\t\t\t\tconst whereSql = typeof config.where === 'function'\n\t\t\t\t\t? config.where(aliasedColumns, getOperators())\n\t\t\t\t\t: config.where;\n\t\t\t\twhere = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n\t\t\t}\n\n\t\t\tconst fieldsSelection: { tsKey: string; value: PgColumn | SQL.Aliased }[] = [];\n\t\t\tlet selectedColumns: string[] = [];\n\n\t\t\t// Figure out which columns to select\n\t\t\tif (config.columns) {\n\t\t\t\tlet isIncludeMode = false;\n\n\t\t\t\tfor (const [field, value] of Object.entries(config.columns)) {\n\t\t\t\t\tif (value === undefined) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (field in tableConfig.columns) {\n\t\t\t\t\t\tif (!isIncludeMode && value === true) {\n\t\t\t\t\t\t\tisIncludeMode = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tselectedColumns.push(field);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (selectedColumns.length > 0) {\n\t\t\t\t\tselectedColumns = isIncludeMode\n\t\t\t\t\t\t? selectedColumns.filter((c) => config.columns?.[c] === true)\n\t\t\t\t\t\t: Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Select all columns if selection is not specified\n\t\t\t\tselectedColumns = Object.keys(tableConfig.columns);\n\t\t\t}\n\n\t\t\tfor (const field of selectedColumns) {\n\t\t\t\tconst column = tableConfig.columns[field]! as PgColumn;\n\t\t\t\tfieldsSelection.push({ tsKey: field, value: column });\n\t\t\t}\n\n\t\t\tlet selectedRelations: {\n\t\t\t\ttsKey: string;\n\t\t\t\tqueryConfig: true | DBQueryConfig<'many', false>;\n\t\t\t\trelation: Relation;\n\t\t\t}[] = [];\n\n\t\t\t// Figure out which relations to select\n\t\t\tif (config.with) {\n\t\t\t\tselectedRelations = Object.entries(config.with)\n\t\t\t\t\t.filter((entry): entry is [typeof entry[0], NonNullable<typeof entry[1]>] => !!entry[1])\n\t\t\t\t\t.map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey]! }));\n\t\t\t}\n\n\t\t\tlet extras;\n\n\t\t\t// Figure out which extras to select\n\t\t\tif (config.extras) {\n\t\t\t\textras = typeof config.extras === 'function'\n\t\t\t\t\t? config.extras(aliasedColumns, { sql })\n\t\t\t\t\t: config.extras;\n\t\t\t\tfor (const [tsKey, value] of Object.entries(extras)) {\n\t\t\t\t\tfieldsSelection.push({\n\t\t\t\t\t\ttsKey,\n\t\t\t\t\t\tvalue: mapColumnsInAliasedSQLToAlias(value, tableAlias),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Transform `fieldsSelection` into `selection`\n\t\t\t// `fieldsSelection` shouldn't be used after this point\n\t\t\tfor (const { tsKey, value } of fieldsSelection) {\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey]!.name,\n\t\t\t\t\ttsKey,\n\t\t\t\t\tfield: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n\t\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\t\tisJson: false,\n\t\t\t\t\tselection: [],\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet orderByOrig = typeof config.orderBy === 'function'\n\t\t\t\t? config.orderBy(aliasedColumns, getOrderByOperators())\n\t\t\t\t: config.orderBy ?? [];\n\t\t\tif (!Array.isArray(orderByOrig)) {\n\t\t\t\torderByOrig = [orderByOrig];\n\t\t\t}\n\t\t\torderBy = orderByOrig.map((orderByValue) => {\n\t\t\t\tif (is(orderByValue, Column)) {\n\t\t\t\t\treturn aliasedTableColumn(orderByValue, tableAlias) as PgColumn;\n\t\t\t\t}\n\t\t\t\treturn mapColumnsInSQLToAlias(orderByValue, tableAlias);\n\t\t\t});\n\n\t\t\tlimit = config.limit;\n\t\t\toffset = config.offset;\n\n\t\t\t// Process all relations\n\t\t\tfor (\n\t\t\t\tconst {\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tqueryConfig: selectedRelationConfigValue,\n\t\t\t\t\trelation,\n\t\t\t\t} of selectedRelations\n\t\t\t) {\n\t\t\t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t\t\t\tconst relationTableName = getTableUniqueName(relation.referencedTable);\n\t\t\t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t\t\t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t\t\t\tconst joinOn = and(\n\t\t\t\t\t...normalizedRelation.fields.map((field, i) =>\n\t\t\t\t\t\teq(\n\t\t\t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t\t\t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tconst builtRelation = this.buildRelationalQueryWithoutPK({\n\t\t\t\t\tfullSchema,\n\t\t\t\t\tschema,\n\t\t\t\t\ttableNamesMap,\n\t\t\t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n\t\t\t\t\ttableConfig: schema[relationTableTsName]!,\n\t\t\t\t\tqueryConfig: is(relation, One)\n\t\t\t\t\t\t? (selectedRelationConfigValue === true\n\t\t\t\t\t\t\t? { limit: 1 }\n\t\t\t\t\t\t\t: { ...selectedRelationConfigValue, limit: 1 })\n\t\t\t\t\t\t: selectedRelationConfigValue,\n\t\t\t\t\ttableAlias: relationTableAlias,\n\t\t\t\t\tjoinOn,\n\t\t\t\t\tnestedQueryRelation: relation,\n\t\t\t\t});\n\t\t\t\tconst field = sql`${sql.identifier(relationTableAlias)}.${sql.identifier('data')}`.as(selectedRelationTsKey);\n\t\t\t\tjoins.push({\n\t\t\t\t\ton: sql`true`,\n\t\t\t\t\ttable: new Subquery(builtRelation.sql as SQL, {}, relationTableAlias),\n\t\t\t\t\talias: relationTableAlias,\n\t\t\t\t\tjoinType: 'left',\n\t\t\t\t\tlateral: true,\n\t\t\t\t});\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: selectedRelationTsKey,\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tfield,\n\t\t\t\t\trelationTableTsKey: relationTableTsName,\n\t\t\t\t\tisJson: true,\n\t\t\t\t\tselection: builtRelation.selection,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (selection.length === 0) {\n\t\t\tthrow new DrizzleError({ message: `No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\")` });\n\t\t}\n\n\t\tlet result;\n\n\t\twhere = and(joinOn, where);\n\n\t\tif (nestedQueryRelation) {\n\t\t\tlet field = sql`json_build_array(${\n\t\t\t\tsql.join(\n\t\t\t\t\tselection.map(({ field, tsKey, isJson }) =>\n\t\t\t\t\t\tisJson\n\t\t\t\t\t\t\t? sql`${sql.identifier(`${tableAlias}_${tsKey}`)}.${sql.identifier('data')}`\n\t\t\t\t\t\t\t: is(field, SQL.Aliased)\n\t\t\t\t\t\t\t? field.sql\n\t\t\t\t\t\t\t: field\n\t\t\t\t\t),\n\t\t\t\t\tsql`, `,\n\t\t\t\t)\n\t\t\t})`;\n\t\t\tif (is(nestedQueryRelation, Many)) {\n\t\t\t\tfield = sql`coalesce(json_agg(${field}${\n\t\t\t\t\torderBy.length > 0 ? sql` order by ${sql.join(orderBy, sql`, `)}` : undefined\n\t\t\t\t}), '[]'::json)`;\n\t\t\t\t// orderBy = [];\n\t\t\t}\n\t\t\tconst nestedSelection = [{\n\t\t\t\tdbKey: 'data',\n\t\t\t\ttsKey: 'data',\n\t\t\t\tfield: field.as('data'),\n\t\t\t\tisJson: true,\n\t\t\t\trelationTableTsKey: tableConfig.tsName,\n\t\t\t\tselection,\n\t\t\t}];\n\n\t\t\tconst needsSubquery = limit !== undefined || offset !== undefined || orderBy.length > 0;\n\n\t\t\tif (needsSubquery) {\n\t\t\t\tresult = this.buildSelectQuery({\n\t\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\t\tfields: {},\n\t\t\t\t\tfieldsFlat: [{\n\t\t\t\t\t\tpath: [],\n\t\t\t\t\t\tfield: sql.raw('*'),\n\t\t\t\t\t}],\n\t\t\t\t\twhere,\n\t\t\t\t\tlimit,\n\t\t\t\t\toffset,\n\t\t\t\t\torderBy,\n\t\t\t\t\tsetOperators: [],\n\t\t\t\t});\n\n\t\t\t\twhere = undefined;\n\t\t\t\tlimit = undefined;\n\t\t\t\toffset = undefined;\n\t\t\t\torderBy = [];\n\t\t\t} else {\n\t\t\t\tresult = aliasedTable(table, tableAlias);\n\t\t\t}\n\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: is(result, PgTable) ? result : new Subquery(result, {}, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: nestedSelection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t} else {\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: selection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttableTsKey: tableConfig.tsName,\n\t\t\tsql: result,\n\t\t\tselection,\n\t\t};\n\t}\n}\n"],"names":["table","select","sql","joinOn","field"],"mappings":"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","debugId":null}},
    {"offset": {"line": 7983, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/query-builders/query-builder.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { SQL, SQLWrapper } from '~/sql/index.ts';\n\nexport abstract class TypedQueryBuilder<TSelection, TResult = unknown, TConfig = unknown> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'TypedQueryBuilder';\n\n\tdeclare _: {\n\t\tselectedFields: TSelection;\n\t\tresult: TResult;\n\t\tconfig?: TConfig;\n\t};\n\n\t/** @internal */\n\tgetSelectedFields(): TSelection {\n\t\treturn this._.selectedFields;\n\t}\n\n\tabstract getSQL(): SQL;\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;;AAGpB,MAAe,kBAA0F;IAC/G,OAAA,0IAAiB,aAAU,CAAA,GAAY,oBAAA;IAAA,cAAA,GASvC,oBAAgC;QAC/B,OAAO,IAAA,CAAK,CAAA,CAAE,cAAA;IACf;AAGD","debugId":null}},
    {"offset": {"line": 8000, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/query-builders/select.ts"],"sourcesContent":["import type { CacheConfig, WithCacheConfig } from '~/cache/core/types.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport type { PgColumn } from '~/pg-core/columns/index.ts';\nimport type { PgDialect } from '~/pg-core/dialect.ts';\nimport type { PgSession, PreparedQueryConfig } from '~/pg-core/session.ts';\nimport type { SubqueryWithSelection } from '~/pg-core/subquery.ts';\nimport type { PgTable } from '~/pg-core/table.ts';\nimport { PgViewBase } from '~/pg-core/view-base.ts';\nimport { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type {\n\tBuildSubquerySelection,\n\tGetSelectTableName,\n\tGetSelectTableSelection,\n\tJoinNullability,\n\tJoinType,\n\tSelectMode,\n\tSelectResult,\n\tSetOperator,\n} from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport { SQL, View } from '~/sql/sql.ts';\nimport type { ColumnsSelection, Placeholder, Query, SQLWrapper } from '~/sql/sql.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport { tracer } from '~/tracing.ts';\nimport {\n\tapplyMixins,\n\ttype DrizzleTypeError,\n\tgetTableColumns,\n\tgetTableLikeName,\n\thaveSameKeys,\n\ttype NeonAuthToken,\n\ttype ValueOrArray,\n} from '~/utils.ts';\nimport { orderSelectedFields } from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport { extractUsedTable } from '../utils.ts';\nimport type {\n\tAnyPgSelect,\n\tCreatePgSelectFromBuilderMode,\n\tGetPgSetOperators,\n\tLockConfig,\n\tLockStrength,\n\tPgCreateSetOperatorFn,\n\tPgSelectConfig,\n\tPgSelectCrossJoinFn,\n\tPgSelectDynamic,\n\tPgSelectHKT,\n\tPgSelectHKTBase,\n\tPgSelectJoinFn,\n\tPgSelectPrepare,\n\tPgSelectWithout,\n\tPgSetOperatorExcludedMethods,\n\tPgSetOperatorWithResult,\n\tSelectedFields,\n\tSetOperatorRightSelect,\n\tTableLikeHasEmptySelection,\n} from './select.types.ts';\n\nexport class PgSelectBuilder<\n\tTSelection extends SelectedFields | undefined,\n\tTBuilderMode extends 'db' | 'qb' = 'db',\n> {\n\tstatic readonly [entityKind]: string = 'PgSelectBuilder';\n\n\tprivate fields: TSelection;\n\tprivate session: PgSession | undefined;\n\tprivate dialect: PgDialect;\n\tprivate withList: Subquery[] = [];\n\tprivate distinct: boolean | {\n\t\ton: (PgColumn | SQLWrapper)[];\n\t} | undefined;\n\n\tconstructor(\n\t\tconfig: {\n\t\t\tfields: TSelection;\n\t\t\tsession: PgSession | undefined;\n\t\t\tdialect: PgDialect;\n\t\t\twithList?: Subquery[];\n\t\t\tdistinct?: boolean | {\n\t\t\t\ton: (PgColumn | SQLWrapper)[];\n\t\t\t};\n\t\t},\n\t) {\n\t\tthis.fields = config.fields;\n\t\tthis.session = config.session;\n\t\tthis.dialect = config.dialect;\n\t\tif (config.withList) {\n\t\t\tthis.withList = config.withList;\n\t\t}\n\t\tthis.distinct = config.distinct;\n\t}\n\n\tprivate authToken?: NeonAuthToken;\n\t/** @internal */\n\tsetToken(token?: NeonAuthToken) {\n\t\tthis.authToken = token;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Specify the table, subquery, or other target that you're\n\t * building a select query against.\n\t *\n\t * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-FROM | Postgres from documentation}\n\t */\n\tfrom<TFrom extends PgTable | Subquery | PgViewBase | SQL>(\n\t\tsource: TableLikeHasEmptySelection<TFrom> extends true ? DrizzleTypeError<\n\t\t\t\t\"Cannot reference a data-modifying statement subquery if it doesn't contain a `returning` clause\"\n\t\t\t>\n\t\t\t: TFrom,\n\t): CreatePgSelectFromBuilderMode<\n\t\tTBuilderMode,\n\t\tGetSelectTableName<TFrom>,\n\t\tTSelection extends undefined ? GetSelectTableSelection<TFrom> : TSelection,\n\t\tTSelection extends undefined ? 'single' : 'partial'\n\t> {\n\t\tconst isPartialSelect = !!this.fields;\n\t\tconst src = source as TFrom;\n\n\t\tlet fields: SelectedFields;\n\t\tif (this.fields) {\n\t\t\tfields = this.fields;\n\t\t} else if (is(src, Subquery)) {\n\t\t\t// This is required to use the proxy handler to get the correct field values from the subquery\n\t\t\tfields = Object.fromEntries(\n\t\t\t\tObject.keys(src._.selectedFields).map((\n\t\t\t\t\tkey,\n\t\t\t\t) => [key, src[key as unknown as keyof typeof src] as unknown as SelectedFields[string]]),\n\t\t\t);\n\t\t} else if (is(src, PgViewBase)) {\n\t\t\tfields = src[ViewBaseConfig].selectedFields as SelectedFields;\n\t\t} else if (is(src, SQL)) {\n\t\t\tfields = {};\n\t\t} else {\n\t\t\tfields = getTableColumns<PgTable>(src);\n\t\t}\n\n\t\treturn (new PgSelectBase({\n\t\t\ttable: src,\n\t\t\tfields,\n\t\t\tisPartialSelect,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\twithList: this.withList,\n\t\t\tdistinct: this.distinct,\n\t\t}).setToken(this.authToken)) as any;\n\t}\n}\n\nexport abstract class PgSelectQueryBuilderBase<\n\tTHKT extends PgSelectHKTBase,\n\tTTableName extends string | undefined,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode,\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends TypedQueryBuilder<TSelectedFields, TResult> {\n\tstatic override readonly [entityKind]: string = 'PgSelectQueryBuilder';\n\n\toverride readonly _: {\n\t\treadonly dialect: 'pg';\n\t\treadonly hkt: THKT;\n\t\treadonly tableName: TTableName;\n\t\treadonly selection: TSelection;\n\t\treadonly selectMode: TSelectMode;\n\t\treadonly nullabilityMap: TNullabilityMap;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TResult;\n\t\treadonly selectedFields: TSelectedFields;\n\t\treadonly config: PgSelectConfig;\n\t};\n\n\tprotected config: PgSelectConfig;\n\tprotected joinsNotNullableMap: Record<string, boolean>;\n\tprotected tableName: string | undefined;\n\tprivate isPartialSelect: boolean;\n\tprotected session: PgSession | undefined;\n\tprotected dialect: PgDialect;\n\tprotected cacheConfig?: WithCacheConfig = undefined;\n\tprotected usedTables: Set<string> = new Set();\n\n\tconstructor(\n\t\t{ table, fields, isPartialSelect, session, dialect, withList, distinct }: {\n\t\t\ttable: PgSelectConfig['table'];\n\t\t\tfields: PgSelectConfig['fields'];\n\t\t\tisPartialSelect: boolean;\n\t\t\tsession: PgSession | undefined;\n\t\t\tdialect: PgDialect;\n\t\t\twithList: Subquery[];\n\t\t\tdistinct: boolean | {\n\t\t\t\ton: (PgColumn | SQLWrapper)[];\n\t\t\t} | undefined;\n\t\t},\n\t) {\n\t\tsuper();\n\t\tthis.config = {\n\t\t\twithList,\n\t\t\ttable,\n\t\t\tfields: { ...fields },\n\t\t\tdistinct,\n\t\t\tsetOperators: [],\n\t\t};\n\t\tthis.isPartialSelect = isPartialSelect;\n\t\tthis.session = session;\n\t\tthis.dialect = dialect;\n\t\tthis._ = {\n\t\t\tselectedFields: fields as TSelectedFields,\n\t\t\tconfig: this.config,\n\t\t} as this['_'];\n\t\tthis.tableName = getTableLikeName(table);\n\t\tthis.joinsNotNullableMap = typeof this.tableName === 'string' ? { [this.tableName]: true } : {};\n\n\t\tfor (const item of extractUsedTable(table)) this.usedTables.add(item);\n\t}\n\n\t/** @internal */\n\tgetUsedTables() {\n\t\treturn [...this.usedTables];\n\t}\n\n\tprivate createJoin<\n\t\tTJoinType extends JoinType,\n\t\tTIsLateral extends (TJoinType extends 'full' | 'right' ? false : boolean),\n\t>(\n\t\tjoinType: TJoinType,\n\t\tlateral: TIsLateral,\n\t): 'cross' extends TJoinType ? PgSelectCrossJoinFn<this, TDynamic, TIsLateral>\n\t\t: PgSelectJoinFn<this, TDynamic, TJoinType, TIsLateral>\n\t{\n\t\treturn ((\n\t\t\ttable: TIsLateral extends true ? Subquery | SQL : PgTable | Subquery | PgViewBase | SQL,\n\t\t\ton?: ((aliases: TSelection) => SQL | undefined) | SQL | undefined,\n\t\t) => {\n\t\t\tconst baseTableName = this.tableName;\n\t\t\tconst tableName = getTableLikeName(table);\n\n\t\t\t// store all tables used in a query\n\t\t\tfor (const item of extractUsedTable(table)) this.usedTables.add(item);\n\n\t\t\tif (typeof tableName === 'string' && this.config.joins?.some((join) => join.alias === tableName)) {\n\t\t\t\tthrow new Error(`Alias \"${tableName}\" is already used in this query`);\n\t\t\t}\n\n\t\t\tif (!this.isPartialSelect) {\n\t\t\t\t// If this is the first join and this is not a partial select and we're not selecting from raw SQL, \"move\" the fields from the main table to the nested object\n\t\t\t\tif (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === 'string') {\n\t\t\t\t\tthis.config.fields = {\n\t\t\t\t\t\t[baseTableName]: this.config.fields,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (typeof tableName === 'string' && !is(table, SQL)) {\n\t\t\t\t\tconst selection = is(table, Subquery)\n\t\t\t\t\t\t? table._.selectedFields\n\t\t\t\t\t\t: is(table, View)\n\t\t\t\t\t\t? table[ViewBaseConfig].selectedFields\n\t\t\t\t\t\t: table[Table.Symbol.Columns];\n\t\t\t\t\tthis.config.fields[tableName] = selection;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof on === 'function') {\n\t\t\t\ton = on(\n\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\tthis.config.fields,\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as TSelection,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!this.config.joins) {\n\t\t\t\tthis.config.joins = [];\n\t\t\t}\n\n\t\t\tthis.config.joins.push({ on, table, joinType, alias: tableName, lateral });\n\n\t\t\tif (typeof tableName === 'string') {\n\t\t\t\tswitch (joinType) {\n\t\t\t\t\tcase 'left': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'right': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'cross':\n\t\t\t\t\tcase 'inner': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'full': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this as any;\n\t\t}) as any;\n\t}\n\n\t/**\n\t * Executes a `left join` operation by adding another table to the current query.\n\t *\n\t * Calling this method associates each row of the table with the corresponding row from the joined table, if a match is found. If no matching row exists, it sets all columns of the joined table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#left-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet | null; }[] = await db.select()\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number | null; }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tleftJoin = this.createJoin('left', false);\n\n\t/**\n\t * Executes a `left join lateral` operation by adding subquery to the current query.\n\t *\n\t * A `lateral` join allows the right-hand expression to refer to columns from the left-hand side.\n\t *\n\t * Calling this method associates each row of the table with the corresponding row from the joined table, if a match is found. If no matching row exists, it sets all columns of the joined table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#left-join-lateral}\n\t *\n\t * @param table the subquery to join.\n\t * @param on the `on` clause.\n\t */\n\tleftJoinLateral = this.createJoin('left', true);\n\n\t/**\n\t * Executes a `right join` operation by adding another table to the current query.\n\t *\n\t * Calling this method associates each row of the joined table with the corresponding row from the main table, if a match is found. If no matching row exists, it sets all columns of the main table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#right-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet; }[] = await db.select()\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number; }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\trightJoin = this.createJoin('right', false);\n\n\t/**\n\t * Executes an `inner join` operation, creating a new table by combining rows from two tables that have matching values.\n\t *\n\t * Calling this method retrieves rows that have corresponding entries in both joined tables. Rows without matching entries in either table are excluded, resulting in a table that includes only matching pairs.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#inner-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet; }[] = await db.select()\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number; }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tinnerJoin = this.createJoin('inner', false);\n\n\t/**\n\t * Executes an `inner join lateral` operation, creating a new table by combining rows from two queries that have matching values.\n\t *\n\t * A `lateral` join allows the right-hand expression to refer to columns from the left-hand side.\n\t *\n\t * Calling this method retrieves rows that have corresponding entries in both joined tables. Rows without matching entries in either table are excluded, resulting in a table that includes only matching pairs.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#inner-join-lateral}\n\t *\n\t * @param table the subquery to join.\n\t * @param on the `on` clause.\n\t */\n\tinnerJoinLateral = this.createJoin('inner', true);\n\n\t/**\n\t * Executes a `full join` operation by combining rows from two tables into a new table.\n\t *\n\t * Calling this method retrieves all rows from both main and joined tables, merging rows with matching values and filling in `null` for non-matching columns.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#full-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet | null; }[] = await db.select()\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number | null; }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tfullJoin = this.createJoin('full', false);\n\n\t/**\n\t * Executes a `cross join` operation by combining rows from two tables into a new table.\n\t *\n\t * Calling this method retrieves all rows from both main and joined tables, merging all rows from each table.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#cross-join}\n\t *\n\t * @param table the table to join.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users, each user with every pet\n\t * const usersWithPets: { user: User; pets: Pet; }[] = await db.select()\n\t *   .from(users)\n\t *   .crossJoin(pets)\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number; }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .crossJoin(pets)\n\t * ```\n\t */\n\tcrossJoin = this.createJoin('cross', false);\n\n\t/**\n\t * Executes a `cross join lateral` operation by combining rows from two queries into a new table.\n\t *\n\t * A `lateral` join allows the right-hand expression to refer to columns from the left-hand side.\n\t *\n\t * Calling this method retrieves all rows from both main and joined queries, merging all rows from each query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#cross-join-lateral}\n\t *\n\t * @param table the query to join.\n\t */\n\tcrossJoinLateral = this.createJoin('cross', true);\n\n\tprivate createSetOperator(\n\t\ttype: SetOperator,\n\t\tisAll: boolean,\n\t): <TValue extends PgSetOperatorWithResult<TResult>>(\n\t\trightSelection:\n\t\t\t| ((setOperators: GetPgSetOperators) => SetOperatorRightSelect<TValue, TResult>)\n\t\t\t| SetOperatorRightSelect<TValue, TResult>,\n\t) => PgSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tPgSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\treturn (rightSelection) => {\n\t\t\tconst rightSelect = (typeof rightSelection === 'function'\n\t\t\t\t? rightSelection(getPgSetOperators())\n\t\t\t\t: rightSelection) as TypedQueryBuilder<\n\t\t\t\t\tany,\n\t\t\t\t\tTResult\n\t\t\t\t>;\n\n\t\t\tif (!haveSameKeys(this.getSelectedFields(), rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.config.setOperators.push({ type, isAll, rightSelect });\n\t\t\treturn this as any;\n\t\t};\n\t}\n\n\t/**\n\t * Adds `union` set operator to the query.\n\t *\n\t * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all unique names from customers and users tables\n\t * await db.select({ name: users.name })\n\t *   .from(users)\n\t *   .union(\n\t *     db.select({ name: customers.name }).from(customers)\n\t *   );\n\t * // or\n\t * import { union } from 'drizzle-orm/pg-core'\n\t *\n\t * await union(\n\t *   db.select({ name: users.name }).from(users),\n\t *   db.select({ name: customers.name }).from(customers)\n\t * );\n\t * ```\n\t */\n\tunion = this.createSetOperator('union', false);\n\n\t/**\n\t * Adds `union all` set operator to the query.\n\t *\n\t * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all transaction ids from both online and in-store sales\n\t * await db.select({ transaction: onlineSales.transactionId })\n\t *   .from(onlineSales)\n\t *   .unionAll(\n\t *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t *   );\n\t * // or\n\t * import { unionAll } from 'drizzle-orm/pg-core'\n\t *\n\t * await unionAll(\n\t *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n\t *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t * );\n\t * ```\n\t */\n\tunionAll = this.createSetOperator('union', true);\n\n\t/**\n\t * Adds `intersect` set operator to the query.\n\t *\n\t * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select course names that are offered in both departments A and B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .intersect(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { intersect } from 'drizzle-orm/pg-core'\n\t *\n\t * await intersect(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\tintersect = this.createSetOperator('intersect', false);\n\n\t/**\n\t * Adds `intersect all` set operator to the query.\n\t *\n\t * Calling this method will retain only the rows that are present in both result sets including all duplicates.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect-all}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all products and quantities that are ordered by both regular and VIP customers\n\t * await db.select({\n\t *   productId: regularCustomerOrders.productId,\n\t *   quantityOrdered: regularCustomerOrders.quantityOrdered\n\t * })\n\t * .from(regularCustomerOrders)\n\t * .intersectAll(\n\t *   db.select({\n\t *     productId: vipCustomerOrders.productId,\n\t *     quantityOrdered: vipCustomerOrders.quantityOrdered\n\t *   })\n\t *   .from(vipCustomerOrders)\n\t * );\n\t * // or\n\t * import { intersectAll } from 'drizzle-orm/pg-core'\n\t *\n\t * await intersectAll(\n\t *   db.select({\n\t *     productId: regularCustomerOrders.productId,\n\t *     quantityOrdered: regularCustomerOrders.quantityOrdered\n\t *   })\n\t *   .from(regularCustomerOrders),\n\t *   db.select({\n\t *     productId: vipCustomerOrders.productId,\n\t *     quantityOrdered: vipCustomerOrders.quantityOrdered\n\t *   })\n\t *   .from(vipCustomerOrders)\n\t * );\n\t * ```\n\t */\n\tintersectAll = this.createSetOperator('intersect', true);\n\n\t/**\n\t * Adds `except` set operator to the query.\n\t *\n\t * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all courses offered in department A but not in department B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .except(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { except } from 'drizzle-orm/pg-core'\n\t *\n\t * await except(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\texcept = this.createSetOperator('except', false);\n\n\t/**\n\t * Adds `except all` set operator to the query.\n\t *\n\t * Calling this method will retrieve all rows from the left query, except for the rows that are present in the result set of the right query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#except-all}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all products that are ordered by regular customers but not by VIP customers\n\t * await db.select({\n\t *   productId: regularCustomerOrders.productId,\n\t *   quantityOrdered: regularCustomerOrders.quantityOrdered,\n\t * })\n\t * .from(regularCustomerOrders)\n\t * .exceptAll(\n\t *   db.select({\n\t *     productId: vipCustomerOrders.productId,\n\t *     quantityOrdered: vipCustomerOrders.quantityOrdered,\n\t *   })\n\t *   .from(vipCustomerOrders)\n\t * );\n\t * // or\n\t * import { exceptAll } from 'drizzle-orm/pg-core'\n\t *\n\t * await exceptAll(\n\t *   db.select({\n\t *     productId: regularCustomerOrders.productId,\n\t *     quantityOrdered: regularCustomerOrders.quantityOrdered\n\t *   })\n\t *   .from(regularCustomerOrders),\n\t *   db.select({\n\t *     productId: vipCustomerOrders.productId,\n\t *     quantityOrdered: vipCustomerOrders.quantityOrdered\n\t *   })\n\t *   .from(vipCustomerOrders)\n\t * );\n\t * ```\n\t */\n\texceptAll = this.createSetOperator('except', true);\n\n\t/** @internal */\n\taddSetOperators(setOperators: PgSelectConfig['setOperators']): PgSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tPgSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\tthis.config.setOperators.push(...setOperators);\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `where` clause to the query.\n\t *\n\t * Calling this method will select only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#filtering}\n\t *\n\t * @param where the `where` clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be selected.\n\t *\n\t * ```ts\n\t * // Select all cars with green color\n\t * await db.select().from(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * await db.select().from(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Select all BMW cars with a green color\n\t * await db.select().from(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Select all cars with the green or blue color\n\t * await db.select().from(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(\n\t\twhere: ((aliases: this['_']['selection']) => SQL | undefined) | SQL | undefined,\n\t): PgSelectWithout<this, TDynamic, 'where'> {\n\t\tif (typeof where === 'function') {\n\t\t\twhere = where(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `having` clause to the query.\n\t *\n\t * Calling this method will select only those rows that fulfill a specified condition. It is typically used with aggregate functions to filter the aggregated data based on a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @param having the `having` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all brands with more than one car\n\t * await db.select({\n\t * \tbrand: cars.brand,\n\t * \tcount: sql<number>`cast(count(${cars.id}) as int)`,\n\t * })\n\t *   .from(cars)\n\t *   .groupBy(cars.brand)\n\t *   .having(({ count }) => gt(count, 1));\n\t * ```\n\t */\n\thaving(\n\t\thaving: ((aliases: this['_']['selection']) => SQL | undefined) | SQL | undefined,\n\t): PgSelectWithout<this, TDynamic, 'having'> {\n\t\tif (typeof having === 'function') {\n\t\t\thaving = having(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.having = having;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `group by` clause to the query.\n\t *\n\t * Calling this method will group rows that have the same values into summary rows, often used for aggregation purposes.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Group and count people by their last names\n\t * await db.select({\n\t *    lastName: people.lastName,\n\t *    count: sql<number>`cast(count(*) as int)`\n\t * })\n\t *   .from(people)\n\t *   .groupBy(people.lastName);\n\t * ```\n\t */\n\tgroupBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<PgColumn | SQL | SQL.Aliased>,\n\t): PgSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(...columns: (PgColumn | SQL | SQL.Aliased)[]): PgSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<PgColumn | SQL | SQL.Aliased>]\n\t\t\t| (PgColumn | SQL | SQL.Aliased)[]\n\t): PgSelectWithout<this, TDynamic, 'groupBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst groupBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t\tthis.config.groupBy = Array.isArray(groupBy) ? groupBy : [groupBy];\n\t\t} else {\n\t\t\tthis.config.groupBy = columns as (PgColumn | SQL | SQL.Aliased)[];\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `order by` clause to the query.\n\t *\n\t * Calling this method will sort the result-set in ascending or descending order. By default, the sort order is ascending.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#order-by}\n\t *\n\t * @example\n\t *\n\t * ```\n\t * // Select cars ordered by year\n\t * await db.select().from(cars).orderBy(cars.year);\n\t * ```\n\t *\n\t * You can specify whether results are in ascending or descending order with the `asc()` and `desc()` operators.\n\t *\n\t * ```ts\n\t * // Select cars ordered by year in descending order\n\t * await db.select().from(cars).orderBy(desc(cars.year));\n\t *\n\t * // Select cars ordered by year and price\n\t * await db.select().from(cars).orderBy(asc(cars.year), desc(cars.price));\n\t * ```\n\t */\n\torderBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<PgColumn | SQL | SQL.Aliased>,\n\t): PgSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (PgColumn | SQL | SQL.Aliased)[]): PgSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<PgColumn | SQL | SQL.Aliased>]\n\t\t\t| (PgColumn | SQL | SQL.Aliased)[]\n\t): PgSelectWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t} else {\n\t\t\tconst orderByArray = columns as (PgColumn | SQL | SQL.Aliased)[];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `limit` clause to the query.\n\t *\n\t * Calling this method will set the maximum number of rows that will be returned by this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t *\n\t * @param limit the `limit` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Get the first 10 people from this query.\n\t * await db.select().from(people).limit(10);\n\t * ```\n\t */\n\tlimit(limit: number | Placeholder): PgSelectWithout<this, TDynamic, 'limit'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.limit = limit;\n\t\t} else {\n\t\t\tthis.config.limit = limit;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `offset` clause to the query.\n\t *\n\t * Calling this method will skip a number of rows when returning results from this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t *\n\t * @param offset the `offset` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Get the 10th-20th people from this query.\n\t * await db.select().from(people).offset(10).limit(10);\n\t * ```\n\t */\n\toffset(offset: number | Placeholder): PgSelectWithout<this, TDynamic, 'offset'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.offset = offset;\n\t\t} else {\n\t\t\tthis.config.offset = offset;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `for` clause to the query.\n\t *\n\t * Calling this method will specify a lock strength for this query that controls how strictly it acquires exclusive access to the rows being queried.\n\t *\n\t * See docs: {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-FOR-UPDATE-SHARE}\n\t *\n\t * @param strength the lock strength.\n\t * @param config the lock configuration.\n\t */\n\tfor(strength: LockStrength, config: LockConfig = {}): PgSelectWithout<this, TDynamic, 'for'> {\n\t\tthis.config.lockingClause = { strength, config };\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildSelectQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\tas<TAlias extends string>(\n\t\talias: TAlias,\n\t): SubqueryWithSelection<this['_']['selectedFields'], TAlias> {\n\t\tconst usedTables: string[] = [];\n\t\tusedTables.push(...extractUsedTable(this.config.table));\n\t\tif (this.config.joins) { for (const it of this.config.joins) usedTables.push(...extractUsedTable(it.table)); }\n\n\t\treturn new Proxy(\n\t\t\tnew Subquery(this.getSQL(), this.config.fields, alias, false, [...new Set(usedTables)]),\n\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as SubqueryWithSelection<this['_']['selectedFields'], TAlias>;\n\t}\n\n\t/** @internal */\n\toverride getSelectedFields(): this['_']['selectedFields'] {\n\t\treturn new Proxy(\n\t\t\tthis.config.fields,\n\t\t\tnew SelectionProxyHandler({ alias: this.tableName, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as this['_']['selectedFields'];\n\t}\n\n\t$dynamic(): PgSelectDynamic<this> {\n\t\treturn this;\n\t}\n\n\t$withCache(config?: { config?: CacheConfig; tag?: string; autoInvalidate?: boolean } | false) {\n\t\tthis.cacheConfig = config === undefined\n\t\t\t? { config: {}, enable: true, autoInvalidate: true }\n\t\t\t: config === false\n\t\t\t? { enable: false }\n\t\t\t: { enable: true, autoInvalidate: true, ...config };\n\t\treturn this;\n\t}\n}\n\nexport interface PgSelectBase<\n\tTTableName extends string | undefined,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode,\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends\n\tPgSelectQueryBuilderBase<\n\t\tPgSelectHKT,\n\t\tTTableName,\n\t\tTSelection,\n\t\tTSelectMode,\n\t\tTNullabilityMap,\n\t\tTDynamic,\n\t\tTExcludedMethods,\n\t\tTResult,\n\t\tTSelectedFields\n\t>,\n\tQueryPromise<TResult>,\n\tSQLWrapper\n{}\n\nexport class PgSelectBase<\n\tTTableName extends string | undefined,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode,\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends PgSelectQueryBuilderBase<\n\tPgSelectHKT,\n\tTTableName,\n\tTSelection,\n\tTSelectMode,\n\tTNullabilityMap,\n\tTDynamic,\n\tTExcludedMethods,\n\tTResult,\n\tTSelectedFields\n> implements RunnableQuery<TResult, 'pg'>, SQLWrapper {\n\tstatic override readonly [entityKind]: string = 'PgSelect';\n\n\t/** @internal */\n\t_prepare(name?: string): PgSelectPrepare<this> {\n\t\tconst { session, config, dialect, joinsNotNullableMap, authToken, cacheConfig, usedTables } = this;\n\t\tif (!session) {\n\t\t\tthrow new Error('Cannot execute a query on a query builder. Please use a database instance instead.');\n\t\t}\n\n\t\tconst { fields } = config;\n\n\t\treturn tracer.startActiveSpan('drizzle.prepareQuery', () => {\n\t\t\tconst fieldsList = orderSelectedFields<PgColumn>(fields);\n\t\t\tconst query = session.prepareQuery<\n\t\t\t\tPreparedQueryConfig & { execute: TResult }\n\t\t\t>(dialect.sqlToQuery(this.getSQL()), fieldsList, name, true, undefined, {\n\t\t\t\ttype: 'select',\n\t\t\t\ttables: [...usedTables],\n\t\t\t}, cacheConfig);\n\t\t\tquery.joinsNotNullableMap = joinsNotNullableMap;\n\n\t\t\treturn query.setToken(authToken);\n\t\t});\n\t}\n\n\t/**\n\t * Create a prepared statement for this query. This allows\n\t * the database to remember this query for the given session\n\t * and call it by name, rather than specifying the full query.\n\t *\n\t * {@link https://www.postgresql.org/docs/current/sql-prepare.html | Postgres prepare documentation}\n\t */\n\tprepare(name: string): PgSelectPrepare<this> {\n\t\treturn this._prepare(name);\n\t}\n\n\tprivate authToken?: NeonAuthToken;\n\t/** @internal */\n\tsetToken(token?: NeonAuthToken) {\n\t\tthis.authToken = token;\n\t\treturn this;\n\t}\n\n\texecute: ReturnType<this['prepare']>['execute'] = (placeholderValues) => {\n\t\treturn tracer.startActiveSpan('drizzle.operation', () => {\n\t\t\treturn this._prepare().execute(placeholderValues, this.authToken);\n\t\t});\n\t};\n}\n\napplyMixins(PgSelectBase, [QueryPromise]);\n\nfunction createSetOperator(type: SetOperator, isAll: boolean): PgCreateSetOperatorFn {\n\treturn (leftSelect, rightSelect, ...restSelects) => {\n\t\tconst setOperators = [rightSelect, ...restSelects].map((select) => ({\n\t\t\ttype,\n\t\t\tisAll,\n\t\t\trightSelect: select as AnyPgSelect,\n\t\t}));\n\n\t\tfor (const setOperator of setOperators) {\n\t\t\tif (!haveSameKeys((leftSelect as any).getSelectedFields(), setOperator.rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn (leftSelect as AnyPgSelect).addSetOperators(setOperators) as any;\n\t};\n}\n\nconst getPgSetOperators = () => ({\n\tunion,\n\tunionAll,\n\tintersect,\n\tintersectAll,\n\texcept,\n\texceptAll,\n});\n\n/**\n * Adds `union` set operator to the query.\n *\n * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n *\n * @example\n *\n * ```ts\n * // Select all unique names from customers and users tables\n * import { union } from 'drizzle-orm/pg-core'\n *\n * await union(\n *   db.select({ name: users.name }).from(users),\n *   db.select({ name: customers.name }).from(customers)\n * );\n * // or\n * await db.select({ name: users.name })\n *   .from(users)\n *   .union(\n *     db.select({ name: customers.name }).from(customers)\n *   );\n * ```\n */\nexport const union = createSetOperator('union', false);\n\n/**\n * Adds `union all` set operator to the query.\n *\n * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n *\n * @example\n *\n * ```ts\n * // Select all transaction ids from both online and in-store sales\n * import { unionAll } from 'drizzle-orm/pg-core'\n *\n * await unionAll(\n *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n * );\n * // or\n * await db.select({ transaction: onlineSales.transactionId })\n *   .from(onlineSales)\n *   .unionAll(\n *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n *   );\n * ```\n */\nexport const unionAll = createSetOperator('union', true);\n\n/**\n * Adds `intersect` set operator to the query.\n *\n * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n *\n * @example\n *\n * ```ts\n * // Select course names that are offered in both departments A and B\n * import { intersect } from 'drizzle-orm/pg-core'\n *\n * await intersect(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .intersect(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const intersect = createSetOperator('intersect', false);\n\n/**\n * Adds `intersect all` set operator to the query.\n *\n * Calling this method will retain only the rows that are present in both result sets including all duplicates.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect-all}\n *\n * @example\n *\n * ```ts\n * // Select all products and quantities that are ordered by both regular and VIP customers\n * import { intersectAll } from 'drizzle-orm/pg-core'\n *\n * await intersectAll(\n *   db.select({\n *     productId: regularCustomerOrders.productId,\n *     quantityOrdered: regularCustomerOrders.quantityOrdered\n *   })\n *   .from(regularCustomerOrders),\n *   db.select({\n *     productId: vipCustomerOrders.productId,\n *     quantityOrdered: vipCustomerOrders.quantityOrdered\n *   })\n *   .from(vipCustomerOrders)\n * );\n * // or\n * await db.select({\n *   productId: regularCustomerOrders.productId,\n *   quantityOrdered: regularCustomerOrders.quantityOrdered\n * })\n * .from(regularCustomerOrders)\n * .intersectAll(\n *   db.select({\n *     productId: vipCustomerOrders.productId,\n *     quantityOrdered: vipCustomerOrders.quantityOrdered\n *   })\n *   .from(vipCustomerOrders)\n * );\n * ```\n */\nexport const intersectAll = createSetOperator('intersect', true);\n\n/**\n * Adds `except` set operator to the query.\n *\n * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n *\n * @example\n *\n * ```ts\n * // Select all courses offered in department A but not in department B\n * import { except } from 'drizzle-orm/pg-core'\n *\n * await except(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .except(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const except = createSetOperator('except', false);\n\n/**\n * Adds `except all` set operator to the query.\n *\n * Calling this method will retrieve all rows from the left query, except for the rows that are present in the result set of the right query.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#except-all}\n *\n * @example\n *\n * ```ts\n * // Select all products that are ordered by regular customers but not by VIP customers\n * import { exceptAll } from 'drizzle-orm/pg-core'\n *\n * await exceptAll(\n *   db.select({\n *     productId: regularCustomerOrders.productId,\n *     quantityOrdered: regularCustomerOrders.quantityOrdered\n *   })\n *   .from(regularCustomerOrders),\n *   db.select({\n *     productId: vipCustomerOrders.productId,\n *     quantityOrdered: vipCustomerOrders.quantityOrdered\n *   })\n *   .from(vipCustomerOrders)\n * );\n * // or\n * await db.select({\n *   productId: regularCustomerOrders.productId,\n *   quantityOrdered: regularCustomerOrders.quantityOrdered,\n * })\n * .from(regularCustomerOrders)\n * .exceptAll(\n *   db.select({\n *     productId: vipCustomerOrders.productId,\n *     quantityOrdered: vipCustomerOrders.quantityOrdered,\n *   })\n *   .from(vipCustomerOrders)\n * );\n * ```\n */\nexport const exceptAll = createSetOperator('except', true);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 8865, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/query-builders/query-builder.ts"],"sourcesContent":["import { entityKind, is } from '~/entity.ts';\nimport type { PgDialectConfig } from '~/pg-core/dialect.ts';\nimport { PgDialect } from '~/pg-core/dialect.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport type { PgColumn } from '../columns/index.ts';\nimport type { WithBuilder } from '../subquery.ts';\nimport { PgSelectBuilder } from './select.ts';\nimport type { SelectedFields } from './select.types.ts';\n\nexport class QueryBuilder {\n\tstatic readonly [entityKind]: string = 'PgQueryBuilder';\n\n\tprivate dialect: PgDialect | undefined;\n\tprivate dialectConfig: PgDialectConfig | undefined;\n\n\tconstructor(dialect?: PgDialect | PgDialectConfig) {\n\t\tthis.dialect = is(dialect, PgDialect) ? dialect : undefined;\n\t\tthis.dialectConfig = is(dialect, PgDialect) ? undefined : dialect;\n\t}\n\n\t$with: WithBuilder = (alias: string, selection?: ColumnsSelection) => {\n\t\tconst queryBuilder = this;\n\t\tconst as = (\n\t\t\tqb:\n\t\t\t\t| TypedQueryBuilder<ColumnsSelection | undefined>\n\t\t\t\t| SQL\n\t\t\t\t| ((qb: QueryBuilder) => TypedQueryBuilder<ColumnsSelection | undefined> | SQL),\n\t\t) => {\n\t\t\tif (typeof qb === 'function') {\n\t\t\t\tqb = qb(queryBuilder);\n\t\t\t}\n\n\t\t\treturn new Proxy(\n\t\t\t\tnew WithSubquery(\n\t\t\t\t\tqb.getSQL(),\n\t\t\t\t\tselection ?? ('getSelectedFields' in qb ? qb.getSelectedFields() ?? {} : {}) as SelectedFields,\n\t\t\t\t\talias,\n\t\t\t\t\ttrue,\n\t\t\t\t),\n\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t) as any;\n\t\t};\n\t\treturn { as };\n\t};\n\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\tfunction select(): PgSelectBuilder<undefined, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): PgSelectBuilder<TSelection | undefined, 'qb'> {\n\t\t\treturn new PgSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\tfunction selectDistinct(): PgSelectBuilder<undefined, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): PgSelectBuilder<TSelection | undefined, 'qb'> {\n\t\t\treturn new PgSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\tfunction selectDistinctOn(on: (PgColumn | SQLWrapper)[]): PgSelectBuilder<undefined, 'qb'>;\n\t\tfunction selectDistinctOn<TSelection extends SelectedFields>(\n\t\t\ton: (PgColumn | SQLWrapper)[],\n\t\t\tfields: TSelection,\n\t\t): PgSelectBuilder<TSelection, 'qb'>;\n\t\tfunction selectDistinctOn<TSelection extends SelectedFields>(\n\t\t\ton: (PgColumn | SQLWrapper)[],\n\t\t\tfields?: TSelection,\n\t\t): PgSelectBuilder<TSelection | undefined, 'qb'> {\n\t\t\treturn new PgSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\tdistinct: { on },\n\t\t\t});\n\t\t}\n\n\t\treturn { select, selectDistinct, selectDistinctOn };\n\t}\n\n\tselect(): PgSelectBuilder<undefined, 'qb'>;\n\tselect<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection, 'qb'>;\n\tselect<TSelection extends SelectedFields>(fields?: TSelection): PgSelectBuilder<TSelection | undefined, 'qb'> {\n\t\treturn new PgSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: undefined,\n\t\t\tdialect: this.getDialect(),\n\t\t});\n\t}\n\n\tselectDistinct(): PgSelectBuilder<undefined>;\n\tselectDistinct<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection>;\n\tselectDistinct<TSelection extends SelectedFields>(fields?: TSelection): PgSelectBuilder<TSelection | undefined> {\n\t\treturn new PgSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: undefined,\n\t\t\tdialect: this.getDialect(),\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\tselectDistinctOn(on: (PgColumn | SQLWrapper)[]): PgSelectBuilder<undefined>;\n\tselectDistinctOn<TSelection extends SelectedFields>(\n\t\ton: (PgColumn | SQLWrapper)[],\n\t\tfields: TSelection,\n\t): PgSelectBuilder<TSelection>;\n\tselectDistinctOn<TSelection extends SelectedFields>(\n\t\ton: (PgColumn | SQLWrapper)[],\n\t\tfields?: TSelection,\n\t): PgSelectBuilder<TSelection | undefined> {\n\t\treturn new PgSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: undefined,\n\t\t\tdialect: this.getDialect(),\n\t\t\tdistinct: { on },\n\t\t});\n\t}\n\n\t// Lazy load dialect to avoid circular dependency\n\tprivate getDialect() {\n\t\tif (!this.dialect) {\n\t\t\tthis.dialect = new PgDialect(this.dialectConfig);\n\t\t}\n\n\t\treturn this.dialect;\n\t}\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,YAAY,UAAU;AAE/B,SAAS,iBAAiB;AAE1B,SAAS,6BAA6B;AAEtC,SAAS,oBAAoB;AAG7B,SAAS,uBAAuB;;;;;;AAGzB,MAAM,aAAa;IACzB,OAAA,0IAAiB,aAAU,CAAA,GAAY,iBAAA;IAE/B,QAAA;IACA,cAAA;IAER,YAAY,OAAA,CAAuC;QAClD,IAAA,CAAK,OAAA,OAAU,8IAAA,EAAG,iKAAS,YAAS,IAAI,UAAU,KAAA;QAClD,IAAA,CAAK,aAAA,gJAAgB,KAAA,EAAG,gKAAS,aAAS,IAAI,KAAA,IAAY;IAC3D;IAEA,QAAqB,CAAC,OAAe,cAAiC;QACrE,MAAM,eAAe,IAAA;QACrB,MAAM,KAAK,CACV,OAII;YACJ,IAAI,OAAO,OAAO,YAAY;gBAC7B,KAAK,GAAG,YAAY;YACrB;YAEA,OAAO,IAAI,MACV,+IAAI,eAAA,CACH,GAAG,MAAA,CAAO,GACV,aAAA,CAAc,uBAAuB,KAAK,GAAG,iBAAA,CAAkB,KAAK,CAAC,IAAI,CAAC,CAAA,GAC1E,OACA,OAED,yJAAI,wBAAA,CAAsB;gBAAE;gBAAO,oBAAoB;gBAAS,aAAa;YAAQ,CAAC;QAExF;QACA,OAAO;YAAE;QAAG;IACb,EAAA;IAEA,KAAA,GAAQ,OAAA,EAAyB;QAChC,MAAM,OAAO,IAAA;QAIb,SAAS,OACR,MAAA,EACgD;YAChD,OAAO,gLAAI,kBAAA,CAAgB;gBAC1B,QAAQ,UAAU,KAAA;gBAClB,SAAS,KAAA;gBACT,SAAS,KAAK,UAAA,CAAW;gBACzB,UAAU;YACX,CAAC;QACF;QAIA,SAAS,eACR,MAAA,EACgD;YAChD,OAAO,+KAAI,mBAAA,CAAgB;gBAC1B,QAAQ,UAAU,KAAA;gBAClB,SAAS,KAAA;gBACT,SAAS,KAAK,UAAA,CAAW;gBACzB,UAAU;YACX,CAAC;QACF;QAOA,SAAS,iBACR,EAAA,EACA,MAAA,EACgD;YAChD,OAAO,gLAAI,kBAAA,CAAgB;gBAC1B,QAAQ,UAAU,KAAA;gBAClB,SAAS,KAAA;gBACT,SAAS,KAAK,UAAA,CAAW;gBACzB,UAAU;oBAAE;gBAAG;YAChB,CAAC;QACF;QAEA,OAAO;YAAE;YAAQ;YAAgB;QAAiB;IACnD;IAIA,OAA0C,MAAA,EAAoE;QAC7G,OAAO,+KAAI,mBAAA,CAAgB;YAC1B,QAAQ,UAAU,KAAA;YAClB,SAAS,KAAA;YACT,SAAS,IAAA,CAAK,UAAA,CAAW;QAC1B,CAAC;IACF;IAIA,eAAkD,MAAA,EAA8D;QAC/G,OAAO,gLAAI,kBAAA,CAAgB;YAC1B,QAAQ,UAAU,KAAA;YAClB,SAAS,KAAA;YACT,SAAS,IAAA,CAAK,UAAA,CAAW;YACzB,UAAU;QACX,CAAC;IACF;IAOA,iBACC,EAAA,EACA,MAAA,EAC0C;QAC1C,OAAO,gLAAI,kBAAA,CAAgB;YAC1B,QAAQ,UAAU,KAAA;YAClB,SAAS,KAAA;YACT,SAAS,IAAA,CAAK,UAAA,CAAW;YACzB,UAAU;gBAAE;YAAG;QAChB,CAAC;IACF;IAAA,iDAAA;IAGQ,aAAa;QACpB,IAAI,CAAC,IAAA,CAAK,OAAA,EAAS;YAClB,IAAA,CAAK,OAAA,GAAU,4JAAI,YAAA,CAAU,IAAA,CAAK,aAAa;QAChD;QAEA,OAAO,IAAA,CAAK,OAAA;IACb;AACD","debugId":null}},
    {"offset": {"line": 8975, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/view.ts"],"sourcesContent":["import type { BuildColumns } from '~/column-builder.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { AddAliasToSelection } from '~/query-builders/select.types.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, SQL } from '~/sql/sql.ts';\nimport { getTableColumns } from '~/utils.ts';\nimport type { RequireAtLeastOne } from '~/utils.ts';\nimport type { PgColumn, PgColumnBuilderBase } from './columns/common.ts';\nimport { QueryBuilder } from './query-builders/query-builder.ts';\nimport { pgTable } from './table.ts';\nimport { PgViewBase } from './view-base.ts';\nimport { PgViewConfig } from './view-common.ts';\n\nexport type ViewWithConfig = RequireAtLeastOne<{\n\tcheckOption: 'local' | 'cascaded';\n\tsecurityBarrier: boolean;\n\tsecurityInvoker: boolean;\n}>;\n\nexport class DefaultViewBuilderCore<TConfig extends { name: string; columns?: unknown }> {\n\tstatic readonly [entityKind]: string = 'PgDefaultViewBuilderCore';\n\n\tdeclare readonly _: {\n\t\treadonly name: TConfig['name'];\n\t\treadonly columns: TConfig['columns'];\n\t};\n\n\tconstructor(\n\t\tprotected name: TConfig['name'],\n\t\tprotected schema: string | undefined,\n\t) {}\n\n\tprotected config: {\n\t\twith?: ViewWithConfig;\n\t} = {};\n\n\twith(config: ViewWithConfig): this {\n\t\tthis.config.with = config;\n\t\treturn this;\n\t}\n}\n\nexport class ViewBuilder<TName extends string = string> extends DefaultViewBuilderCore<{ name: TName }> {\n\tstatic override readonly [entityKind]: string = 'PgViewBuilder';\n\n\tas<TSelectedFields extends ColumnsSelection>(\n\t\tqb: TypedQueryBuilder<TSelectedFields> | ((qb: QueryBuilder) => TypedQueryBuilder<TSelectedFields>),\n\t): PgViewWithSelection<TName, false, AddAliasToSelection<TSelectedFields, TName, 'pg'>> {\n\t\tif (typeof qb === 'function') {\n\t\t\tqb = qb(new QueryBuilder());\n\t\t}\n\t\tconst selectionProxy = new SelectionProxyHandler<TSelectedFields>({\n\t\t\talias: this.name,\n\t\t\tsqlBehavior: 'error',\n\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\treplaceOriginalName: true,\n\t\t});\n\t\tconst aliasedSelection = new Proxy(qb.getSelectedFields(), selectionProxy);\n\t\treturn new Proxy(\n\t\t\tnew PgView({\n\t\t\t\tpgConfig: this.config,\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: this.schema,\n\t\t\t\t\tselectedFields: aliasedSelection,\n\t\t\t\t\tquery: qb.getSQL().inlineParams(),\n\t\t\t\t},\n\t\t\t}),\n\t\t\tselectionProxy as any,\n\t\t) as PgViewWithSelection<TName, false, AddAliasToSelection<TSelectedFields, TName, 'pg'>>;\n\t}\n}\n\nexport class ManualViewBuilder<\n\tTName extends string = string,\n\tTColumns extends Record<string, PgColumnBuilderBase> = Record<string, PgColumnBuilderBase>,\n> extends DefaultViewBuilderCore<{ name: TName; columns: TColumns }> {\n\tstatic override readonly [entityKind]: string = 'PgManualViewBuilder';\n\n\tprivate columns: Record<string, PgColumn>;\n\n\tconstructor(\n\t\tname: TName,\n\t\tcolumns: TColumns,\n\t\tschema: string | undefined,\n\t) {\n\t\tsuper(name, schema);\n\t\tthis.columns = getTableColumns(pgTable(name, columns));\n\t}\n\n\texisting(): PgViewWithSelection<TName, true, BuildColumns<TName, TColumns, 'pg'>> {\n\t\treturn new Proxy(\n\t\t\tnew PgView({\n\t\t\t\tpgConfig: undefined,\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: this.schema,\n\t\t\t\t\tselectedFields: this.columns,\n\t\t\t\t\tquery: undefined,\n\t\t\t\t},\n\t\t\t}),\n\t\t\tnew SelectionProxyHandler({\n\t\t\t\talias: this.name,\n\t\t\t\tsqlBehavior: 'error',\n\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\treplaceOriginalName: true,\n\t\t\t}),\n\t\t) as PgViewWithSelection<TName, true, BuildColumns<TName, TColumns, 'pg'>>;\n\t}\n\n\tas(query: SQL): PgViewWithSelection<TName, false, BuildColumns<TName, TColumns, 'pg'>> {\n\t\treturn new Proxy(\n\t\t\tnew PgView({\n\t\t\t\tpgConfig: this.config,\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: this.schema,\n\t\t\t\t\tselectedFields: this.columns,\n\t\t\t\t\tquery: query.inlineParams(),\n\t\t\t\t},\n\t\t\t}),\n\t\t\tnew SelectionProxyHandler({\n\t\t\t\talias: this.name,\n\t\t\t\tsqlBehavior: 'error',\n\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\treplaceOriginalName: true,\n\t\t\t}),\n\t\t) as PgViewWithSelection<TName, false, BuildColumns<TName, TColumns, 'pg'>>;\n\t}\n}\n\nexport type PgMaterializedViewWithConfig = RequireAtLeastOne<{\n\tfillfactor: number;\n\ttoastTupleTarget: number;\n\tparallelWorkers: number;\n\tautovacuumEnabled: boolean;\n\tvacuumIndexCleanup: 'auto' | 'off' | 'on';\n\tvacuumTruncate: boolean;\n\tautovacuumVacuumThreshold: number;\n\tautovacuumVacuumScaleFactor: number;\n\tautovacuumVacuumCostDelay: number;\n\tautovacuumVacuumCostLimit: number;\n\tautovacuumFreezeMinAge: number;\n\tautovacuumFreezeMaxAge: number;\n\tautovacuumFreezeTableAge: number;\n\tautovacuumMultixactFreezeMinAge: number;\n\tautovacuumMultixactFreezeMaxAge: number;\n\tautovacuumMultixactFreezeTableAge: number;\n\tlogAutovacuumMinDuration: number;\n\tuserCatalogTable: boolean;\n}>;\n\nexport class MaterializedViewBuilderCore<TConfig extends { name: string; columns?: unknown }> {\n\tstatic readonly [entityKind]: string = 'PgMaterializedViewBuilderCore';\n\n\tdeclare _: {\n\t\treadonly name: TConfig['name'];\n\t\treadonly columns: TConfig['columns'];\n\t};\n\n\tconstructor(\n\t\tprotected name: TConfig['name'],\n\t\tprotected schema: string | undefined,\n\t) {}\n\n\tprotected config: {\n\t\twith?: PgMaterializedViewWithConfig;\n\t\tusing?: string;\n\t\ttablespace?: string;\n\t\twithNoData?: boolean;\n\t} = {};\n\n\tusing(using: string): this {\n\t\tthis.config.using = using;\n\t\treturn this;\n\t}\n\n\twith(config: PgMaterializedViewWithConfig): this {\n\t\tthis.config.with = config;\n\t\treturn this;\n\t}\n\n\ttablespace(tablespace: string): this {\n\t\tthis.config.tablespace = tablespace;\n\t\treturn this;\n\t}\n\n\twithNoData(): this {\n\t\tthis.config.withNoData = true;\n\t\treturn this;\n\t}\n}\n\nexport class MaterializedViewBuilder<TName extends string = string>\n\textends MaterializedViewBuilderCore<{ name: TName }>\n{\n\tstatic override readonly [entityKind]: string = 'PgMaterializedViewBuilder';\n\n\tas<TSelectedFields extends ColumnsSelection>(\n\t\tqb: TypedQueryBuilder<TSelectedFields> | ((qb: QueryBuilder) => TypedQueryBuilder<TSelectedFields>),\n\t): PgMaterializedViewWithSelection<TName, false, AddAliasToSelection<TSelectedFields, TName, 'pg'>> {\n\t\tif (typeof qb === 'function') {\n\t\t\tqb = qb(new QueryBuilder());\n\t\t}\n\t\tconst selectionProxy = new SelectionProxyHandler<TSelectedFields>({\n\t\t\talias: this.name,\n\t\t\tsqlBehavior: 'error',\n\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\treplaceOriginalName: true,\n\t\t});\n\t\tconst aliasedSelection = new Proxy(qb.getSelectedFields(), selectionProxy);\n\t\treturn new Proxy(\n\t\t\tnew PgMaterializedView({\n\t\t\t\tpgConfig: {\n\t\t\t\t\twith: this.config.with,\n\t\t\t\t\tusing: this.config.using,\n\t\t\t\t\ttablespace: this.config.tablespace,\n\t\t\t\t\twithNoData: this.config.withNoData,\n\t\t\t\t},\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: this.schema,\n\t\t\t\t\tselectedFields: aliasedSelection,\n\t\t\t\t\tquery: qb.getSQL().inlineParams(),\n\t\t\t\t},\n\t\t\t}),\n\t\t\tselectionProxy as any,\n\t\t) as PgMaterializedViewWithSelection<TName, false, AddAliasToSelection<TSelectedFields, TName, 'pg'>>;\n\t}\n}\n\nexport class ManualMaterializedViewBuilder<\n\tTName extends string = string,\n\tTColumns extends Record<string, PgColumnBuilderBase> = Record<string, PgColumnBuilderBase>,\n> extends MaterializedViewBuilderCore<{ name: TName; columns: TColumns }> {\n\tstatic override readonly [entityKind]: string = 'PgManualMaterializedViewBuilder';\n\n\tprivate columns: Record<string, PgColumn>;\n\n\tconstructor(\n\t\tname: TName,\n\t\tcolumns: TColumns,\n\t\tschema: string | undefined,\n\t) {\n\t\tsuper(name, schema);\n\t\tthis.columns = getTableColumns(pgTable(name, columns));\n\t}\n\n\texisting(): PgMaterializedViewWithSelection<TName, true, BuildColumns<TName, TColumns, 'pg'>> {\n\t\treturn new Proxy(\n\t\t\tnew PgMaterializedView({\n\t\t\t\tpgConfig: {\n\t\t\t\t\ttablespace: this.config.tablespace,\n\t\t\t\t\tusing: this.config.using,\n\t\t\t\t\twith: this.config.with,\n\t\t\t\t\twithNoData: this.config.withNoData,\n\t\t\t\t},\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: this.schema,\n\t\t\t\t\tselectedFields: this.columns,\n\t\t\t\t\tquery: undefined,\n\t\t\t\t},\n\t\t\t}),\n\t\t\tnew SelectionProxyHandler({\n\t\t\t\talias: this.name,\n\t\t\t\tsqlBehavior: 'error',\n\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\treplaceOriginalName: true,\n\t\t\t}),\n\t\t) as PgMaterializedViewWithSelection<TName, true, BuildColumns<TName, TColumns, 'pg'>>;\n\t}\n\n\tas(query: SQL): PgMaterializedViewWithSelection<TName, false, BuildColumns<TName, TColumns, 'pg'>> {\n\t\treturn new Proxy(\n\t\t\tnew PgMaterializedView({\n\t\t\t\tpgConfig: {\n\t\t\t\t\ttablespace: this.config.tablespace,\n\t\t\t\t\tusing: this.config.using,\n\t\t\t\t\twith: this.config.with,\n\t\t\t\t\twithNoData: this.config.withNoData,\n\t\t\t\t},\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: this.schema,\n\t\t\t\t\tselectedFields: this.columns,\n\t\t\t\t\tquery: query.inlineParams(),\n\t\t\t\t},\n\t\t\t}),\n\t\t\tnew SelectionProxyHandler({\n\t\t\t\talias: this.name,\n\t\t\t\tsqlBehavior: 'error',\n\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\treplaceOriginalName: true,\n\t\t\t}),\n\t\t) as PgMaterializedViewWithSelection<TName, false, BuildColumns<TName, TColumns, 'pg'>>;\n\t}\n}\n\nexport class PgView<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelectedFields extends ColumnsSelection = ColumnsSelection,\n> extends PgViewBase<TName, TExisting, TSelectedFields> {\n\tstatic override readonly [entityKind]: string = 'PgView';\n\n\t[PgViewConfig]: {\n\t\twith?: ViewWithConfig;\n\t} | undefined;\n\n\tconstructor({ pgConfig, config }: {\n\t\tpgConfig: {\n\t\t\twith?: ViewWithConfig;\n\t\t} | undefined;\n\t\tconfig: {\n\t\t\tname: TName;\n\t\t\tschema: string | undefined;\n\t\t\tselectedFields: ColumnsSelection;\n\t\t\tquery: SQL | undefined;\n\t\t};\n\t}) {\n\t\tsuper(config);\n\t\tif (pgConfig) {\n\t\t\tthis[PgViewConfig] = {\n\t\t\t\twith: pgConfig.with,\n\t\t\t};\n\t\t}\n\t}\n}\n\nexport type PgViewWithSelection<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelectedFields extends ColumnsSelection = ColumnsSelection,\n> = PgView<TName, TExisting, TSelectedFields> & TSelectedFields;\n\nexport const PgMaterializedViewConfig = Symbol.for('drizzle:PgMaterializedViewConfig');\n\nexport class PgMaterializedView<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelectedFields extends ColumnsSelection = ColumnsSelection,\n> extends PgViewBase<TName, TExisting, TSelectedFields> {\n\tstatic override readonly [entityKind]: string = 'PgMaterializedView';\n\n\treadonly [PgMaterializedViewConfig]: {\n\t\treadonly with?: PgMaterializedViewWithConfig;\n\t\treadonly using?: string;\n\t\treadonly tablespace?: string;\n\t\treadonly withNoData?: boolean;\n\t} | undefined;\n\n\tconstructor({ pgConfig, config }: {\n\t\tpgConfig: {\n\t\t\twith: PgMaterializedViewWithConfig | undefined;\n\t\t\tusing: string | undefined;\n\t\t\ttablespace: string | undefined;\n\t\t\twithNoData: boolean | undefined;\n\t\t} | undefined;\n\t\tconfig: {\n\t\t\tname: TName;\n\t\t\tschema: string | undefined;\n\t\t\tselectedFields: ColumnsSelection;\n\t\t\tquery: SQL | undefined;\n\t\t};\n\t}) {\n\t\tsuper(config);\n\t\tthis[PgMaterializedViewConfig] = {\n\t\t\twith: pgConfig?.with,\n\t\t\tusing: pgConfig?.using,\n\t\t\ttablespace: pgConfig?.tablespace,\n\t\t\twithNoData: pgConfig?.withNoData,\n\t\t};\n\t}\n}\n\nexport type PgMaterializedViewWithSelection<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelectedFields extends ColumnsSelection = ColumnsSelection,\n> = PgMaterializedView<TName, TExisting, TSelectedFields> & TSelectedFields;\n\n/** @internal */\nexport function pgViewWithSchema(\n\tname: string,\n\tselection: Record<string, PgColumnBuilderBase> | undefined,\n\tschema: string | undefined,\n): ViewBuilder | ManualViewBuilder {\n\tif (selection) {\n\t\treturn new ManualViewBuilder(name, selection, schema);\n\t}\n\treturn new ViewBuilder(name, schema);\n}\n\n/** @internal */\nexport function pgMaterializedViewWithSchema(\n\tname: string,\n\tselection: Record<string, PgColumnBuilderBase> | undefined,\n\tschema: string | undefined,\n): MaterializedViewBuilder | ManualMaterializedViewBuilder {\n\tif (selection) {\n\t\treturn new ManualMaterializedViewBuilder(name, selection, schema);\n\t}\n\treturn new MaterializedViewBuilder(name, schema);\n}\n\nexport function pgView<TName extends string>(name: TName): ViewBuilder<TName>;\nexport function pgView<TName extends string, TColumns extends Record<string, PgColumnBuilderBase>>(\n\tname: TName,\n\tcolumns: TColumns,\n): ManualViewBuilder<TName, TColumns>;\nexport function pgView(name: string, columns?: Record<string, PgColumnBuilderBase>): ViewBuilder | ManualViewBuilder {\n\treturn pgViewWithSchema(name, columns, undefined);\n}\n\nexport function pgMaterializedView<TName extends string>(name: TName): MaterializedViewBuilder<TName>;\nexport function pgMaterializedView<TName extends string, TColumns extends Record<string, PgColumnBuilderBase>>(\n\tname: TName,\n\tcolumns: TColumns,\n): ManualMaterializedViewBuilder<TName, TColumns>;\nexport function pgMaterializedView(\n\tname: string,\n\tcolumns?: Record<string, PgColumnBuilderBase>,\n): MaterializedViewBuilder | ManualMaterializedViewBuilder {\n\treturn pgMaterializedViewWithSchema(name, columns, undefined);\n}\n\nexport function isPgView(obj: unknown): obj is PgView {\n\treturn is(obj, PgView);\n}\n\nexport function isPgMaterializedView(obj: unknown): obj is PgMaterializedView {\n\treturn is(obj, PgMaterializedView);\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 9241, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/utils.ts"],"sourcesContent":["import { is } from '~/entity.ts';\nimport { PgTable } from '~/pg-core/table.ts';\nimport { SQL } from '~/sql/sql.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { Schema, Table } from '~/table.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport { type Check, CheckBuilder } from './checks.ts';\nimport type { AnyPgColumn } from './columns/index.ts';\nimport { type ForeignKey, ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { Index } from './indexes.ts';\nimport { IndexBuilder } from './indexes.ts';\nimport { PgPolicy } from './policies.ts';\nimport { type PrimaryKey, PrimaryKeyBuilder } from './primary-keys.ts';\nimport { type UniqueConstraint, UniqueConstraintBuilder } from './unique-constraint.ts';\nimport type { PgViewBase } from './view-base.ts';\nimport { PgViewConfig } from './view-common.ts';\nimport { type PgMaterializedView, PgMaterializedViewConfig, type PgView } from './view.ts';\n\nexport function getTableConfig<TTable extends PgTable>(table: TTable) {\n\tconst columns = Object.values(table[Table.Symbol.Columns]);\n\tconst indexes: Index[] = [];\n\tconst checks: Check[] = [];\n\tconst primaryKeys: PrimaryKey[] = [];\n\tconst foreignKeys: ForeignKey[] = Object.values(table[PgTable.Symbol.InlineForeignKeys]);\n\tconst uniqueConstraints: UniqueConstraint[] = [];\n\tconst name = table[Table.Symbol.Name];\n\tconst schema = table[Table.Symbol.Schema];\n\tconst policies: PgPolicy[] = [];\n\tconst enableRLS: boolean = table[PgTable.Symbol.EnableRLS];\n\n\tconst extraConfigBuilder = table[PgTable.Symbol.ExtraConfigBuilder];\n\n\tif (extraConfigBuilder !== undefined) {\n\t\tconst extraConfig = extraConfigBuilder(table[Table.Symbol.ExtraConfigColumns]);\n\t\tconst extraValues = Array.isArray(extraConfig) ? extraConfig.flat(1) as any[] : Object.values(extraConfig);\n\t\tfor (const builder of extraValues) {\n\t\t\tif (is(builder, IndexBuilder)) {\n\t\t\t\tindexes.push(builder.build(table));\n\t\t\t} else if (is(builder, CheckBuilder)) {\n\t\t\t\tchecks.push(builder.build(table));\n\t\t\t} else if (is(builder, UniqueConstraintBuilder)) {\n\t\t\t\tuniqueConstraints.push(builder.build(table));\n\t\t\t} else if (is(builder, PrimaryKeyBuilder)) {\n\t\t\t\tprimaryKeys.push(builder.build(table));\n\t\t\t} else if (is(builder, ForeignKeyBuilder)) {\n\t\t\t\tforeignKeys.push(builder.build(table));\n\t\t\t} else if (is(builder, PgPolicy)) {\n\t\t\t\tpolicies.push(builder);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tcolumns,\n\t\tindexes,\n\t\tforeignKeys,\n\t\tchecks,\n\t\tprimaryKeys,\n\t\tuniqueConstraints,\n\t\tname,\n\t\tschema,\n\t\tpolicies,\n\t\tenableRLS,\n\t};\n}\n\nexport function extractUsedTable(table: PgTable | Subquery | PgViewBase | SQL): string[] {\n\tif (is(table, PgTable)) {\n\t\treturn [table[Schema] ? `${table[Schema]}.${table[Table.Symbol.BaseName]}` : table[Table.Symbol.BaseName]];\n\t}\n\tif (is(table, Subquery)) {\n\t\treturn table._.usedTables ?? [];\n\t}\n\tif (is(table, SQL)) {\n\t\treturn table.usedTables ?? [];\n\t}\n\treturn [];\n}\n\nexport function getViewConfig<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n>(view: PgView<TName, TExisting>) {\n\treturn {\n\t\t...view[ViewBaseConfig],\n\t\t...view[PgViewConfig],\n\t};\n}\n\nexport function getMaterializedViewConfig<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n>(view: PgMaterializedView<TName, TExisting>) {\n\treturn {\n\t\t...view[ViewBaseConfig],\n\t\t...view[PgMaterializedViewConfig],\n\t};\n}\n\nexport type ColumnsWithTable<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends AnyPgColumn<{ tableName: TTableName }>[],\n> = { [Key in keyof TColumns]: AnyPgColumn<{ tableName: TForeignTableName }> };\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 9351, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/query-builders/delete.ts"],"sourcesContent":["import type { WithCacheConfig } from '~/cache/core/types.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { PgDialect } from '~/pg-core/dialect.ts';\nimport type {\n\tPgPreparedQuery,\n\tPgQueryResultHKT,\n\tPgQueryResultKind,\n\tPgSession,\n\tPreparedQueryConfig,\n} from '~/pg-core/session.ts';\nimport type { PgTable } from '~/pg-core/table.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport { getTableName, Table } from '~/table.ts';\nimport { tracer } from '~/tracing.ts';\nimport { type NeonAuthToken, orderSelectedFields } from '~/utils.ts';\nimport type { PgColumn } from '../columns/common.ts';\nimport { extractUsedTable } from '../utils.ts';\nimport type { SelectedFieldsFlat, SelectedFieldsOrdered } from './select.types.ts';\n\nexport type PgDeleteWithout<\n\tT extends AnyPgDeleteBase,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T\n\t: Omit<\n\t\tPgDeleteBase<\n\t\t\tT['_']['table'],\n\t\t\tT['_']['queryResult'],\n\t\t\tT['_']['selectedFields'],\n\t\t\tT['_']['returning'],\n\t\t\tTDynamic,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>,\n\t\tT['_']['excludedMethods'] | K\n\t>;\n\nexport type PgDelete<\n\tTTable extends PgTable = PgTable,\n\tTQueryResult extends PgQueryResultHKT = PgQueryResultHKT,\n\tTSelectedFields extends ColumnsSelection | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = Record<string, unknown> | undefined,\n> = PgDeleteBase<TTable, TQueryResult, TSelectedFields, TReturning, true, never>;\n\nexport interface PgDeleteConfig {\n\twhere?: SQL | undefined;\n\ttable: PgTable;\n\treturningFields?: SelectedFieldsFlat;\n\treturning?: SelectedFieldsOrdered;\n\twithList?: Subquery[];\n}\n\nexport type PgDeleteReturningAll<\n\tT extends AnyPgDeleteBase,\n\tTDynamic extends boolean,\n> = PgDeleteWithout<\n\tPgDeleteBase<\n\t\tT['_']['table'],\n\t\tT['_']['queryResult'],\n\t\tT['_']['table']['_']['columns'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type PgDeleteReturning<\n\tT extends AnyPgDeleteBase,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFieldsFlat,\n> = PgDeleteWithout<\n\tPgDeleteBase<\n\t\tT['_']['table'],\n\t\tT['_']['queryResult'],\n\t\tTSelectedFields,\n\t\tSelectResultFields<TSelectedFields>,\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type PgDeletePrepare<T extends AnyPgDeleteBase> = PgPreparedQuery<\n\tPreparedQueryConfig & {\n\t\texecute: T['_']['returning'] extends undefined ? PgQueryResultKind<T['_']['queryResult'], never>\n\t\t\t: T['_']['returning'][];\n\t}\n>;\n\nexport type PgDeleteDynamic<T extends AnyPgDeleteBase> = PgDelete<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tT['_']['selectedFields'],\n\tT['_']['returning']\n>;\n\nexport type AnyPgDeleteBase = PgDeleteBase<any, any, any, any, any, any>;\n\nexport interface PgDeleteBase<\n\tTTable extends PgTable,\n\tTQueryResult extends PgQueryResultHKT,\n\tTSelectedFields extends ColumnsSelection | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tTypedQueryBuilder<\n\t\tTSelectedFields,\n\t\tTReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]\n\t>,\n\tQueryPromise<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[], 'pg'>,\n\tSQLWrapper\n{\n\treadonly _: {\n\t\treadonly dialect: 'pg';\n\t\treadonly table: TTable;\n\t\treadonly queryResult: TQueryResult;\n\t\treadonly selectedFields: TSelectedFields;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[];\n\t};\n}\n\nexport class PgDeleteBase<\n\tTTable extends PgTable,\n\tTQueryResult extends PgQueryResultHKT,\n\tTSelectedFields extends ColumnsSelection | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]>\n\timplements\n\t\tTypedQueryBuilder<\n\t\t\tTSelectedFields,\n\t\t\tTReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]\n\t\t>,\n\t\tRunnableQuery<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[], 'pg'>,\n\t\tSQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'PgDelete';\n\n\tprivate config: PgDeleteConfig;\n\tprotected cacheConfig?: WithCacheConfig;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tprivate session: PgSession,\n\t\tprivate dialect: PgDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, withList };\n\t}\n\n\t/**\n\t * Adds a `where` clause to the query.\n\t *\n\t * Calling this method will delete only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *\n\t * @param where the `where` clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be deleted.\n\t *\n\t * ```ts\n\t * // Delete all cars with green color\n\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * await db.delete(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Delete all BMW cars with a green color\n\t * await db.delete(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Delete all cars with the green or blue color\n\t * await db.delete(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): PgDeleteWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the deleted rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete#delete-with-return}\n\t *\n\t * @example\n\t * ```ts\n\t * // Delete all cars with the green color and return all fields\n\t * const deletedCars: Car[] = await db.delete(cars)\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning();\n\t *\n\t * // Delete all cars with the green color and return only their id and brand fields\n\t * const deletedCarsIdsAndBrands: { id: number, brand: string }[] = await db.delete(cars)\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning({ id: cars.id, brand: cars.brand });\n\t * ```\n\t */\n\treturning(): PgDeleteReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFieldsFlat>(\n\t\tfields: TSelectedFields,\n\t): PgDeleteReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFieldsFlat = this.config.table[Table.Symbol.Columns],\n\t): PgDeleteReturning<this, TDynamic, any> {\n\t\tthis.config.returningFields = fields;\n\t\tthis.config.returning = orderSelectedFields<PgColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildDeleteQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(name?: string): PgDeletePrepare<this> {\n\t\treturn tracer.startActiveSpan('drizzle.prepareQuery', () => {\n\t\t\treturn this.session.prepareQuery<\n\t\t\t\tPreparedQueryConfig & {\n\t\t\t\t\texecute: TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[];\n\t\t\t\t}\n\t\t\t>(this.dialect.sqlToQuery(this.getSQL()), this.config.returning, name, true, undefined, {\n\t\t\t\ttype: 'delete',\n\t\t\t\ttables: extractUsedTable(this.config.table),\n\t\t\t}, this.cacheConfig);\n\t\t});\n\t}\n\n\tprepare(name: string): PgDeletePrepare<this> {\n\t\treturn this._prepare(name);\n\t}\n\n\tprivate authToken?: NeonAuthToken;\n\t/** @internal */\n\tsetToken(token?: NeonAuthToken) {\n\t\tthis.authToken = token;\n\t\treturn this;\n\t}\n\n\toverride execute: ReturnType<this['prepare']>['execute'] = (placeholderValues) => {\n\t\treturn tracer.startActiveSpan('drizzle.operation', () => {\n\t\t\treturn this._prepare().execute(placeholderValues, this.authToken);\n\t\t});\n\t};\n\n\t/** @internal */\n\tgetSelectedFields(): this['_']['selectedFields'] {\n\t\treturn (\n\t\t\tthis.config.returningFields\n\t\t\t\t? new Proxy(\n\t\t\t\t\tthis.config.returningFields,\n\t\t\t\t\tnew SelectionProxyHandler({\n\t\t\t\t\t\talias: getTableName(this.config.table),\n\t\t\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\t\t\tsqlBehavior: 'error',\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\t: undefined\n\t\t) as this['_']['selectedFields'];\n\t}\n\n\t$dynamic(): PgDeleteDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n"],"names":[],"mappings":";;;AACA,SAAS,kBAAkB;AAY3B,SAAS,oBAAoB;AAE7B,SAAS,6BAA6B;AAGtC,SAAS,cAAc,aAAa;AACpC,SAAS,cAAc;AACvB,SAA6B,2BAA2B;AAExD,SAAS,wBAAwB;;;;;;;;AAgH1B,MAAM,wKAQH,eAAA,CAQV;IAMC,YACC,KAAA,EACQ,OAAA,EACA,OAAA,EACR,QAAA,CACC;QACD,KAAA,CAAM;QAJE,IAAA,CAAA,OAAA,GAAA;QACA,IAAA,CAAA,OAAA,GAAA;QAIR,IAAA,CAAK,MAAA,GAAS;YAAE;YAAO;QAAS;IACjC;IAbA,OAAA,0IAA0B,aAAU,CAAA,GAAY,WAAA;IAExC,OAAA;IACE,YAAA;IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA,GAyCV,MAAM,KAAA,EAAkE;QACvE,IAAA,CAAK,MAAA,CAAO,KAAA,GAAQ;QACpB,OAAO,IAAA;IACR;IA0BA,UACC,SAA6B,IAAA,CAAK,MAAA,CAAO,KAAA,yIAAM,QAAA,CAAM,MAAA,CAAO,OAAO,CAAA,EAC1B;QACzC,IAAA,CAAK,MAAA,CAAO,eAAA,GAAkB;QAC9B,IAAA,CAAK,MAAA,CAAO,SAAA,+IAAY,sBAAA,EAA8B,MAAM;QAC5D,OAAO,IAAA;IACR;IAAA,cAAA,GAGA,SAAc;QACb,OAAO,IAAA,CAAK,OAAA,CAAQ,gBAAA,CAAiB,IAAA,CAAK,MAAM;IACjD;IAEA,QAAe;QACd,MAAM,EAAE,SAAS,QAAA,EAAU,GAAG,KAAK,CAAA,GAAI,IAAA,CAAK,OAAA,CAAQ,UAAA,CAAW,IAAA,CAAK,MAAA,CAAO,CAAC;QAC5E,OAAO;IACR;IAAA,cAAA,GAGA,SAAS,IAAA,EAAsC;QAC9C,gJAAO,UAAA,CAAO,eAAA,CAAgB,wBAAwB,MAAM;YAC3D,OAAO,IAAA,CAAK,OAAA,CAAQ,YAAA,CAIlB,IAAA,CAAK,OAAA,CAAQ,UAAA,CAAW,IAAA,CAAK,MAAA,CAAO,CAAC,GAAG,IAAA,CAAK,MAAA,CAAO,SAAA,EAAW,MAAM,MAAM,KAAA,GAAW;gBACvF,MAAM;gBACN,kKAAQ,mBAAA,EAAiB,IAAA,CAAK,MAAA,CAAO,KAAK;YAC3C,GAAG,IAAA,CAAK,WAAW;QACpB,CAAC;IACF;IAEA,QAAQ,IAAA,EAAqC;QAC5C,OAAO,IAAA,CAAK,QAAA,CAAS,IAAI;IAC1B;IAEQ,UAAA;IAAA,cAAA,GAER,SAAS,KAAA,EAAuB;QAC/B,IAAA,CAAK,SAAA,GAAY;QACjB,OAAO,IAAA;IACR;IAES,UAAkD,CAAC,sBAAsB;QACjF,iJAAO,SAAA,CAAO,eAAA,CAAgB,qBAAqB,MAAM;YACxD,OAAO,IAAA,CAAK,QAAA,CAAS,EAAE,OAAA,CAAQ,mBAAmB,IAAA,CAAK,SAAS;QACjE,CAAC;IACF,EAAA;IAAA,cAAA,GAGA,oBAAiD;QAChD,OACC,IAAA,CAAK,MAAA,CAAO,eAAA,GACT,IAAI,MACL,IAAA,CAAK,MAAA,CAAO,eAAA,EACZ,yJAAI,wBAAA,CAAsB;YACzB,mJAAO,eAAA,EAAa,IAAA,CAAK,MAAA,CAAO,KAAK;YACrC,oBAAoB;YACpB,aAAa;QACd,CAAC,KAEA,KAAA;IAEL;IAEA,WAAkC;QACjC,OAAO,IAAA;IACR;AACD","debugId":null}},
    {"offset": {"line": 9463, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/query-builders/insert.ts"],"sourcesContent":["import type { WithCacheConfig } from '~/cache/core/types.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport type { PgDialect } from '~/pg-core/dialect.ts';\nimport type { IndexColumn } from '~/pg-core/indexes.ts';\nimport type {\n\tPgPreparedQuery,\n\tPgQueryResultHKT,\n\tPgQueryResultKind,\n\tPgSession,\n\tPreparedQueryConfig,\n} from '~/pg-core/session.ts';\nimport type { PgTable, TableConfig } from '~/pg-core/table.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, Placeholder, Query, SQLWrapper } from '~/sql/sql.ts';\nimport { Param, SQL, sql } from '~/sql/sql.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport type { InferInsertModel } from '~/table.ts';\nimport { Columns, getTableName, Table } from '~/table.ts';\nimport { tracer } from '~/tracing.ts';\nimport { haveSameKeys, mapUpdateSet, type NeonAuthToken, orderSelectedFields } from '~/utils.ts';\nimport type { AnyPgColumn, PgColumn } from '../columns/common.ts';\nimport { extractUsedTable } from '../utils.ts';\nimport { QueryBuilder } from './query-builder.ts';\nimport type { SelectedFieldsFlat, SelectedFieldsOrdered } from './select.types.ts';\nimport type { PgUpdateSetSource } from './update.ts';\n\nexport interface PgInsertConfig<TTable extends PgTable = PgTable> {\n\ttable: TTable;\n\tvalues: Record<string, Param | SQL>[] | PgInsertSelectQueryBuilder<TTable> | SQL;\n\twithList?: Subquery[];\n\tonConflict?: SQL;\n\treturningFields?: SelectedFieldsFlat;\n\treturning?: SelectedFieldsOrdered;\n\tselect?: boolean;\n\toverridingSystemValue_?: boolean;\n}\n\nexport type PgInsertValue<TTable extends PgTable<TableConfig>, OverrideT extends boolean = false> =\n\t& {\n\t\t[Key in keyof InferInsertModel<TTable, { dbColumnNames: false; override: OverrideT }>]:\n\t\t\t| InferInsertModel<TTable, { dbColumnNames: false; override: OverrideT }>[Key]\n\t\t\t| SQL\n\t\t\t| Placeholder;\n\t}\n\t& {};\n\nexport type PgInsertSelectQueryBuilder<TTable extends PgTable> = TypedQueryBuilder<\n\t{ [K in keyof TTable['$inferInsert']]: AnyPgColumn | SQL | SQL.Aliased | TTable['$inferInsert'][K] }\n>;\n\nexport class PgInsertBuilder<\n\tTTable extends PgTable,\n\tTQueryResult extends PgQueryResultHKT,\n\tOverrideT extends boolean = false,\n> {\n\tstatic readonly [entityKind]: string = 'PgInsertBuilder';\n\n\tconstructor(\n\t\tprivate table: TTable,\n\t\tprivate session: PgSession,\n\t\tprivate dialect: PgDialect,\n\t\tprivate withList?: Subquery[],\n\t\tprivate overridingSystemValue_?: boolean,\n\t) {}\n\n\tprivate authToken?: NeonAuthToken;\n\t/** @internal */\n\tsetToken(token?: NeonAuthToken) {\n\t\tthis.authToken = token;\n\t\treturn this;\n\t}\n\n\toverridingSystemValue(): Omit<PgInsertBuilder<TTable, TQueryResult, true>, 'overridingSystemValue'> {\n\t\tthis.overridingSystemValue_ = true;\n\t\treturn this as any;\n\t}\n\n\tvalues(value: PgInsertValue<TTable, OverrideT>): PgInsertBase<TTable, TQueryResult>;\n\tvalues(values: PgInsertValue<TTable, OverrideT>[]): PgInsertBase<TTable, TQueryResult>;\n\tvalues(\n\t\tvalues: PgInsertValue<TTable, OverrideT> | PgInsertValue<TTable, OverrideT>[],\n\t): PgInsertBase<TTable, TQueryResult> {\n\t\tvalues = Array.isArray(values) ? values : [values];\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('values() must be called with at least one value');\n\t\t}\n\t\tconst mappedValues = values.map((entry) => {\n\t\t\tconst result: Record<string, Param | SQL> = {};\n\t\t\tconst cols = this.table[Table.Symbol.Columns];\n\t\t\tfor (const colKey of Object.keys(entry)) {\n\t\t\t\tconst colValue = entry[colKey as keyof typeof entry];\n\t\t\t\tresult[colKey] = is(colValue, SQL) ? colValue : new Param(colValue, cols[colKey]);\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\n\t\treturn new PgInsertBase(\n\t\t\tthis.table,\n\t\t\tmappedValues,\n\t\t\tthis.session,\n\t\t\tthis.dialect,\n\t\t\tthis.withList,\n\t\t\tfalse,\n\t\t\tthis.overridingSystemValue_,\n\t\t).setToken(this.authToken) as any;\n\t}\n\n\tselect(selectQuery: (qb: QueryBuilder) => PgInsertSelectQueryBuilder<TTable>): PgInsertBase<TTable, TQueryResult>;\n\tselect(selectQuery: (qb: QueryBuilder) => SQL): PgInsertBase<TTable, TQueryResult>;\n\tselect(selectQuery: SQL): PgInsertBase<TTable, TQueryResult>;\n\tselect(selectQuery: PgInsertSelectQueryBuilder<TTable>): PgInsertBase<TTable, TQueryResult>;\n\tselect(\n\t\tselectQuery:\n\t\t\t| SQL\n\t\t\t| PgInsertSelectQueryBuilder<TTable>\n\t\t\t| ((qb: QueryBuilder) => PgInsertSelectQueryBuilder<TTable> | SQL),\n\t): PgInsertBase<TTable, TQueryResult> {\n\t\tconst select = typeof selectQuery === 'function' ? selectQuery(new QueryBuilder()) : selectQuery;\n\n\t\tif (\n\t\t\t!is(select, SQL)\n\t\t\t&& !haveSameKeys(this.table[Columns], select._.selectedFields)\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t'Insert select error: selected fields are not the same or are in a different order compared to the table definition',\n\t\t\t);\n\t\t}\n\n\t\treturn new PgInsertBase(this.table, select, this.session, this.dialect, this.withList, true);\n\t}\n}\n\nexport type PgInsertWithout<T extends AnyPgInsert, TDynamic extends boolean, K extends keyof T & string> =\n\tTDynamic extends true ? T\n\t\t: Omit<\n\t\t\tPgInsertBase<\n\t\t\t\tT['_']['table'],\n\t\t\t\tT['_']['queryResult'],\n\t\t\t\tT['_']['selectedFields'],\n\t\t\t\tT['_']['returning'],\n\t\t\t\tTDynamic,\n\t\t\t\tT['_']['excludedMethods'] | K\n\t\t\t>,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>;\n\nexport type PgInsertReturning<\n\tT extends AnyPgInsert,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFieldsFlat,\n> = PgInsertBase<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tTSelectedFields,\n\tSelectResultFields<TSelectedFields>,\n\tTDynamic,\n\tT['_']['excludedMethods']\n>;\n\nexport type PgInsertReturningAll<T extends AnyPgInsert, TDynamic extends boolean> = PgInsertBase<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tT['_']['table']['_']['columns'],\n\tT['_']['table']['$inferSelect'],\n\tTDynamic,\n\tT['_']['excludedMethods']\n>;\n\nexport interface PgInsertOnConflictDoUpdateConfig<T extends AnyPgInsert> {\n\ttarget: IndexColumn | IndexColumn[];\n\t/** @deprecated use either `targetWhere` or `setWhere` */\n\twhere?: SQL;\n\t// TODO: add tests for targetWhere and setWhere\n\ttargetWhere?: SQL;\n\tsetWhere?: SQL;\n\tset: PgUpdateSetSource<T['_']['table']>;\n}\n\nexport type PgInsertPrepare<T extends AnyPgInsert> = PgPreparedQuery<\n\tPreparedQueryConfig & {\n\t\texecute: T['_']['returning'] extends undefined ? PgQueryResultKind<T['_']['queryResult'], never>\n\t\t\t: T['_']['returning'][];\n\t}\n>;\n\nexport type PgInsertDynamic<T extends AnyPgInsert> = PgInsert<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tT['_']['returning']\n>;\n\nexport type AnyPgInsert = PgInsertBase<any, any, any, any, any, any>;\n\nexport type PgInsert<\n\tTTable extends PgTable = PgTable,\n\tTQueryResult extends PgQueryResultHKT = PgQueryResultHKT,\n\tTSelectedFields extends ColumnsSelection | undefined = ColumnsSelection | undefined,\n\tTReturning extends Record<string, unknown> | undefined = Record<string, unknown> | undefined,\n> = PgInsertBase<TTable, TQueryResult, TSelectedFields, TReturning, true, never>;\n\nexport interface PgInsertBase<\n\tTTable extends PgTable,\n\tTQueryResult extends PgQueryResultHKT,\n\tTSelectedFields extends ColumnsSelection | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tTypedQueryBuilder<\n\t\tTSelectedFields,\n\t\tTReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]\n\t>,\n\tQueryPromise<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[], 'pg'>,\n\tSQLWrapper\n{\n\treadonly _: {\n\t\treadonly dialect: 'pg';\n\t\treadonly table: TTable;\n\t\treadonly queryResult: TQueryResult;\n\t\treadonly selectedFields: TSelectedFields;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[];\n\t};\n}\n\nexport class PgInsertBase<\n\tTTable extends PgTable,\n\tTQueryResult extends PgQueryResultHKT,\n\tTSelectedFields extends ColumnsSelection | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]>\n\timplements\n\t\tTypedQueryBuilder<\n\t\t\tTSelectedFields,\n\t\t\tTReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]\n\t\t>,\n\t\tRunnableQuery<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[], 'pg'>,\n\t\tSQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'PgInsert';\n\n\tprivate config: PgInsertConfig<TTable>;\n\tprotected cacheConfig?: WithCacheConfig;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tvalues: PgInsertConfig['values'],\n\t\tprivate session: PgSession,\n\t\tprivate dialect: PgDialect,\n\t\twithList?: Subquery[],\n\t\tselect?: boolean,\n\t\toverridingSystemValue_?: boolean,\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, values: values as any, withList, select, overridingSystemValue_ };\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the inserted rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#insert-returning}\n\t *\n\t * @example\n\t * ```ts\n\t * // Insert one row and return all fields\n\t * const insertedCar: Car[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning();\n\t *\n\t * // Insert one row and return only the id\n\t * const insertedCarId: { id: number }[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning({ id: cars.id });\n\t * ```\n\t */\n\treturning(): PgInsertWithout<PgInsertReturningAll<this, TDynamic>, TDynamic, 'returning'>;\n\treturning<TSelectedFields extends SelectedFieldsFlat>(\n\t\tfields: TSelectedFields,\n\t): PgInsertWithout<PgInsertReturning<this, TDynamic, TSelectedFields>, TDynamic, 'returning'>;\n\treturning(\n\t\tfields: SelectedFieldsFlat = this.config.table[Table.Symbol.Columns],\n\t): PgInsertWithout<AnyPgInsert, TDynamic, 'returning'> {\n\t\tthis.config.returningFields = fields;\n\t\tthis.config.returning = orderSelectedFields<PgColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `on conflict do nothing` clause to the query.\n\t *\n\t * Calling this method simply avoids inserting a row as its alternative action.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#on-conflict-do-nothing}\n\t *\n\t * @param config The `target` and `where` clauses.\n\t *\n\t * @example\n\t * ```ts\n\t * // Insert one row and cancel the insert if there's a conflict\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoNothing();\n\t *\n\t * // Explicitly specify conflict target\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoNothing({ target: cars.id });\n\t * ```\n\t */\n\tonConflictDoNothing(\n\t\tconfig: { target?: IndexColumn | IndexColumn[]; where?: SQL } = {},\n\t): PgInsertWithout<this, TDynamic, 'onConflictDoNothing' | 'onConflictDoUpdate'> {\n\t\tif (config.target === undefined) {\n\t\t\tthis.config.onConflict = sql`do nothing`;\n\t\t} else {\n\t\t\tlet targetColumn = '';\n\t\t\ttargetColumn = Array.isArray(config.target)\n\t\t\t\t? config.target.map((it) => this.dialect.escapeName(this.dialect.casing.getColumnCasing(it))).join(',')\n\t\t\t\t: this.dialect.escapeName(this.dialect.casing.getColumnCasing(config.target));\n\n\t\t\tconst whereSql = config.where ? sql` where ${config.where}` : undefined;\n\t\t\tthis.config.onConflict = sql`(${sql.raw(targetColumn)})${whereSql} do nothing`;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `on conflict do update` clause to the query.\n\t *\n\t * Calling this method will update the existing row that conflicts with the row proposed for insertion as its alternative action.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#upserts-and-conflicts}\n\t *\n\t * @param config The `target`, `set` and `where` clauses.\n\t *\n\t * @example\n\t * ```ts\n\t * // Update the row if there's a conflict\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoUpdate({\n\t *     target: cars.id,\n\t *     set: { brand: 'Porsche' }\n\t *   });\n\t *\n\t * // Upsert with 'where' clause\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoUpdate({\n\t *     target: cars.id,\n\t *     set: { brand: 'newBMW' },\n\t *     targetWhere: sql`${cars.createdAt} > '2023-01-01'::date`,\n\t *   });\n\t * ```\n\t */\n\tonConflictDoUpdate(\n\t\tconfig: PgInsertOnConflictDoUpdateConfig<this>,\n\t): PgInsertWithout<this, TDynamic, 'onConflictDoNothing' | 'onConflictDoUpdate'> {\n\t\tif (config.where && (config.targetWhere || config.setWhere)) {\n\t\t\tthrow new Error(\n\t\t\t\t'You cannot use both \"where\" and \"targetWhere\"/\"setWhere\" at the same time - \"where\" is deprecated, use \"targetWhere\" or \"setWhere\" instead.',\n\t\t\t);\n\t\t}\n\t\tconst whereSql = config.where ? sql` where ${config.where}` : undefined;\n\t\tconst targetWhereSql = config.targetWhere ? sql` where ${config.targetWhere}` : undefined;\n\t\tconst setWhereSql = config.setWhere ? sql` where ${config.setWhere}` : undefined;\n\t\tconst setSql = this.dialect.buildUpdateSet(this.config.table, mapUpdateSet(this.config.table, config.set));\n\t\tlet targetColumn = '';\n\t\ttargetColumn = Array.isArray(config.target)\n\t\t\t? config.target.map((it) => this.dialect.escapeName(this.dialect.casing.getColumnCasing(it))).join(',')\n\t\t\t: this.dialect.escapeName(this.dialect.casing.getColumnCasing(config.target));\n\t\tthis.config.onConflict = sql`(${\n\t\t\tsql.raw(targetColumn)\n\t\t})${targetWhereSql} do update set ${setSql}${whereSql}${setWhereSql}`;\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildInsertQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(name?: string): PgInsertPrepare<this> {\n\t\treturn tracer.startActiveSpan('drizzle.prepareQuery', () => {\n\t\t\treturn this.session.prepareQuery<\n\t\t\t\tPreparedQueryConfig & {\n\t\t\t\t\texecute: TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[];\n\t\t\t\t}\n\t\t\t>(this.dialect.sqlToQuery(this.getSQL()), this.config.returning, name, true, undefined, {\n\t\t\t\ttype: 'insert',\n\t\t\t\ttables: extractUsedTable(this.config.table),\n\t\t\t}, this.cacheConfig);\n\t\t});\n\t}\n\n\tprepare(name: string): PgInsertPrepare<this> {\n\t\treturn this._prepare(name);\n\t}\n\n\tprivate authToken?: NeonAuthToken;\n\t/** @internal */\n\tsetToken(token?: NeonAuthToken) {\n\t\tthis.authToken = token;\n\t\treturn this;\n\t}\n\n\toverride execute: ReturnType<this['prepare']>['execute'] = (placeholderValues) => {\n\t\treturn tracer.startActiveSpan('drizzle.operation', () => {\n\t\t\treturn this._prepare().execute(placeholderValues, this.authToken);\n\t\t});\n\t};\n\n\t/** @internal */\n\tgetSelectedFields(): this['_']['selectedFields'] {\n\t\treturn (\n\t\t\tthis.config.returningFields\n\t\t\t\t? new Proxy(\n\t\t\t\t\tthis.config.returningFields,\n\t\t\t\t\tnew SelectionProxyHandler({\n\t\t\t\t\t\talias: getTableName(this.config.table),\n\t\t\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\t\t\tsqlBehavior: 'error',\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\t: undefined\n\t\t) as this['_']['selectedFields'];\n\t}\n\n\t$dynamic(): PgInsertDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 9668, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/query-builders/update.ts"],"sourcesContent":["import type { WithCacheConfig } from '~/cache/core/types.ts';\nimport type { GetColumnData } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport type { PgDialect } from '~/pg-core/dialect.ts';\nimport type {\n\tPgPreparedQuery,\n\tPgQueryResultHKT,\n\tPgQueryResultKind,\n\tPgSession,\n\tPreparedQueryConfig,\n} from '~/pg-core/session.ts';\nimport { PgTable } from '~/pg-core/table.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type {\n\tAppendToNullabilityMap,\n\tAppendToResult,\n\tGetSelectTableName,\n\tGetSelectTableSelection,\n\tJoinNullability,\n\tJoinType,\n\tSelectMode,\n\tSelectResult,\n} from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport { type ColumnsSelection, type Query, SQL, type SQLWrapper } from '~/sql/sql.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { getTableName, Table } from '~/table.ts';\nimport {\n\ttype Assume,\n\ttype DrizzleTypeError,\n\ttype Equal,\n\tgetTableLikeName,\n\tmapUpdateSet,\n\ttype NeonAuthToken,\n\torderSelectedFields,\n\ttype Simplify,\n\ttype UpdateSet,\n} from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { PgColumn } from '../columns/common.ts';\nimport { extractUsedTable } from '../utils.ts';\nimport type { PgViewBase } from '../view-base.ts';\nimport type {\n\tPgSelectJoinConfig,\n\tSelectedFields,\n\tSelectedFieldsOrdered,\n\tTableLikeHasEmptySelection,\n} from './select.types.ts';\n\nexport interface PgUpdateConfig {\n\twhere?: SQL | undefined;\n\tset: UpdateSet;\n\ttable: PgTable;\n\tfrom?: PgTable | Subquery | PgViewBase | SQL;\n\tjoins: PgSelectJoinConfig[];\n\treturningFields?: SelectedFields;\n\treturning?: SelectedFieldsOrdered;\n\twithList?: Subquery[];\n}\n\nexport type PgUpdateSetSource<TTable extends PgTable> =\n\t& {\n\t\t[Key in keyof TTable['$inferInsert']]?:\n\t\t\t| GetColumnData<TTable['_']['columns'][Key]>\n\t\t\t| SQL\n\t\t\t| PgColumn\n\t\t\t| undefined;\n\t}\n\t& {};\n\nexport class PgUpdateBuilder<TTable extends PgTable, TQueryResult extends PgQueryResultHKT> {\n\tstatic readonly [entityKind]: string = 'PgUpdateBuilder';\n\n\tdeclare readonly _: {\n\t\treadonly table: TTable;\n\t};\n\n\tconstructor(\n\t\tprivate table: TTable,\n\t\tprivate session: PgSession,\n\t\tprivate dialect: PgDialect,\n\t\tprivate withList?: Subquery[],\n\t) {}\n\n\tprivate authToken?: NeonAuthToken;\n\tsetToken(token: NeonAuthToken) {\n\t\tthis.authToken = token;\n\t\treturn this;\n\t}\n\n\tset(\n\t\tvalues: PgUpdateSetSource<TTable>,\n\t): PgUpdateWithout<PgUpdateBase<TTable, TQueryResult>, false, 'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'> {\n\t\treturn new PgUpdateBase<TTable, TQueryResult>(\n\t\t\tthis.table,\n\t\t\tmapUpdateSet(this.table, values),\n\t\t\tthis.session,\n\t\t\tthis.dialect,\n\t\t\tthis.withList,\n\t\t).setToken(this.authToken);\n\t}\n}\n\nexport type PgUpdateWithout<\n\tT extends AnyPgUpdate,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T : Omit<\n\tPgUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['queryResult'],\n\t\tT['_']['from'],\n\t\tT['_']['selectedFields'],\n\t\tT['_']['returning'],\n\t\tT['_']['nullabilityMap'],\n\t\tT['_']['joins'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods'] | K\n\t>,\n\tT['_']['excludedMethods'] | K\n>;\n\nexport type PgUpdateWithJoins<\n\tT extends AnyPgUpdate,\n\tTDynamic extends boolean,\n\tTFrom extends PgTable | Subquery | PgViewBase | SQL,\n> = TDynamic extends true ? T : Omit<\n\tPgUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['queryResult'],\n\t\tTFrom,\n\t\tT['_']['selectedFields'],\n\t\tT['_']['returning'],\n\t\tAppendToNullabilityMap<T['_']['nullabilityMap'], GetSelectTableName<TFrom>, 'inner'>,\n\t\t[...T['_']['joins'], {\n\t\t\tname: GetSelectTableName<TFrom>;\n\t\t\tjoinType: 'inner';\n\t\t\ttable: TFrom;\n\t\t}],\n\t\tTDynamic,\n\t\tExclude<T['_']['excludedMethods'] | 'from', 'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'>\n\t>,\n\tExclude<T['_']['excludedMethods'] | 'from', 'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'>\n>;\n\nexport type PgUpdateJoinFn<\n\tT extends AnyPgUpdate,\n\tTDynamic extends boolean,\n\tTJoinType extends JoinType,\n> = <\n\tTJoinedTable extends PgTable | Subquery | PgViewBase | SQL,\n>(\n\ttable: TableLikeHasEmptySelection<TJoinedTable> extends true ? DrizzleTypeError<\n\t\t\t\"Cannot reference a data-modifying statement subquery if it doesn't contain a `returning` clause\"\n\t\t>\n\t\t: TJoinedTable,\n\ton:\n\t\t| (\n\t\t\t(\n\t\t\t\tupdateTable: T['_']['table']['_']['columns'],\n\t\t\t\tfrom: T['_']['from'] extends PgTable ? T['_']['from']['_']['columns']\n\t\t\t\t\t: T['_']['from'] extends Subquery | PgViewBase ? T['_']['from']['_']['selectedFields']\n\t\t\t\t\t: never,\n\t\t\t) => SQL | undefined\n\t\t)\n\t\t| SQL\n\t\t| undefined,\n) => PgUpdateJoin<T, TDynamic, TJoinType, TJoinedTable>;\n\nexport type PgUpdateJoin<\n\tT extends AnyPgUpdate,\n\tTDynamic extends boolean,\n\tTJoinType extends JoinType,\n\tTJoinedTable extends PgTable | Subquery | PgViewBase | SQL,\n> = TDynamic extends true ? T : PgUpdateBase<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tT['_']['from'],\n\tT['_']['selectedFields'],\n\tT['_']['returning'],\n\tAppendToNullabilityMap<T['_']['nullabilityMap'], GetSelectTableName<TJoinedTable>, TJoinType>,\n\t[...T['_']['joins'], {\n\t\tname: GetSelectTableName<TJoinedTable>;\n\t\tjoinType: TJoinType;\n\t\ttable: TJoinedTable;\n\t}],\n\tTDynamic,\n\tT['_']['excludedMethods']\n>;\n\ntype Join = {\n\tname: string | undefined;\n\tjoinType: JoinType;\n\ttable: PgTable | Subquery | PgViewBase | SQL;\n};\n\ntype AccumulateToResult<\n\tT extends AnyPgUpdate,\n\tTSelectMode extends SelectMode,\n\tTJoins extends Join[],\n\tTSelectedFields extends ColumnsSelection,\n> = TJoins extends [infer TJoin extends Join, ...infer TRest extends Join[]] ? AccumulateToResult<\n\t\tT,\n\t\tTSelectMode extends 'partial' ? TSelectMode : 'multiple',\n\t\tTRest,\n\t\tAppendToResult<\n\t\t\tT['_']['table']['_']['name'],\n\t\t\tTSelectedFields,\n\t\t\tTJoin['name'],\n\t\t\tTJoin['table'] extends Table ? TJoin['table']['_']['columns']\n\t\t\t\t: TJoin['table'] extends Subquery ? Assume<TJoin['table']['_']['selectedFields'], SelectedFields>\n\t\t\t\t: never,\n\t\t\tTSelectMode extends 'partial' ? TSelectMode : 'multiple'\n\t\t>\n\t>\n\t: TSelectedFields;\n\nexport type PgUpdateReturningAll<T extends AnyPgUpdate, TDynamic extends boolean> = PgUpdateWithout<\n\tPgUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['queryResult'],\n\t\tT['_']['from'],\n\t\tEqual<T['_']['joins'], []> extends true ? T['_']['table']['_']['columns'] : Simplify<\n\t\t\t& Record<T['_']['table']['_']['name'], T['_']['table']['_']['columns']>\n\t\t\t& {\n\t\t\t\t[K in keyof T['_']['joins'] as T['_']['joins'][K]['table']['_']['name']]:\n\t\t\t\t\tT['_']['joins'][K]['table']['_']['columns'];\n\t\t\t}\n\t\t>,\n\t\tSelectResult<\n\t\t\tAccumulateToResult<\n\t\t\t\tT,\n\t\t\t\t'single',\n\t\t\t\tT['_']['joins'],\n\t\t\t\tGetSelectTableSelection<T['_']['table']>\n\t\t\t>,\n\t\t\t'partial',\n\t\t\tT['_']['nullabilityMap']\n\t\t>,\n\t\tT['_']['nullabilityMap'],\n\t\tT['_']['joins'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type PgUpdateReturning<\n\tT extends AnyPgUpdate,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFields,\n> = PgUpdateWithout<\n\tPgUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['queryResult'],\n\t\tT['_']['from'],\n\t\tTSelectedFields,\n\t\tSelectResult<\n\t\t\tAccumulateToResult<\n\t\t\t\tT,\n\t\t\t\t'partial',\n\t\t\t\tT['_']['joins'],\n\t\t\t\tTSelectedFields\n\t\t\t>,\n\t\t\t'partial',\n\t\t\tT['_']['nullabilityMap']\n\t\t>,\n\t\tT['_']['nullabilityMap'],\n\t\tT['_']['joins'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type PgUpdatePrepare<T extends AnyPgUpdate> = PgPreparedQuery<\n\tPreparedQueryConfig & {\n\t\texecute: T['_']['returning'] extends undefined ? PgQueryResultKind<T['_']['queryResult'], never>\n\t\t\t: T['_']['returning'][];\n\t}\n>;\n\nexport type PgUpdateDynamic<T extends AnyPgUpdate> = PgUpdate<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tT['_']['from'],\n\tT['_']['returning'],\n\tT['_']['nullabilityMap']\n>;\n\nexport type PgUpdate<\n\tTTable extends PgTable = PgTable,\n\tTQueryResult extends PgQueryResultHKT = PgQueryResultHKT,\n\tTFrom extends PgTable | Subquery | PgViewBase | SQL | undefined = undefined,\n\tTSelectedFields extends ColumnsSelection | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = Record<string, unknown> | undefined,\n\tTNullabilityMap extends Record<string, JoinNullability> = Record<TTable['_']['name'], 'not-null'>,\n\tTJoins extends Join[] = [],\n> = PgUpdateBase<TTable, TQueryResult, TFrom, TSelectedFields, TReturning, TNullabilityMap, TJoins, true, never>;\n\nexport type AnyPgUpdate = PgUpdateBase<any, any, any, any, any, any, any, any, any>;\n\nexport interface PgUpdateBase<\n\tTTable extends PgTable,\n\tTQueryResult extends PgQueryResultHKT,\n\tTFrom extends PgTable | Subquery | PgViewBase | SQL | undefined = undefined,\n\tTSelectedFields extends ColumnsSelection | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTNullabilityMap extends Record<string, JoinNullability> = Record<TTable['_']['name'], 'not-null'>,\n\tTJoins extends Join[] = [],\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tTypedQueryBuilder<\n\t\tTSelectedFields,\n\t\tTReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]\n\t>,\n\tQueryPromise<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[], 'pg'>,\n\tSQLWrapper\n{\n\treadonly _: {\n\t\treadonly dialect: 'pg';\n\t\treadonly table: TTable;\n\t\treadonly joins: TJoins;\n\t\treadonly nullabilityMap: TNullabilityMap;\n\t\treadonly queryResult: TQueryResult;\n\t\treadonly from: TFrom;\n\t\treadonly selectedFields: TSelectedFields;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[];\n\t};\n}\n\nexport class PgUpdateBase<\n\tTTable extends PgTable,\n\tTQueryResult extends PgQueryResultHKT,\n\tTFrom extends PgTable | Subquery | PgViewBase | SQL | undefined = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTSelectedFields extends ColumnsSelection | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTNullabilityMap extends Record<string, JoinNullability> = Record<TTable['_']['name'], 'not-null'>,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTJoins extends Join[] = [],\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]>\n\timplements\n\t\tRunnableQuery<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[], 'pg'>,\n\t\tSQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'PgUpdate';\n\n\tprivate config: PgUpdateConfig;\n\tprivate tableName: string | undefined;\n\tprivate joinsNotNullableMap: Record<string, boolean>;\n\tprotected cacheConfig?: WithCacheConfig;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tset: UpdateSet,\n\t\tprivate session: PgSession,\n\t\tprivate dialect: PgDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { set, table, withList, joins: [] };\n\t\tthis.tableName = getTableLikeName(table);\n\t\tthis.joinsNotNullableMap = typeof this.tableName === 'string' ? { [this.tableName]: true } : {};\n\t}\n\n\tfrom<TFrom extends PgTable | Subquery | PgViewBase | SQL>(\n\t\tsource: TableLikeHasEmptySelection<TFrom> extends true ? DrizzleTypeError<\n\t\t\t\t\"Cannot reference a data-modifying statement subquery if it doesn't contain a `returning` clause\"\n\t\t\t>\n\t\t\t: TFrom,\n\t): PgUpdateWithJoins<this, TDynamic, TFrom> {\n\t\tconst src = source as TFrom;\n\t\tconst tableName = getTableLikeName(src);\n\t\tif (typeof tableName === 'string') {\n\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t}\n\t\tthis.config.from = src;\n\t\treturn this as any;\n\t}\n\n\tprivate getTableLikeFields(table: PgTable | Subquery | PgViewBase): Record<string, unknown> {\n\t\tif (is(table, PgTable)) {\n\t\t\treturn table[Table.Symbol.Columns];\n\t\t} else if (is(table, Subquery)) {\n\t\t\treturn table._.selectedFields;\n\t\t}\n\t\treturn table[ViewBaseConfig].selectedFields;\n\t}\n\n\tprivate createJoin<TJoinType extends JoinType>(\n\t\tjoinType: TJoinType,\n\t): PgUpdateJoinFn<this, TDynamic, TJoinType> {\n\t\treturn ((\n\t\t\ttable: PgTable | Subquery | PgViewBase | SQL,\n\t\t\ton: ((updateTable: TTable, from: TFrom) => SQL | undefined) | SQL | undefined,\n\t\t) => {\n\t\t\tconst tableName = getTableLikeName(table);\n\n\t\t\tif (typeof tableName === 'string' && this.config.joins.some((join) => join.alias === tableName)) {\n\t\t\t\tthrow new Error(`Alias \"${tableName}\" is already used in this query`);\n\t\t\t}\n\n\t\t\tif (typeof on === 'function') {\n\t\t\t\tconst from = this.config.from && !is(this.config.from, SQL)\n\t\t\t\t\t? this.getTableLikeFields(this.config.from)\n\t\t\t\t\t: undefined;\n\t\t\t\ton = on(\n\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\tthis.config.table[Table.Symbol.Columns],\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as any,\n\t\t\t\t\tfrom && new Proxy(\n\t\t\t\t\t\tfrom,\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as any,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.config.joins.push({ on, table, joinType, alias: tableName });\n\n\t\t\tif (typeof tableName === 'string') {\n\t\t\t\tswitch (joinType) {\n\t\t\t\t\tcase 'left': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'right': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'inner': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'full': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this as any;\n\t\t}) as any;\n\t}\n\n\tleftJoin = this.createJoin('left');\n\n\trightJoin = this.createJoin('right');\n\n\tinnerJoin = this.createJoin('inner');\n\n\tfullJoin = this.createJoin('full');\n\n\t/**\n\t * Adds a 'where' clause to the query.\n\t *\n\t * Calling this method will update only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t *\n\t * @param where the 'where' clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be updated.\n\t *\n\t * ```ts\n\t * // Update all cars with green color\n\t * await db.update(cars).set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'));\n\t * // or\n\t * await db.update(cars).set({ color: 'red' })\n\t *   .where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Update all BMW cars with a green color\n\t * await db.update(cars).set({ color: 'red' })\n\t *   .where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Update all cars with the green or blue color\n\t * await db.update(cars).set({ color: 'red' })\n\t *   .where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): PgUpdateWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the updated rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update#update-with-returning}\n\t *\n\t * @example\n\t * ```ts\n\t * // Update all cars with the green color and return all fields\n\t * const updatedCars: Car[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning();\n\t *\n\t * // Update all cars with the green color and return only their id and brand fields\n\t * const updatedCarsIdsAndBrands: { id: number, brand: string }[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning({ id: cars.id, brand: cars.brand });\n\t * ```\n\t */\n\treturning(): PgUpdateReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFields>(\n\t\tfields: TSelectedFields,\n\t): PgUpdateReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields?: SelectedFields,\n\t): PgUpdateWithout<AnyPgUpdate, TDynamic, 'returning'> {\n\t\tif (!fields) {\n\t\t\tfields = Object.assign({}, this.config.table[Table.Symbol.Columns]);\n\n\t\t\tif (this.config.from) {\n\t\t\t\tconst tableName = getTableLikeName(this.config.from);\n\n\t\t\t\tif (typeof tableName === 'string' && this.config.from && !is(this.config.from, SQL)) {\n\t\t\t\t\tconst fromFields = this.getTableLikeFields(this.config.from);\n\t\t\t\t\tfields[tableName] = fromFields as any;\n\t\t\t\t}\n\n\t\t\t\tfor (const join of this.config.joins) {\n\t\t\t\t\tconst tableName = getTableLikeName(join.table);\n\n\t\t\t\t\tif (typeof tableName === 'string' && !is(join.table, SQL)) {\n\t\t\t\t\t\tconst fromFields = this.getTableLikeFields(join.table);\n\t\t\t\t\t\tfields[tableName] = fromFields as any;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.config.returningFields = fields;\n\t\tthis.config.returning = orderSelectedFields<PgColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildUpdateQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(name?: string): PgUpdatePrepare<this> {\n\t\tconst query = this.session.prepareQuery<\n\t\t\tPreparedQueryConfig & { execute: TReturning[] }\n\t\t>(this.dialect.sqlToQuery(this.getSQL()), this.config.returning, name, true, undefined, {\n\t\t\ttype: 'insert',\n\t\t\ttables: extractUsedTable(this.config.table),\n\t\t}, this.cacheConfig);\n\t\tquery.joinsNotNullableMap = this.joinsNotNullableMap;\n\t\treturn query;\n\t}\n\n\tprepare(name: string): PgUpdatePrepare<this> {\n\t\treturn this._prepare(name);\n\t}\n\n\tprivate authToken?: NeonAuthToken;\n\t/** @internal */\n\tsetToken(token?: NeonAuthToken) {\n\t\tthis.authToken = token;\n\t\treturn this;\n\t}\n\n\toverride execute: ReturnType<this['prepare']>['execute'] = (placeholderValues) => {\n\t\treturn this._prepare().execute(placeholderValues, this.authToken);\n\t};\n\n\t/** @internal */\n\tgetSelectedFields(): this['_']['selectedFields'] {\n\t\treturn (\n\t\t\tthis.config.returningFields\n\t\t\t\t? new Proxy(\n\t\t\t\t\tthis.config.returningFields,\n\t\t\t\t\tnew SelectionProxyHandler({\n\t\t\t\t\t\talias: getTableName(this.config.table),\n\t\t\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\t\t\tsqlBehavior: 'error',\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\t: undefined\n\t\t) as this['_']['selectedFields'];\n\t}\n\n\t$dynamic(): PgUpdateDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n"],"names":["tableName"],"mappings":"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","debugId":null}},
    {"offset": {"line": 9909, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/query-builders/count.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { SQL, sql, type SQLWrapper } from '~/sql/sql.ts';\nimport type { NeonAuthToken } from '~/utils.ts';\nimport type { PgSession } from '../session.ts';\nimport type { PgTable } from '../table.ts';\n\nexport class PgCountBuilder<\n\tTSession extends PgSession<any, any, any>,\n> extends SQL<number> implements Promise<number>, SQLWrapper {\n\tprivate sql: SQL<number>;\n\tprivate token?: NeonAuthToken;\n\n\tstatic override readonly [entityKind] = 'PgCountBuilder';\n\t[Symbol.toStringTag] = 'PgCountBuilder';\n\n\tprivate session: TSession;\n\n\tprivate static buildEmbeddedCount(\n\t\tsource: PgTable | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t): SQL<number> {\n\t\treturn sql<number>`(select count(*) from ${source}${sql.raw(' where ').if(filters)}${filters})`;\n\t}\n\n\tprivate static buildCount(\n\t\tsource: PgTable | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t): SQL<number> {\n\t\treturn sql<number>`select count(*) as count from ${source}${sql.raw(' where ').if(filters)}${filters};`;\n\t}\n\n\tconstructor(\n\t\treadonly params: {\n\t\t\tsource: PgTable | SQL | SQLWrapper;\n\t\t\tfilters?: SQL<unknown>;\n\t\t\tsession: TSession;\n\t\t},\n\t) {\n\t\tsuper(PgCountBuilder.buildEmbeddedCount(params.source, params.filters).queryChunks);\n\n\t\tthis.mapWith(Number);\n\n\t\tthis.session = params.session;\n\n\t\tthis.sql = PgCountBuilder.buildCount(\n\t\t\tparams.source,\n\t\t\tparams.filters,\n\t\t);\n\t}\n\n\t/** @intrnal */\n\tsetToken(token?: NeonAuthToken) {\n\t\tthis.token = token;\n\t\treturn this;\n\t}\n\n\tthen<TResult1 = number, TResult2 = never>(\n\t\tonfulfilled?: ((value: number) => TResult1 | PromiseLike<TResult1>) | null | undefined,\n\t\tonrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined,\n\t): Promise<TResult1 | TResult2> {\n\t\treturn Promise.resolve(this.session.count(this.sql, this.token))\n\t\t\t.then(\n\t\t\t\tonfulfilled,\n\t\t\t\tonrejected,\n\t\t\t);\n\t}\n\n\tcatch(\n\t\tonRejected?: ((reason: any) => any) | null | undefined,\n\t): Promise<number> {\n\t\treturn this.then(undefined, onRejected);\n\t}\n\n\tfinally(onFinally?: (() => void) | null | undefined): Promise<number> {\n\t\treturn this.then(\n\t\t\t(value) => {\n\t\t\t\tonFinally?.();\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\t(reason) => {\n\t\t\t\tonFinally?.();\n\t\t\t\tthrow reason;\n\t\t\t},\n\t\t);\n\t}\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;AAC3B,SAAS,KAAK,WAA4B;;;AAKnC,MAAM,oKAEH,MAAA,CAAmD;IAuB5D,YACU,MAAA,CAKR;QACD,KAAA,CAAM,eAAe,kBAAA,CAAmB,OAAO,MAAA,EAAQ,OAAO,OAAO,EAAE,WAAW;QANzE,IAAA,CAAA,MAAA,GAAA;QAQT,IAAA,CAAK,OAAA,CAAQ,MAAM;QAEnB,IAAA,CAAK,OAAA,GAAU,OAAO,OAAA;QAEtB,IAAA,CAAK,GAAA,GAAM,eAAe,UAAA,CACzB,OAAO,MAAA,EACP,OAAO,OAAA;IAET;IAvCQ,IAAA;IACA,MAAA;IAER,OAAA,0IAA0B,aAAU,CAAA,GAAI,iBAAA;IACxC,CAAC,OAAO,WAAW,CAAA,GAAI,iBAAA;IAEf,QAAA;IAER,OAAe,mBACd,MAAA,EACA,OAAA,EACc;QACd,oJAAO,MAAA,CAAA,sBAAA,EAAoC,MAAM,CAAA,+IAAG,MAAA,CAAI,GAAA,CAAI,SAAS,EAAE,EAAA,CAAG,OAAO,CAAC,CAAA,EAAG,OAAO,CAAA,CAAA,CAAA;IAC7F;IAEA,OAAe,WACd,MAAA,EACA,OAAA,EACc;QACd,oJAAO,MAAA,CAAA,8BAAA,EAA4C,MAAM,CAAA,+IAAG,MAAA,CAAI,GAAA,CAAI,SAAS,EAAE,EAAA,CAAG,OAAO,CAAC,CAAA,EAAG,OAAO,CAAA,CAAA,CAAA;IACrG;IAAA,aAAA,GAsBA,SAAS,KAAA,EAAuB;QAC/B,IAAA,CAAK,KAAA,GAAQ;QACb,OAAO,IAAA;IACR;IAEA,KACC,WAAA,EACA,UAAA,EAC+B;QAC/B,OAAO,QAAQ,OAAA,CAAQ,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,IAAA,CAAK,GAAA,EAAK,IAAA,CAAK,KAAK,CAAC,EAC7D,IAAA,CACA,aACA;IAEH;IAEA,MACC,UAAA,EACkB;QAClB,OAAO,IAAA,CAAK,IAAA,CAAK,KAAA,GAAW,UAAU;IACvC;IAEA,QAAQ,SAAA,EAA8D;QACrE,OAAO,IAAA,CAAK,IAAA,CACX,CAAC,UAAU;YACV,YAAY;YACZ,OAAO;QACR,GACA,CAAC,WAAW;YACX,YAAY;YACZ,MAAM;QACP;IAEF;AACD","debugId":null}},
    {"offset": {"line": 9961, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/query-builders/query.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport {\n\ttype BuildQueryResult,\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tmapRelationalRow,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Query, QueryWithTypings, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport { tracer } from '~/tracing.ts';\nimport type { KnownKeysOnly, NeonAuthToken } from '~/utils.ts';\nimport type { PgDialect } from '../dialect.ts';\nimport type { PgPreparedQuery, PgSession, PreparedQueryConfig } from '../session.ts';\nimport type { PgTable } from '../table.ts';\n\nexport class RelationalQueryBuilder<TSchema extends TablesRelationalConfig, TFields extends TableRelationalConfig> {\n\tstatic readonly [entityKind]: string = 'PgRelationalQueryBuilder';\n\n\tconstructor(\n\t\tprivate fullSchema: Record<string, unknown>,\n\t\tprivate schema: TSchema,\n\t\tprivate tableNamesMap: Record<string, string>,\n\t\tprivate table: PgTable,\n\t\tprivate tableConfig: TableRelationalConfig,\n\t\tprivate dialect: PgDialect,\n\t\tprivate session: PgSession,\n\t) {}\n\n\tfindMany<TConfig extends DBQueryConfig<'many', true, TSchema, TFields>>(\n\t\tconfig?: KnownKeysOnly<TConfig, DBQueryConfig<'many', true, TSchema, TFields>>,\n\t): PgRelationalQuery<BuildQueryResult<TSchema, TFields, TConfig>[]> {\n\t\treturn new PgRelationalQuery(\n\t\t\tthis.fullSchema,\n\t\t\tthis.schema,\n\t\t\tthis.tableNamesMap,\n\t\t\tthis.table,\n\t\t\tthis.tableConfig,\n\t\t\tthis.dialect,\n\t\t\tthis.session,\n\t\t\tconfig ? (config as DBQueryConfig<'many', true>) : {},\n\t\t\t'many',\n\t\t);\n\t}\n\n\tfindFirst<TSelection extends Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>(\n\t\tconfig?: KnownKeysOnly<TSelection, Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>,\n\t): PgRelationalQuery<BuildQueryResult<TSchema, TFields, TSelection> | undefined> {\n\t\treturn new PgRelationalQuery(\n\t\t\tthis.fullSchema,\n\t\t\tthis.schema,\n\t\t\tthis.tableNamesMap,\n\t\t\tthis.table,\n\t\t\tthis.tableConfig,\n\t\t\tthis.dialect,\n\t\t\tthis.session,\n\t\t\tconfig ? { ...(config as DBQueryConfig<'many', true> | undefined), limit: 1 } : { limit: 1 },\n\t\t\t'first',\n\t\t);\n\t}\n}\n\nexport class PgRelationalQuery<TResult> extends QueryPromise<TResult>\n\timplements RunnableQuery<TResult, 'pg'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'PgRelationalQuery';\n\n\tdeclare readonly _: {\n\t\treadonly dialect: 'pg';\n\t\treadonly result: TResult;\n\t};\n\n\tconstructor(\n\t\tprivate fullSchema: Record<string, unknown>,\n\t\tprivate schema: TablesRelationalConfig,\n\t\tprivate tableNamesMap: Record<string, string>,\n\t\tprivate table: PgTable,\n\t\tprivate tableConfig: TableRelationalConfig,\n\t\tprivate dialect: PgDialect,\n\t\tprivate session: PgSession,\n\t\tprivate config: DBQueryConfig<'many', true> | true,\n\t\tprivate mode: 'many' | 'first',\n\t) {\n\t\tsuper();\n\t}\n\n\t/** @internal */\n\t_prepare(name?: string): PgPreparedQuery<PreparedQueryConfig & { execute: TResult }> {\n\t\treturn tracer.startActiveSpan('drizzle.prepareQuery', () => {\n\t\t\tconst { query, builtQuery } = this._toSQL();\n\n\t\t\treturn this.session.prepareQuery<PreparedQueryConfig & { execute: TResult }>(\n\t\t\t\tbuiltQuery,\n\t\t\t\tundefined,\n\t\t\t\tname,\n\t\t\t\ttrue,\n\t\t\t\t(rawRows, mapColumnValue) => {\n\t\t\t\t\tconst rows = rawRows.map((row) =>\n\t\t\t\t\t\tmapRelationalRow(this.schema, this.tableConfig, row, query.selection, mapColumnValue)\n\t\t\t\t\t);\n\t\t\t\t\tif (this.mode === 'first') {\n\t\t\t\t\t\treturn rows[0] as TResult;\n\t\t\t\t\t}\n\t\t\t\t\treturn rows as TResult;\n\t\t\t\t},\n\t\t\t);\n\t\t});\n\t}\n\n\tprepare(name: string): PgPreparedQuery<PreparedQueryConfig & { execute: TResult }> {\n\t\treturn this._prepare(name);\n\t}\n\n\tprivate _getQuery() {\n\t\treturn this.dialect.buildRelationalQueryWithoutPK({\n\t\t\tfullSchema: this.fullSchema,\n\t\t\tschema: this.schema,\n\t\t\ttableNamesMap: this.tableNamesMap,\n\t\t\ttable: this.table,\n\t\t\ttableConfig: this.tableConfig,\n\t\t\tqueryConfig: this.config,\n\t\t\ttableAlias: this.tableConfig.tsName,\n\t\t});\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this._getQuery().sql as SQL;\n\t}\n\n\tprivate _toSQL(): { query: BuildRelationalQueryResult; builtQuery: QueryWithTypings } {\n\t\tconst query = this._getQuery();\n\n\t\tconst builtQuery = this.dialect.sqlToQuery(query.sql as SQL);\n\n\t\treturn { query, builtQuery };\n\t}\n\n\ttoSQL(): Query {\n\t\treturn this._toSQL().builtQuery;\n\t}\n\n\tprivate authToken?: NeonAuthToken;\n\t/** @internal */\n\tsetToken(token?: NeonAuthToken) {\n\t\tthis.authToken = token;\n\t\treturn this;\n\t}\n\n\toverride execute(): Promise<TResult> {\n\t\treturn tracer.startActiveSpan('drizzle.operation', () => {\n\t\t\treturn this._prepare().execute(undefined, this.authToken);\n\t\t});\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 10067, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/query-builders/raw.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport type { Query, SQL, SQLWrapper } from '~/sql/sql.ts';\n\nexport interface PgRaw<TResult> extends QueryPromise<TResult>, RunnableQuery<TResult, 'pg'>, SQLWrapper {}\n\nexport class PgRaw<TResult> extends QueryPromise<TResult>\n\timplements RunnableQuery<TResult, 'pg'>, SQLWrapper, PreparedQuery\n{\n\tstatic override readonly [entityKind]: string = 'PgRaw';\n\n\tdeclare readonly _: {\n\t\treadonly dialect: 'pg';\n\t\treadonly result: TResult;\n\t};\n\n\tconstructor(\n\t\tpublic execute: () => Promise<TResult>,\n\t\tprivate sql: SQL,\n\t\tprivate query: Query,\n\t\tprivate mapBatchResult: (result: unknown) => unknown,\n\t) {\n\t\tsuper();\n\t}\n\n\t/** @internal */\n\tgetSQL() {\n\t\treturn this.sql;\n\t}\n\n\tgetQuery() {\n\t\treturn this.query;\n\t}\n\n\tmapResult(result: unknown, isFromBatch?: boolean) {\n\t\treturn isFromBatch ? this.mapBatchResult(result) : result;\n\t}\n\n\t_prepare(): PreparedQuery {\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tisResponseInArrayMode() {\n\t\treturn false;\n\t}\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;AAC3B,SAAS,oBAAoB;;;AAOtB,MAAM,iKAAuB,eAAA,CAEpC;IAQC,YACQ,OAAA,EACC,GAAA,EACA,KAAA,EACA,cAAA,CACP;QACD,KAAA,CAAM;QALC,IAAA,CAAA,OAAA,GAAA;QACC,IAAA,CAAA,GAAA,GAAA;QACA,IAAA,CAAA,KAAA,GAAA;QACA,IAAA,CAAA,cAAA,GAAA;IAGT;IAdA,OAAA,0IAA0B,aAAU,CAAA,GAAY,QAAA;IAAA,cAAA,GAiBhD,SAAS;QACR,OAAO,IAAA,CAAK,GAAA;IACb;IAEA,WAAW;QACV,OAAO,IAAA,CAAK,KAAA;IACb;IAEA,UAAU,MAAA,EAAiB,WAAA,EAAuB;QACjD,OAAO,cAAc,IAAA,CAAK,cAAA,CAAe,MAAM,IAAI;IACpD;IAEA,WAA0B;QACzB,OAAO,IAAA;IACR;IAAA,cAAA,GAGA,wBAAwB;QACvB,OAAO;IACR;AACD","debugId":null}},
    {"offset": {"line": 10105, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/query-builders/refresh-materialized-view.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { PgDialect } from '~/pg-core/dialect.ts';\nimport type {\n\tPgPreparedQuery,\n\tPgQueryResultHKT,\n\tPgQueryResultKind,\n\tPgSession,\n\tPreparedQueryConfig,\n} from '~/pg-core/session.ts';\nimport type { PgMaterializedView } from '~/pg-core/view.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport { tracer } from '~/tracing.ts';\nimport type { NeonAuthToken } from '~/utils';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface PgRefreshMaterializedView<TQueryResult extends PgQueryResultHKT>\n\textends\n\t\tQueryPromise<PgQueryResultKind<TQueryResult, never>>,\n\t\tRunnableQuery<PgQueryResultKind<TQueryResult, never>, 'pg'>,\n\t\tSQLWrapper\n{\n\treadonly _: {\n\t\treadonly dialect: 'pg';\n\t\treadonly result: PgQueryResultKind<TQueryResult, never>;\n\t};\n}\n\nexport class PgRefreshMaterializedView<TQueryResult extends PgQueryResultHKT>\n\textends QueryPromise<PgQueryResultKind<TQueryResult, never>>\n\timplements RunnableQuery<PgQueryResultKind<TQueryResult, never>, 'pg'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'PgRefreshMaterializedView';\n\n\tprivate config: {\n\t\tview: PgMaterializedView;\n\t\tconcurrently?: boolean;\n\t\twithNoData?: boolean;\n\t};\n\n\tconstructor(\n\t\tview: PgMaterializedView,\n\t\tprivate session: PgSession,\n\t\tprivate dialect: PgDialect,\n\t) {\n\t\tsuper();\n\t\tthis.config = { view };\n\t}\n\n\tconcurrently(): this {\n\t\tif (this.config.withNoData !== undefined) {\n\t\t\tthrow new Error('Cannot use concurrently and withNoData together');\n\t\t}\n\t\tthis.config.concurrently = true;\n\t\treturn this;\n\t}\n\n\twithNoData(): this {\n\t\tif (this.config.concurrently !== undefined) {\n\t\t\tthrow new Error('Cannot use concurrently and withNoData together');\n\t\t}\n\t\tthis.config.withNoData = true;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildRefreshMaterializedViewQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(name?: string): PgPreparedQuery<\n\t\tPreparedQueryConfig & {\n\t\t\texecute: PgQueryResultKind<TQueryResult, never>;\n\t\t}\n\t> {\n\t\treturn tracer.startActiveSpan('drizzle.prepareQuery', () => {\n\t\t\treturn this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), undefined, name, true);\n\t\t});\n\t}\n\n\tprepare(name: string): PgPreparedQuery<\n\t\tPreparedQueryConfig & {\n\t\t\texecute: PgQueryResultKind<TQueryResult, never>;\n\t\t}\n\t> {\n\t\treturn this._prepare(name);\n\t}\n\n\tprivate authToken?: NeonAuthToken;\n\t/** @internal */\n\tsetToken(token: NeonAuthToken) {\n\t\tthis.authToken = token;\n\t\treturn this;\n\t}\n\n\texecute: ReturnType<this['prepare']>['execute'] = (placeholderValues) => {\n\t\treturn tracer.startActiveSpan('drizzle.operation', () => {\n\t\t\treturn this._prepare().execute(placeholderValues, this.authToken);\n\t\t});\n\t};\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,kBAAkB;AAU3B,SAAS,oBAAoB;AAG7B,SAAS,cAAc;;;;AAgBhB,MAAM,qLACJ,eAAA,CAET;IASC,YACC,IAAA,EACQ,OAAA,EACA,OAAA,CACP;QACD,KAAA,CAAM;QAHE,IAAA,CAAA,OAAA,GAAA;QACA,IAAA,CAAA,OAAA,GAAA;QAGR,IAAA,CAAK,MAAA,GAAS;YAAE;QAAK;IACtB;IAfA,OAAA,0IAA0B,aAAU,CAAA,GAAY,4BAAA;IAExC,OAAA;IAeR,eAAqB;QACpB,IAAI,IAAA,CAAK,MAAA,CAAO,UAAA,KAAe,KAAA,GAAW;YACzC,MAAM,IAAI,MAAM,iDAAiD;QAClE;QACA,IAAA,CAAK,MAAA,CAAO,YAAA,GAAe;QAC3B,OAAO,IAAA;IACR;IAEA,aAAmB;QAClB,IAAI,IAAA,CAAK,MAAA,CAAO,YAAA,KAAiB,KAAA,GAAW;YAC3C,MAAM,IAAI,MAAM,iDAAiD;QAClE;QACA,IAAA,CAAK,MAAA,CAAO,UAAA,GAAa;QACzB,OAAO,IAAA;IACR;IAAA,cAAA,GAGA,SAAc;QACb,OAAO,IAAA,CAAK,OAAA,CAAQ,iCAAA,CAAkC,IAAA,CAAK,MAAM;IAClE;IAEA,QAAe;QACd,MAAM,EAAE,SAAS,QAAA,EAAU,GAAG,KAAK,CAAA,GAAI,IAAA,CAAK,OAAA,CAAQ,UAAA,CAAW,IAAA,CAAK,MAAA,CAAO,CAAC;QAC5E,OAAO;IACR;IAAA,cAAA,GAGA,SAAS,IAAA,EAIP;QACD,iJAAO,SAAA,CAAO,eAAA,CAAgB,wBAAwB,MAAM;YAC3D,OAAO,IAAA,CAAK,OAAA,CAAQ,YAAA,CAAa,IAAA,CAAK,OAAA,CAAQ,UAAA,CAAW,IAAA,CAAK,MAAA,CAAO,CAAC,GAAG,KAAA,GAAW,MAAM,IAAI;QAC/F,CAAC;IACF;IAEA,QAAQ,IAAA,EAIN;QACD,OAAO,IAAA,CAAK,QAAA,CAAS,IAAI;IAC1B;IAEQ,UAAA;IAAA,cAAA,GAER,SAAS,KAAA,EAAsB;QAC9B,IAAA,CAAK,SAAA,GAAY;QACjB,OAAO,IAAA;IACR;IAEA,UAAkD,CAAC,sBAAsB;QACxE,iJAAO,SAAA,CAAO,eAAA,CAAgB,qBAAqB,MAAM;YACxD,OAAO,IAAA,CAAK,QAAA,CAAS,EAAE,OAAA,CAAQ,mBAAmB,IAAA,CAAK,SAAS;QACjE,CAAC;IACF,EAAA;AACD","debugId":null}},
    {"offset": {"line": 10171, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/db.ts"],"sourcesContent":["import type { Cache } from '~/cache/core/cache.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { PgDialect } from '~/pg-core/dialect.ts';\nimport {\n\tPgDeleteBase,\n\tPgInsertBuilder,\n\tPgSelectBuilder,\n\tPgUpdateBuilder,\n\tQueryBuilder,\n} from '~/pg-core/query-builders/index.ts';\nimport type {\n\tPgQueryResultHKT,\n\tPgQueryResultKind,\n\tPgSession,\n\tPgTransaction,\n\tPgTransactionConfig,\n\tPreparedQueryConfig,\n} from '~/pg-core/session.ts';\nimport type { PgTable } from '~/pg-core/table.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { ExtractTablesWithRelations, RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport { type ColumnsSelection, type SQL, sql, type SQLWrapper } from '~/sql/sql.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport type { DrizzleTypeError, NeonAuthToken } from '~/utils.ts';\nimport type { PgColumn } from './columns/index.ts';\nimport { PgCountBuilder } from './query-builders/count.ts';\nimport { RelationalQueryBuilder } from './query-builders/query.ts';\nimport { PgRaw } from './query-builders/raw.ts';\nimport { PgRefreshMaterializedView } from './query-builders/refresh-materialized-view.ts';\nimport type { SelectedFields } from './query-builders/select.types.ts';\nimport type { WithBuilder } from './subquery.ts';\nimport type { PgViewBase } from './view-base.ts';\nimport type { PgMaterializedView } from './view.ts';\n\nexport class PgDatabase<\n\tTQueryResult extends PgQueryResultHKT,\n\tTFullSchema extends Record<string, unknown> = Record<string, never>,\n\tTSchema extends TablesRelationalConfig = ExtractTablesWithRelations<TFullSchema>,\n> {\n\tstatic readonly [entityKind]: string = 'PgDatabase';\n\n\tdeclare readonly _: {\n\t\treadonly schema: TSchema | undefined;\n\t\treadonly fullSchema: TFullSchema;\n\t\treadonly tableNamesMap: Record<string, string>;\n\t\treadonly session: PgSession<TQueryResult, TFullSchema, TSchema>;\n\t};\n\n\tquery: TFullSchema extends Record<string, never>\n\t\t? DrizzleTypeError<'Seems like the schema generic is missing - did you forget to add it to your DB type?'>\n\t\t: {\n\t\t\t[K in keyof TSchema]: RelationalQueryBuilder<TSchema, TSchema[K]>;\n\t\t};\n\n\tconstructor(\n\t\t/** @internal */\n\t\treadonly dialect: PgDialect,\n\t\t/** @internal */\n\t\treadonly session: PgSession<any, any, any>,\n\t\tschema: RelationalSchemaConfig<TSchema> | undefined,\n\t) {\n\t\tthis._ = schema\n\t\t\t? {\n\t\t\t\tschema: schema.schema,\n\t\t\t\tfullSchema: schema.fullSchema as TFullSchema,\n\t\t\t\ttableNamesMap: schema.tableNamesMap,\n\t\t\t\tsession,\n\t\t\t}\n\t\t\t: {\n\t\t\t\tschema: undefined,\n\t\t\t\tfullSchema: {} as TFullSchema,\n\t\t\t\ttableNamesMap: {},\n\t\t\t\tsession,\n\t\t\t};\n\t\tthis.query = {} as typeof this['query'];\n\t\tif (this._.schema) {\n\t\t\tfor (const [tableName, columns] of Object.entries(this._.schema)) {\n\t\t\t\t(this.query as PgDatabase<TQueryResult, Record<string, any>>['query'])[tableName] = new RelationalQueryBuilder(\n\t\t\t\t\tschema!.fullSchema,\n\t\t\t\t\tthis._.schema,\n\t\t\t\t\tthis._.tableNamesMap,\n\t\t\t\t\tschema!.fullSchema[tableName] as PgTable,\n\t\t\t\t\tcolumns,\n\t\t\t\t\tdialect,\n\t\t\t\t\tsession,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tthis.$cache = { invalidate: async (_params: any) => {} };\n\t}\n\n\t/**\n\t * Creates a subquery that defines a temporary named result set as a CTE.\n\t *\n\t * It is useful for breaking down complex queries into simpler parts and for reusing the result set in subsequent parts of the query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t *\n\t * @param alias The alias for the subquery.\n\t *\n\t * Failure to provide an alias will result in a DrizzleTypeError, preventing the subquery from being referenced in other queries.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Create a subquery with alias 'sq' and use it in the select query\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t *\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t *\n\t * To select arbitrary SQL values as fields in a CTE and reference them in other CTEs or in the main query, you need to add aliases to them:\n\t *\n\t * ```ts\n\t * // Select an arbitrary SQL value as a field in a CTE and reference it in the main query\n\t * const sq = db.$with('sq').as(db.select({\n\t *   name: sql<string>`upper(${users.name})`.as('name'),\n\t * })\n\t * .from(users));\n\t *\n\t * const result = await db.with(sq).select({ name: sq.name }).from(sq);\n\t * ```\n\t */\n\t$with: WithBuilder = (alias: string, selection?: ColumnsSelection) => {\n\t\tconst self = this;\n\t\tconst as = (\n\t\t\tqb:\n\t\t\t\t| TypedQueryBuilder<ColumnsSelection | undefined>\n\t\t\t\t| SQL\n\t\t\t\t| ((qb: QueryBuilder) => TypedQueryBuilder<ColumnsSelection | undefined> | SQL),\n\t\t) => {\n\t\t\tif (typeof qb === 'function') {\n\t\t\t\tqb = qb(new QueryBuilder(self.dialect));\n\t\t\t}\n\n\t\t\treturn new Proxy(\n\t\t\t\tnew WithSubquery(\n\t\t\t\t\tqb.getSQL(),\n\t\t\t\t\tselection ?? ('getSelectedFields' in qb ? qb.getSelectedFields() ?? {} : {}) as SelectedFields,\n\t\t\t\t\talias,\n\t\t\t\t\ttrue,\n\t\t\t\t),\n\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t);\n\t\t};\n\t\treturn { as };\n\t};\n\n\t$count(\n\t\tsource: PgTable | PgViewBase | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t) {\n\t\treturn new PgCountBuilder({ source, filters, session: this.session });\n\t}\n\n\t$cache: { invalidate: Cache['onMutate'] };\n\n\t/**\n\t * Incorporates a previously defined CTE (using `$with`) into the main query.\n\t *\n\t * This method allows the main query to reference a temporary named result set.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t *\n\t * @param queries The CTEs to incorporate into the main query.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Define a subquery 'sq' as a CTE using $with\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t *\n\t * // Incorporate the CTE 'sq' into the main query and select from it\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t */\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\t/**\n\t\t * Creates a select query.\n\t\t *\n\t\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t\t *\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Select all columns and all rows from the 'cars' table\n\t\t * const allCars: Car[] = await db.select().from(cars);\n\t\t *\n\t\t * // Select specific columns and all rows from the 'cars' table\n\t\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({\n\t\t *   id: cars.id,\n\t\t *   brand: cars.brand\n\t\t * })\n\t\t *   .from(cars);\n\t\t * ```\n\t\t *\n\t\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t\t *\n\t\t * ```ts\n\t\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t\t *   id: cars.id,\n\t\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t\t * })\n\t\t *   .from(cars);\n\t\t * ```\n\t\t */\n\t\tfunction select(): PgSelectBuilder<undefined>;\n\t\tfunction select<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection>;\n\t\tfunction select<TSelection extends SelectedFields>(fields?: TSelection): PgSelectBuilder<TSelection | undefined> {\n\t\t\treturn new PgSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Adds `distinct` expression to the select query.\n\t\t *\n\t\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t\t *\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t * ```ts\n\t\t * // Select all unique rows from the 'cars' table\n\t\t * await db.selectDistinct()\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t\t *\n\t\t * // Select all unique brands from the 'cars' table\n\t\t * await db.selectDistinct({ brand: cars.brand })\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.brand);\n\t\t * ```\n\t\t */\n\t\tfunction selectDistinct(): PgSelectBuilder<undefined>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): PgSelectBuilder<TSelection | undefined> {\n\t\t\treturn new PgSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Adds `distinct on` expression to the select query.\n\t\t *\n\t\t * Calling this method will specify how the unique rows are determined.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t\t *\n\t\t * @param on The expression defining uniqueness.\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t * ```ts\n\t\t * // Select the first row for each unique brand from the 'cars' table\n\t\t * await db.selectDistinctOn([cars.brand])\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.brand);\n\t\t *\n\t\t * // Selects the first occurrence of each unique car brand along with its color from the 'cars' table\n\t\t * await db.selectDistinctOn([cars.brand], { brand: cars.brand, color: cars.color })\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.brand, cars.color);\n\t\t * ```\n\t\t */\n\t\tfunction selectDistinctOn(on: (PgColumn | SQLWrapper)[]): PgSelectBuilder<undefined>;\n\t\tfunction selectDistinctOn<TSelection extends SelectedFields>(\n\t\t\ton: (PgColumn | SQLWrapper)[],\n\t\t\tfields: TSelection,\n\t\t): PgSelectBuilder<TSelection>;\n\t\tfunction selectDistinctOn<TSelection extends SelectedFields>(\n\t\t\ton: (PgColumn | SQLWrapper)[],\n\t\t\tfields?: TSelection,\n\t\t): PgSelectBuilder<TSelection | undefined> {\n\t\t\treturn new PgSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: { on },\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Creates an update query.\n\t\t *\n\t\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t\t *\n\t\t * Use `.set()` method to specify which values to update.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t\t *\n\t\t * @param table The table to update.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Update all rows in the 'cars' table\n\t\t * await db.update(cars).set({ color: 'red' });\n\t\t *\n\t\t * // Update rows with filters and conditions\n\t\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t\t *\n\t\t * // Update with returning clause\n\t\t * const updatedCar: Car[] = await db.update(cars)\n\t\t *   .set({ color: 'red' })\n\t\t *   .where(eq(cars.id, 1))\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction update<TTable extends PgTable>(table: TTable): PgUpdateBuilder<TTable, TQueryResult> {\n\t\t\treturn new PgUpdateBuilder(table, self.session, self.dialect, queries);\n\t\t}\n\n\t\t/**\n\t\t * Creates an insert query.\n\t\t *\n\t\t * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/insert}\n\t\t *\n\t\t * @param table The table to insert into.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Insert one row\n\t\t * await db.insert(cars).values({ brand: 'BMW' });\n\t\t *\n\t\t * // Insert multiple rows\n\t\t * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n\t\t *\n\t\t * // Insert with returning clause\n\t\t * const insertedCar: Car[] = await db.insert(cars)\n\t\t *   .values({ brand: 'BMW' })\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction insert<TTable extends PgTable>(table: TTable): PgInsertBuilder<TTable, TQueryResult> {\n\t\t\treturn new PgInsertBuilder(table, self.session, self.dialect, queries);\n\t\t}\n\n\t\t/**\n\t\t * Creates a delete query.\n\t\t *\n\t\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t\t *\n\t\t * @param table The table to delete from.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Delete all rows in the 'cars' table\n\t\t * await db.delete(cars);\n\t\t *\n\t\t * // Delete rows with filters and conditions\n\t\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t\t *\n\t\t * // Delete with returning clause\n\t\t * const deletedCar: Car[] = await db.delete(cars)\n\t\t *   .where(eq(cars.id, 1))\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction delete_<TTable extends PgTable>(table: TTable): PgDeleteBase<TTable, TQueryResult> {\n\t\t\treturn new PgDeleteBase(table, self.session, self.dialect, queries);\n\t\t}\n\n\t\treturn { select, selectDistinct, selectDistinctOn, update, insert, delete: delete_ };\n\t}\n\n\t/**\n\t * Creates a select query.\n\t *\n\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t *\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all columns and all rows from the 'cars' table\n\t * const allCars: Car[] = await db.select().from(cars);\n\t *\n\t * // Select specific columns and all rows from the 'cars' table\n\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   brand: cars.brand\n\t * })\n\t *   .from(cars);\n\t * ```\n\t *\n\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t *\n\t * ```ts\n\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t * })\n\t *   .from(cars);\n\t * ```\n\t */\n\tselect(): PgSelectBuilder<undefined>;\n\tselect<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection>;\n\tselect<TSelection extends SelectedFields>(fields?: TSelection): PgSelectBuilder<TSelection | undefined> {\n\t\treturn new PgSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t});\n\t}\n\n\t/**\n\t * Adds `distinct` expression to the select query.\n\t *\n\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t *\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t * ```ts\n\t * // Select all unique rows from the 'cars' table\n\t * await db.selectDistinct()\n\t *   .from(cars)\n\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t *\n\t * // Select all unique brands from the 'cars' table\n\t * await db.selectDistinct({ brand: cars.brand })\n\t *   .from(cars)\n\t *   .orderBy(cars.brand);\n\t * ```\n\t */\n\tselectDistinct(): PgSelectBuilder<undefined>;\n\tselectDistinct<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection>;\n\tselectDistinct<TSelection extends SelectedFields>(fields?: TSelection): PgSelectBuilder<TSelection | undefined> {\n\t\treturn new PgSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\t/**\n\t * Adds `distinct on` expression to the select query.\n\t *\n\t * Calling this method will specify how the unique rows are determined.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t *\n\t * @param on The expression defining uniqueness.\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t * ```ts\n\t * // Select the first row for each unique brand from the 'cars' table\n\t * await db.selectDistinctOn([cars.brand])\n\t *   .from(cars)\n\t *   .orderBy(cars.brand);\n\t *\n\t * // Selects the first occurrence of each unique car brand along with its color from the 'cars' table\n\t * await db.selectDistinctOn([cars.brand], { brand: cars.brand, color: cars.color })\n\t *   .from(cars)\n\t *   .orderBy(cars.brand, cars.color);\n\t * ```\n\t */\n\tselectDistinctOn(on: (PgColumn | SQLWrapper)[]): PgSelectBuilder<undefined>;\n\tselectDistinctOn<TSelection extends SelectedFields>(\n\t\ton: (PgColumn | SQLWrapper)[],\n\t\tfields: TSelection,\n\t): PgSelectBuilder<TSelection>;\n\tselectDistinctOn<TSelection extends SelectedFields>(\n\t\ton: (PgColumn | SQLWrapper)[],\n\t\tfields?: TSelection,\n\t): PgSelectBuilder<TSelection | undefined> {\n\t\treturn new PgSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\tdistinct: { on },\n\t\t});\n\t}\n\n\t/**\n\t * Creates an update query.\n\t *\n\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t *\n\t * Use `.set()` method to specify which values to update.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t *\n\t * @param table The table to update.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Update all rows in the 'cars' table\n\t * await db.update(cars).set({ color: 'red' });\n\t *\n\t * // Update rows with filters and conditions\n\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t *\n\t * // Update with returning clause\n\t * const updatedCar: Car[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.id, 1))\n\t *   .returning();\n\t * ```\n\t */\n\tupdate<TTable extends PgTable>(table: TTable): PgUpdateBuilder<TTable, TQueryResult> {\n\t\treturn new PgUpdateBuilder(table, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates an insert query.\n\t *\n\t * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert}\n\t *\n\t * @param table The table to insert into.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Insert one row\n\t * await db.insert(cars).values({ brand: 'BMW' });\n\t *\n\t * // Insert multiple rows\n\t * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n\t *\n\t * // Insert with returning clause\n\t * const insertedCar: Car[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning();\n\t * ```\n\t */\n\tinsert<TTable extends PgTable>(table: TTable): PgInsertBuilder<TTable, TQueryResult> {\n\t\treturn new PgInsertBuilder(table, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates a delete query.\n\t *\n\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *\n\t * @param table The table to delete from.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Delete all rows in the 'cars' table\n\t * await db.delete(cars);\n\t *\n\t * // Delete rows with filters and conditions\n\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t *\n\t * // Delete with returning clause\n\t * const deletedCar: Car[] = await db.delete(cars)\n\t *   .where(eq(cars.id, 1))\n\t *   .returning();\n\t * ```\n\t */\n\tdelete<TTable extends PgTable>(table: TTable): PgDeleteBase<TTable, TQueryResult> {\n\t\treturn new PgDeleteBase(table, this.session, this.dialect);\n\t}\n\n\trefreshMaterializedView<TView extends PgMaterializedView>(view: TView): PgRefreshMaterializedView<TQueryResult> {\n\t\treturn new PgRefreshMaterializedView(view, this.session, this.dialect);\n\t}\n\n\tprotected authToken?: NeonAuthToken;\n\n\texecute<TRow extends Record<string, unknown> = Record<string, unknown>>(\n\t\tquery: SQLWrapper | string,\n\t): PgRaw<PgQueryResultKind<TQueryResult, TRow>> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tconst builtQuery = this.dialect.sqlToQuery(sequel);\n\t\tconst prepared = this.session.prepareQuery<\n\t\t\tPreparedQueryConfig & { execute: PgQueryResultKind<TQueryResult, TRow> }\n\t\t>(\n\t\t\tbuiltQuery,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tfalse,\n\t\t);\n\t\treturn new PgRaw(\n\t\t\t() => prepared.execute(undefined, this.authToken),\n\t\t\tsequel,\n\t\t\tbuiltQuery,\n\t\t\t(result) => prepared.mapResult(result, true),\n\t\t);\n\t}\n\n\ttransaction<T>(\n\t\ttransaction: (tx: PgTransaction<TQueryResult, TFullSchema, TSchema>) => Promise<T>,\n\t\tconfig?: PgTransactionConfig,\n\t): Promise<T> {\n\t\treturn this.session.transaction(transaction, config);\n\t}\n}\n\nexport type PgWithReplicas<Q> = Q & { $primary: Q };\n\nexport const withReplicas = <\n\tHKT extends PgQueryResultHKT,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n\tQ extends PgDatabase<\n\t\tHKT,\n\t\tTFullSchema,\n\t\tTSchema extends Record<string, unknown> ? ExtractTablesWithRelations<TFullSchema> : TSchema\n\t>,\n>(\n\tprimary: Q,\n\treplicas: [Q, ...Q[]],\n\tgetReplica: (replicas: Q[]) => Q = () => replicas[Math.floor(Math.random() * replicas.length)]!,\n): PgWithReplicas<Q> => {\n\tconst select: Q['select'] = (...args: []) => getReplica(replicas).select(...args);\n\tconst selectDistinct: Q['selectDistinct'] = (...args: []) => getReplica(replicas).selectDistinct(...args);\n\tconst selectDistinctOn: Q['selectDistinctOn'] = (...args: [any]) => getReplica(replicas).selectDistinctOn(...args);\n\tconst $count: Q['$count'] = (...args: [any]) => getReplica(replicas).$count(...args);\n\tconst _with: Q['with'] = (...args: any) => getReplica(replicas).with(...args);\n\tconst $with: Q['$with'] = (arg: any) => getReplica(replicas).$with(arg) as any;\n\n\tconst update: Q['update'] = (...args: [any]) => primary.update(...args);\n\tconst insert: Q['insert'] = (...args: [any]) => primary.insert(...args);\n\tconst $delete: Q['delete'] = (...args: [any]) => primary.delete(...args);\n\tconst execute: Q['execute'] = (...args: [any]) => primary.execute(...args);\n\tconst transaction: Q['transaction'] = (...args: [any]) => primary.transaction(...args);\n\tconst refreshMaterializedView: Q['refreshMaterializedView'] = (...args: [any]) =>\n\t\tprimary.refreshMaterializedView(...args);\n\n\treturn {\n\t\t...primary,\n\t\tupdate,\n\t\tinsert,\n\t\tdelete: $delete,\n\t\texecute,\n\t\ttransaction,\n\t\trefreshMaterializedView,\n\t\t$primary: primary,\n\t\tselect,\n\t\tselectDistinct,\n\t\tselectDistinctOn,\n\t\t$count,\n\t\t$with,\n\t\twith: _with,\n\t\tget query() {\n\t\t\treturn getReplica(replicas).query;\n\t\t},\n\t};\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 10504, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/cache/core/cache.ts"],"sourcesContent":["import { entityKind } from '~/entity.ts';\nimport type { Table } from '~/index.ts';\nimport type { CacheConfig } from './types.ts';\n\nexport abstract class Cache {\n\tstatic readonly [entityKind]: string = 'Cache';\n\n\tabstract strategy(): 'explicit' | 'all';\n\n\t/**\n\t * Invoked if we should check cache for cached response\n\t * @param sql\n\t * @param tables\n\t */\n\tabstract get(\n\t\tkey: string,\n\t\ttables: string[],\n\t\tisTag: boolean,\n\t\tisAutoInvalidate?: boolean,\n\t): Promise<any[] | undefined>;\n\n\t/**\n\t * Invoked if new query should be inserted to cache\n\t * @param sql\n\t * @param tables\n\t */\n\tabstract put(\n\t\thashedQuery: string,\n\t\tresponse: any,\n\t\ttables: string[],\n\t\tisTag: boolean,\n\t\tconfig?: CacheConfig,\n\t): Promise<void>;\n\n\t/**\n\t * Invoked if insert, update, delete was invoked\n\t * @param tables\n\t */\n\tabstract onMutate(\n\t\tparams: MutationOption,\n\t): Promise<void>;\n}\n\nexport class NoopCache extends Cache {\n\toverride strategy() {\n\t\treturn 'all' as const;\n\t}\n\n\tstatic override readonly [entityKind]: string = 'NoopCache';\n\n\toverride async get(_key: string): Promise<any[] | undefined> {\n\t\treturn undefined;\n\t}\n\toverride async put(\n\t\t_hashedQuery: string,\n\t\t_response: any,\n\t\t_tables: string[],\n\t\t_config?: any,\n\t): Promise<void> {\n\t\t// noop\n\t}\n\toverride async onMutate(_params: MutationOption): Promise<void> {\n\t\t// noop\n\t}\n}\n\nexport type MutationOption = { tags?: string | string[]; tables?: Table<any> | Table<any>[] | string | string[] };\n\nexport async function hashQuery(sql: string, params?: any[]) {\n\tconst dataToHash = `${sql}-${JSON.stringify(params)}`;\n\tconst encoder = new TextEncoder();\n\tconst data = encoder.encode(dataToHash);\n\tconst hashBuffer = await crypto.subtle.digest('SHA-256', data);\n\tconst hashArray = [...new Uint8Array(hashBuffer)];\n\tconst hashHex = hashArray.map((b) => b.toString(16).padStart(2, '0')).join('');\n\n\treturn hashHex;\n}\n"],"names":[],"mappings":";;;;;AAAA,SAAS,kBAAkB;;AAIpB,MAAe,MAAM;IAC3B,OAAA,0IAAiB,aAAU,CAAA,GAAY,QAAA;AAoCxC;AAEO,MAAM,kBAAkB,MAAM;IAC3B,WAAW;QACnB,OAAO;IACR;IAEA,OAAA,0IAA0B,aAAU,CAAA,GAAY,YAAA;IAEhD,MAAe,IAAI,IAAA,EAA0C;QAC5D,OAAO,KAAA;IACR;IACA,MAAe,IACd,YAAA,EACA,SAAA,EACA,OAAA,EACA,OAAA,EACgB,CAEjB;IACA,MAAe,SAAS,OAAA,EAAwC,CAEhE;AACD;AAIA,eAAsB,UAAU,GAAA,EAAa,MAAA,EAAgB;IAC5D,MAAM,aAAa,GAAG,GAAG,CAAA,CAAA,EAAI,KAAK,SAAA,CAAU,MAAM,CAAC,EAAA;IACnD,MAAM,UAAU,IAAI,YAAY;IAChC,MAAM,OAAO,QAAQ,MAAA,CAAO,UAAU;IACtC,MAAM,aAAa,MAAM,OAAO,MAAA,CAAO,MAAA,CAAO,WAAW,IAAI;IAC7D,MAAM,YAAY,CAAC;WAAG,IAAI,WAAW,UAAU,CAAC;KAAA;IAChD,MAAM,UAAU,UAAU,GAAA,CAAI,CAAC,IAAM,EAAE,QAAA,CAAS,EAAE,EAAE,QAAA,CAAS,GAAG,GAAG,CAAC,EAAE,IAAA,CAAK,EAAE;IAE7E,OAAO;AACR","debugId":null}},
    {"offset": {"line": 10542, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/pg-core/session.ts"],"sourcesContent":["import { type Cache, hashQuery, NoopCache } from '~/cache/core/cache.ts';\nimport type { WithCacheConfig } from '~/cache/core/types.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport { DrizzleQueryError, TransactionRollbackError } from '~/errors.ts';\nimport type { TablesRelationalConfig } from '~/relations.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport { type Query, type SQL, sql } from '~/sql/index.ts';\nimport { tracer } from '~/tracing.ts';\nimport type { NeonAuthToken } from '~/utils.ts';\nimport { PgDatabase } from './db.ts';\nimport type { PgDialect } from './dialect.ts';\nimport type { SelectedFieldsOrdered } from './query-builders/select.types.ts';\n\nexport interface PreparedQueryConfig {\n\texecute: unknown;\n\tall: unknown;\n\tvalues: unknown;\n}\n\nexport abstract class PgPreparedQuery<T extends PreparedQueryConfig> implements PreparedQuery {\n\tconstructor(\n\t\tprotected query: Query,\n\t\t// cache instance\n\t\tprivate cache: Cache | undefined,\n\t\t// per query related metadata\n\t\tprivate queryMetadata: {\n\t\t\ttype: 'select' | 'update' | 'delete' | 'insert';\n\t\t\ttables: string[];\n\t\t} | undefined,\n\t\t// config that was passed through $withCache\n\t\tprivate cacheConfig?: WithCacheConfig,\n\t) {\n\t\t// it means that no $withCache options were passed and it should be just enabled\n\t\tif (cache && cache.strategy() === 'all' && cacheConfig === undefined) {\n\t\t\tthis.cacheConfig = { enable: true, autoInvalidate: true };\n\t\t}\n\t\tif (!this.cacheConfig?.enable) {\n\t\t\tthis.cacheConfig = undefined;\n\t\t}\n\t}\n\n\tprotected authToken?: NeonAuthToken;\n\n\tgetQuery(): Query {\n\t\treturn this.query;\n\t}\n\n\tmapResult(response: unknown, _isFromBatch?: boolean): unknown {\n\t\treturn response;\n\t}\n\n\t/** @internal */\n\tsetToken(token?: NeonAuthToken) {\n\t\tthis.authToken = token;\n\t\treturn this;\n\t}\n\n\tstatic readonly [entityKind]: string = 'PgPreparedQuery';\n\n\t/** @internal */\n\tjoinsNotNullableMap?: Record<string, boolean>;\n\n\t/** @internal */\n\tprotected async queryWithCache<T>(\n\t\tqueryString: string,\n\t\tparams: any[],\n\t\tquery: () => Promise<T>,\n\t): Promise<T> {\n\t\tif (this.cache === undefined || is(this.cache, NoopCache) || this.queryMetadata === undefined) {\n\t\t\ttry {\n\t\t\t\treturn await query();\n\t\t\t} catch (e) {\n\t\t\t\tthrow new DrizzleQueryError(queryString, params, e as Error);\n\t\t\t}\n\t\t}\n\n\t\t// don't do any mutations, if globally is false\n\t\tif (this.cacheConfig && !this.cacheConfig.enable) {\n\t\t\ttry {\n\t\t\t\treturn await query();\n\t\t\t} catch (e) {\n\t\t\t\tthrow new DrizzleQueryError(queryString, params, e as Error);\n\t\t\t}\n\t\t}\n\n\t\t// For mutate queries, we should query the database, wait for a response, and then perform invalidation\n\t\tif (\n\t\t\t(\n\t\t\t\tthis.queryMetadata.type === 'insert' || this.queryMetadata.type === 'update'\n\t\t\t\t|| this.queryMetadata.type === 'delete'\n\t\t\t) && this.queryMetadata.tables.length > 0\n\t\t) {\n\t\t\ttry {\n\t\t\t\tconst [res] = await Promise.all([\n\t\t\t\t\tquery(),\n\t\t\t\t\tthis.cache.onMutate({ tables: this.queryMetadata.tables }),\n\t\t\t\t]);\n\t\t\t\treturn res;\n\t\t\t} catch (e) {\n\t\t\t\tthrow new DrizzleQueryError(queryString, params, e as Error);\n\t\t\t}\n\t\t}\n\n\t\t// don't do any reads if globally disabled\n\t\tif (!this.cacheConfig) {\n\t\t\ttry {\n\t\t\t\treturn await query();\n\t\t\t} catch (e) {\n\t\t\t\tthrow new DrizzleQueryError(queryString, params, e as Error);\n\t\t\t}\n\t\t}\n\n\t\tif (this.queryMetadata.type === 'select') {\n\t\t\tconst fromCache = await this.cache.get(\n\t\t\t\tthis.cacheConfig.tag ?? await hashQuery(queryString, params),\n\t\t\t\tthis.queryMetadata.tables,\n\t\t\t\tthis.cacheConfig.tag !== undefined,\n\t\t\t\tthis.cacheConfig.autoInvalidate,\n\t\t\t);\n\t\t\tif (fromCache === undefined) {\n\t\t\t\tlet result;\n\t\t\t\ttry {\n\t\t\t\t\tresult = await query();\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow new DrizzleQueryError(queryString, params, e as Error);\n\t\t\t\t}\n\t\t\t\t// put actual key\n\t\t\t\tawait this.cache.put(\n\t\t\t\t\tthis.cacheConfig.tag ?? await hashQuery(queryString, params),\n\t\t\t\t\tresult,\n\t\t\t\t\t// make sure we send tables that were used in a query only if user wants to invalidate it on each write\n\t\t\t\t\tthis.cacheConfig.autoInvalidate ? this.queryMetadata.tables : [],\n\t\t\t\t\tthis.cacheConfig.tag !== undefined,\n\t\t\t\t\tthis.cacheConfig.config,\n\t\t\t\t);\n\t\t\t\t// put flag if we should invalidate or not\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\treturn fromCache as unknown as T;\n\t\t}\n\t\ttry {\n\t\t\treturn await query();\n\t\t} catch (e) {\n\t\t\tthrow new DrizzleQueryError(queryString, params, e as Error);\n\t\t}\n\t}\n\n\tabstract execute(placeholderValues?: Record<string, unknown>): Promise<T['execute']>;\n\t/** @internal */\n\tabstract execute(placeholderValues?: Record<string, unknown>, token?: NeonAuthToken): Promise<T['execute']>;\n\t/** @internal */\n\tabstract execute(placeholderValues?: Record<string, unknown>, token?: NeonAuthToken): Promise<T['execute']>;\n\n\t/** @internal */\n\tabstract all(placeholderValues?: Record<string, unknown>): Promise<T['all']>;\n\n\t/** @internal */\n\tabstract isResponseInArrayMode(): boolean;\n}\n\nexport interface PgTransactionConfig {\n\tisolationLevel?: 'read uncommitted' | 'read committed' | 'repeatable read' | 'serializable';\n\taccessMode?: 'read only' | 'read write';\n\tdeferrable?: boolean;\n}\n\nexport abstract class PgSession<\n\tTQueryResult extends PgQueryResultHKT = PgQueryResultHKT,\n\tTFullSchema extends Record<string, unknown> = Record<string, never>,\n\tTSchema extends TablesRelationalConfig = Record<string, never>,\n> {\n\tstatic readonly [entityKind]: string = 'PgSession';\n\n\tconstructor(protected dialect: PgDialect) {}\n\n\tabstract prepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\tname: string | undefined,\n\t\tisResponseInArrayMode: boolean,\n\t\tcustomResultMapper?: (rows: unknown[][], mapColumnValue?: (value: unknown) => unknown) => T['execute'],\n\t\tqueryMetadata?: {\n\t\t\ttype: 'select' | 'update' | 'delete' | 'insert';\n\t\t\ttables: string[];\n\t\t},\n\t\tcacheConfig?: WithCacheConfig,\n\t): PgPreparedQuery<T>;\n\n\texecute<T>(query: SQL): Promise<T>;\n\t/** @internal */\n\texecute<T>(query: SQL, token?: NeonAuthToken): Promise<T>;\n\t/** @internal */\n\texecute<T>(query: SQL, token?: NeonAuthToken): Promise<T> {\n\t\treturn tracer.startActiveSpan('drizzle.operation', () => {\n\t\t\tconst prepared = tracer.startActiveSpan('drizzle.prepareQuery', () => {\n\t\t\t\treturn this.prepareQuery<PreparedQueryConfig & { execute: T }>(\n\t\t\t\t\tthis.dialect.sqlToQuery(query),\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tfalse,\n\t\t\t\t);\n\t\t\t});\n\n\t\t\treturn prepared.setToken(token).execute(undefined, token);\n\t\t});\n\t}\n\n\tall<T = unknown>(query: SQL): Promise<T[]> {\n\t\treturn this.prepareQuery<PreparedQueryConfig & { all: T[] }>(\n\t\t\tthis.dialect.sqlToQuery(query),\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tfalse,\n\t\t).all();\n\t}\n\n\tasync count(sql: SQL): Promise<number>;\n\t/** @internal */\n\tasync count(sql: SQL, token?: NeonAuthToken): Promise<number>;\n\t/** @internal */\n\tasync count(sql: SQL, token?: NeonAuthToken): Promise<number> {\n\t\tconst res = await this.execute<[{ count: string }]>(sql, token);\n\n\t\treturn Number(\n\t\t\tres[0]['count'],\n\t\t);\n\t}\n\n\tabstract transaction<T>(\n\t\ttransaction: (tx: PgTransaction<TQueryResult, TFullSchema, TSchema>) => Promise<T>,\n\t\tconfig?: PgTransactionConfig,\n\t): Promise<T>;\n}\n\nexport abstract class PgTransaction<\n\tTQueryResult extends PgQueryResultHKT,\n\tTFullSchema extends Record<string, unknown> = Record<string, never>,\n\tTSchema extends TablesRelationalConfig = Record<string, never>,\n> extends PgDatabase<TQueryResult, TFullSchema, TSchema> {\n\tstatic override readonly [entityKind]: string = 'PgTransaction';\n\n\tconstructor(\n\t\tdialect: PgDialect,\n\t\tsession: PgSession<any, any, any>,\n\t\tprotected schema: {\n\t\t\tfullSchema: Record<string, unknown>;\n\t\t\tschema: TSchema;\n\t\t\ttableNamesMap: Record<string, string>;\n\t\t} | undefined,\n\t\tprotected readonly nestedIndex = 0,\n\t) {\n\t\tsuper(dialect, session, schema);\n\t}\n\n\trollback(): never {\n\t\tthrow new TransactionRollbackError();\n\t}\n\n\t/** @internal */\n\tgetTransactionConfigSQL(config: PgTransactionConfig): SQL {\n\t\tconst chunks: string[] = [];\n\t\tif (config.isolationLevel) {\n\t\t\tchunks.push(`isolation level ${config.isolationLevel}`);\n\t\t}\n\t\tif (config.accessMode) {\n\t\t\tchunks.push(config.accessMode);\n\t\t}\n\t\tif (typeof config.deferrable === 'boolean') {\n\t\t\tchunks.push(config.deferrable ? 'deferrable' : 'not deferrable');\n\t\t}\n\t\treturn sql.raw(chunks.join(' '));\n\t}\n\n\tsetTransaction(config: PgTransactionConfig): Promise<void> {\n\t\treturn this.session.execute(sql`set transaction ${this.getTransactionConfigSQL(config)}`);\n\t}\n\n\tabstract override transaction<T>(\n\t\ttransaction: (tx: PgTransaction<TQueryResult, TFullSchema, TSchema>) => Promise<T>,\n\t): Promise<T>;\n}\n\nexport interface PgQueryResultHKT {\n\treadonly $brand: 'PgQueryResultHKT';\n\treadonly row: unknown;\n\treadonly type: unknown;\n}\n\nexport type PgQueryResultKind<TKind extends PgQueryResultHKT, TRow> = (TKind & {\n\treadonly row: TRow;\n})['type'];\n"],"names":["sql"],"mappings":"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","debugId":null}},
    {"offset": {"line": 10699, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/postgres-js/session.ts"],"sourcesContent":["import type { Row, RowList, Sql, TransactionSql } from 'postgres';\nimport { type Cache, NoopCache } from '~/cache/core/index.ts';\nimport type { WithCacheConfig } from '~/cache/core/types.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { Logger } from '~/logger.ts';\nimport { NoopLogger } from '~/logger.ts';\nimport type { PgDialect } from '~/pg-core/dialect.ts';\nimport { PgTransaction } from '~/pg-core/index.ts';\nimport type { SelectedFieldsOrdered } from '~/pg-core/query-builders/select.types.ts';\nimport type { PgQueryResultHKT, PgTransactionConfig, PreparedQueryConfig } from '~/pg-core/session.ts';\nimport { PgPreparedQuery, PgSession } from '~/pg-core/session.ts';\nimport type { RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport { fillPlaceholders, type Query } from '~/sql/sql.ts';\nimport { tracer } from '~/tracing.ts';\nimport { type Assume, mapResultRow } from '~/utils.ts';\n\nexport class PostgresJsPreparedQuery<T extends PreparedQueryConfig> extends PgPreparedQuery<T> {\n\tstatic override readonly [entityKind]: string = 'PostgresJsPreparedQuery';\n\n\tconstructor(\n\t\tprivate client: Sql,\n\t\tprivate queryString: string,\n\t\tprivate params: unknown[],\n\t\tprivate logger: Logger,\n\t\tcache: Cache,\n\t\tqueryMetadata: {\n\t\t\ttype: 'select' | 'update' | 'delete' | 'insert';\n\t\t\ttables: string[];\n\t\t} | undefined,\n\t\tcacheConfig: WithCacheConfig | undefined,\n\t\tprivate fields: SelectedFieldsOrdered | undefined,\n\t\tprivate _isResponseInArrayMode: boolean,\n\t\tprivate customResultMapper?: (rows: unknown[][]) => T['execute'],\n\t) {\n\t\tsuper({ sql: queryString, params }, cache, queryMetadata, cacheConfig);\n\t}\n\n\tasync execute(placeholderValues: Record<string, unknown> | undefined = {}): Promise<T['execute']> {\n\t\treturn tracer.startActiveSpan('drizzle.execute', async (span) => {\n\t\t\tconst params = fillPlaceholders(this.params, placeholderValues);\n\n\t\t\tspan?.setAttributes({\n\t\t\t\t'drizzle.query.text': this.queryString,\n\t\t\t\t'drizzle.query.params': JSON.stringify(params),\n\t\t\t});\n\n\t\t\tthis.logger.logQuery(this.queryString, params);\n\n\t\t\tconst { fields, queryString: query, client, joinsNotNullableMap, customResultMapper } = this;\n\t\t\tif (!fields && !customResultMapper) {\n\t\t\t\treturn tracer.startActiveSpan('drizzle.driver.execute', () => {\n\t\t\t\t\treturn this.queryWithCache(query, params, async () => {\n\t\t\t\t\t\treturn await client.unsafe(query, params as any[]);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst rows = await tracer.startActiveSpan('drizzle.driver.execute', () => {\n\t\t\t\tspan?.setAttributes({\n\t\t\t\t\t'drizzle.query.text': query,\n\t\t\t\t\t'drizzle.query.params': JSON.stringify(params),\n\t\t\t\t});\n\t\t\t\treturn this.queryWithCache(query, params, async () => {\n\t\t\t\t\treturn await client.unsafe(query, params as any[]).values();\n\t\t\t\t});\n\t\t\t});\n\n\t\t\treturn tracer.startActiveSpan('drizzle.mapResponse', () => {\n\t\t\t\treturn customResultMapper\n\t\t\t\t\t? customResultMapper(rows)\n\t\t\t\t\t: rows.map((row) => mapResultRow<T['execute']>(fields!, row, joinsNotNullableMap));\n\t\t\t});\n\t\t});\n\t}\n\n\tall(placeholderValues: Record<string, unknown> | undefined = {}): Promise<T['all']> {\n\t\treturn tracer.startActiveSpan('drizzle.execute', async (span) => {\n\t\t\tconst params = fillPlaceholders(this.params, placeholderValues);\n\t\t\tspan?.setAttributes({\n\t\t\t\t'drizzle.query.text': this.queryString,\n\t\t\t\t'drizzle.query.params': JSON.stringify(params),\n\t\t\t});\n\t\t\tthis.logger.logQuery(this.queryString, params);\n\t\t\treturn tracer.startActiveSpan('drizzle.driver.execute', () => {\n\t\t\t\tspan?.setAttributes({\n\t\t\t\t\t'drizzle.query.text': this.queryString,\n\t\t\t\t\t'drizzle.query.params': JSON.stringify(params),\n\t\t\t\t});\n\t\t\t\treturn this.queryWithCache(this.queryString, params, async () => {\n\t\t\t\t\treturn this.client.unsafe(this.queryString, params as any[]);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\t/** @internal */\n\tisResponseInArrayMode(): boolean {\n\t\treturn this._isResponseInArrayMode;\n\t}\n}\n\nexport interface PostgresJsSessionOptions {\n\tlogger?: Logger;\n\tcache?: Cache;\n}\n\nexport class PostgresJsSession<\n\tTSQL extends Sql,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends PgSession<PostgresJsQueryResultHKT, TFullSchema, TSchema> {\n\tstatic override readonly [entityKind]: string = 'PostgresJsSession';\n\n\tlogger: Logger;\n\tprivate cache: Cache;\n\n\tconstructor(\n\t\tpublic client: TSQL,\n\t\tdialect: PgDialect,\n\t\tprivate schema: RelationalSchemaConfig<TSchema> | undefined,\n\t\t/** @internal */\n\t\treadonly options: PostgresJsSessionOptions = {},\n\t) {\n\t\tsuper(dialect);\n\t\tthis.logger = options.logger ?? new NoopLogger();\n\t\tthis.cache = options.cache ?? new NoopCache();\n\t}\n\n\tprepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\tname: string | undefined,\n\t\tisResponseInArrayMode: boolean,\n\t\tcustomResultMapper?: (rows: unknown[][]) => T['execute'],\n\t\tqueryMetadata?: {\n\t\t\ttype: 'select' | 'update' | 'delete' | 'insert';\n\t\t\ttables: string[];\n\t\t},\n\t\tcacheConfig?: WithCacheConfig,\n\t): PgPreparedQuery<T> {\n\t\treturn new PostgresJsPreparedQuery(\n\t\t\tthis.client,\n\t\t\tquery.sql,\n\t\t\tquery.params,\n\t\t\tthis.logger,\n\t\t\tthis.cache,\n\t\t\tqueryMetadata,\n\t\t\tcacheConfig,\n\t\t\tfields,\n\t\t\tisResponseInArrayMode,\n\t\t\tcustomResultMapper,\n\t\t);\n\t}\n\n\tquery(query: string, params: unknown[]): Promise<RowList<Row[]>> {\n\t\tthis.logger.logQuery(query, params);\n\t\treturn this.client.unsafe(query, params as any[]).values();\n\t}\n\n\tqueryObjects<T extends Row>(\n\t\tquery: string,\n\t\tparams: unknown[],\n\t): Promise<RowList<T[]>> {\n\t\treturn this.client.unsafe(query, params as any[]);\n\t}\n\n\toverride transaction<T>(\n\t\ttransaction: (tx: PostgresJsTransaction<TFullSchema, TSchema>) => Promise<T>,\n\t\tconfig?: PgTransactionConfig,\n\t): Promise<T> {\n\t\treturn this.client.begin(async (client) => {\n\t\t\tconst session = new PostgresJsSession<TransactionSql, TFullSchema, TSchema>(\n\t\t\t\tclient,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.options,\n\t\t\t);\n\t\t\tconst tx = new PostgresJsTransaction(this.dialect, session, this.schema);\n\t\t\tif (config) {\n\t\t\t\tawait tx.setTransaction(config);\n\t\t\t}\n\t\t\treturn transaction(tx);\n\t\t}) as Promise<T>;\n\t}\n}\n\nexport class PostgresJsTransaction<\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends PgTransaction<PostgresJsQueryResultHKT, TFullSchema, TSchema> {\n\tstatic override readonly [entityKind]: string = 'PostgresJsTransaction';\n\n\tconstructor(\n\t\tdialect: PgDialect,\n\t\t/** @internal */\n\t\toverride readonly session: PostgresJsSession<TransactionSql, TFullSchema, TSchema>,\n\t\tschema: RelationalSchemaConfig<TSchema> | undefined,\n\t\tnestedIndex = 0,\n\t) {\n\t\tsuper(dialect, session, schema, nestedIndex);\n\t}\n\n\toverride transaction<T>(\n\t\ttransaction: (tx: PostgresJsTransaction<TFullSchema, TSchema>) => Promise<T>,\n\t): Promise<T> {\n\t\treturn this.session.client.savepoint((client) => {\n\t\t\tconst session = new PostgresJsSession<TransactionSql, TFullSchema, TSchema>(\n\t\t\t\tclient,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.session.options,\n\t\t\t);\n\t\t\tconst tx = new PostgresJsTransaction<TFullSchema, TSchema>(this.dialect, session, this.schema);\n\t\t\treturn transaction(tx);\n\t\t}) as Promise<T>;\n\t}\n}\n\nexport interface PostgresJsQueryResultHKT extends PgQueryResultHKT {\n\ttype: RowList<Assume<this['row'], Row>[]>;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 10840, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/src/postgres-js/driver.ts"],"sourcesContent":["import pgClient, { type Options, type PostgresType, type Sql } from 'postgres';\nimport { entityKind } from '~/entity.ts';\nimport { DefaultLogger } from '~/logger.ts';\nimport { PgDatabase } from '~/pg-core/db.ts';\nimport { PgDialect } from '~/pg-core/dialect.ts';\nimport {\n\tcreateTableRelationsHelpers,\n\textractTablesRelationalConfig,\n\ttype RelationalSchemaConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport { type DrizzleConfig, isConfig } from '~/utils.ts';\nimport type { PostgresJsQueryResultHKT } from './session.ts';\nimport { PostgresJsSession } from './session.ts';\n\nexport class PostgresJsDatabase<\n\tTSchema extends Record<string, unknown> = Record<string, never>,\n> extends PgDatabase<PostgresJsQueryResultHKT, TSchema> {\n\tstatic override readonly [entityKind]: string = 'PostgresJsDatabase';\n}\n\nfunction construct<TSchema extends Record<string, unknown> = Record<string, never>>(\n\tclient: Sql,\n\tconfig: DrizzleConfig<TSchema> = {},\n): PostgresJsDatabase<TSchema> & {\n\t$client: Sql;\n} {\n\tconst transparentParser = (val: any) => val;\n\n\t// Override postgres.js default date parsers: https://github.com/porsager/postgres/discussions/761\n\tfor (const type of ['1184', '1082', '1083', '1114', '1182', '1185', '1115', '1231']) {\n\t\tclient.options.parsers[type as any] = transparentParser;\n\t\tclient.options.serializers[type as any] = transparentParser;\n\t}\n\tclient.options.serializers['114'] = transparentParser;\n\tclient.options.serializers['3802'] = transparentParser;\n\n\tconst dialect = new PgDialect({ casing: config.casing });\n\tlet logger;\n\tif (config.logger === true) {\n\t\tlogger = new DefaultLogger();\n\t} else if (config.logger !== false) {\n\t\tlogger = config.logger;\n\t}\n\n\tlet schema: RelationalSchemaConfig<TablesRelationalConfig> | undefined;\n\tif (config.schema) {\n\t\tconst tablesConfig = extractTablesRelationalConfig(\n\t\t\tconfig.schema,\n\t\t\tcreateTableRelationsHelpers,\n\t\t);\n\t\tschema = {\n\t\t\tfullSchema: config.schema,\n\t\t\tschema: tablesConfig.tables,\n\t\t\ttableNamesMap: tablesConfig.tableNamesMap,\n\t\t};\n\t}\n\n\tconst session = new PostgresJsSession(client, dialect, schema, { logger, cache: config.cache });\n\tconst db = new PostgresJsDatabase(dialect, session, schema as any) as PostgresJsDatabase<TSchema>;\n\t(<any> db).$client = client;\n\t(<any> db).$cache = config.cache;\n\tif ((<any> db).$cache) {\n\t\t(<any> db).$cache['invalidate'] = config.cache?.onMutate;\n\t}\n\n\treturn db as any;\n}\n\nexport function drizzle<\n\tTSchema extends Record<string, unknown> = Record<string, never>,\n\tTClient extends Sql = Sql,\n>(\n\t...params: [\n\t\tTClient | string,\n\t] | [\n\t\tTClient | string,\n\t\tDrizzleConfig<TSchema>,\n\t] | [\n\t\t(\n\t\t\t& DrizzleConfig<TSchema>\n\t\t\t& ({\n\t\t\t\tconnection: string | ({ url?: string } & Options<Record<string, PostgresType>>);\n\t\t\t} | {\n\t\t\t\tclient: TClient;\n\t\t\t})\n\t\t),\n\t]\n): PostgresJsDatabase<TSchema> & {\n\t$client: TClient;\n} {\n\tif (typeof params[0] === 'string') {\n\t\tconst instance = pgClient(params[0] as string);\n\n\t\treturn construct(instance, params[1]) as any;\n\t}\n\n\tif (isConfig(params[0])) {\n\t\tconst { connection, client, ...drizzleConfig } = params[0] as {\n\t\t\tconnection?: { url?: string } & Options<Record<string, PostgresType>>;\n\t\t\tclient?: TClient;\n\t\t} & DrizzleConfig<TSchema>;\n\n\t\tif (client) return construct(client, drizzleConfig) as any;\n\n\t\tif (typeof connection === 'object' && connection.url !== undefined) {\n\t\t\tconst { url, ...config } = connection;\n\n\t\t\tconst instance = pgClient(url, config);\n\t\t\treturn construct(instance, drizzleConfig) as any;\n\t\t}\n\n\t\tconst instance = pgClient(connection);\n\t\treturn construct(instance, drizzleConfig) as any;\n\t}\n\n\treturn construct(params[0] as TClient, params[1] as DrizzleConfig<TSchema> | undefined) as any;\n}\n\nexport namespace drizzle {\n\texport function mock<TSchema extends Record<string, unknown> = Record<string, never>>(\n\t\tconfig?: DrizzleConfig<TSchema>,\n\t): PostgresJsDatabase<TSchema> & {\n\t\t$client: '$client is not available on drizzle.mock()';\n\t} {\n\t\treturn construct({\n\t\t\toptions: {\n\t\t\t\tparsers: {},\n\t\t\t\tserializers: {},\n\t\t\t},\n\t\t} as any, config) as any;\n\t}\n}\n"],"names":["instance","drizzle"],"mappings":"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","debugId":null}},
    {"offset": {"line": 10947, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/src/build/webpack/loaders/next-flight-loader/action-validate.ts"],"sourcesContent":["// This function ensures that all the exported values are valid server actions,\n// during the runtime. By definition all actions are required to be async\n// functions, but here we can only check that they are functions.\nexport function ensureServerEntryExports(actions: any[]) {\n  for (let i = 0; i < actions.length; i++) {\n    const action = actions[i]\n    if (typeof action !== 'function') {\n      throw new Error(\n        `A \"use server\" file can only export async functions, found ${typeof action}.\\nRead more: https://nextjs.org/docs/messages/invalid-use-server-value`\n      )\n    }\n  }\n}\n"],"names":["ensureServerEntryExports","actions","i","length","action","Error"],"mappings":"AAAA,+EAA+E;AAC/E,yEAAyE;AACzE,iEAAiE;;;;+BACjDA,4BAAAA;;;eAAAA;;;AAAT,SAASA,yBAAyBC,OAAc;IACrD,IAAK,IAAIC,IAAI,GAAGA,IAAID,QAAQE,MAAM,EAAED,IAAK;QACvC,MAAME,SAASH,OAAO,CAACC,EAAE;QACzB,IAAI,OAAOE,WAAW,YAAY;YAChC,MAAM,OAAA,cAEL,CAFK,IAAIC,MACR,CAAC,2DAA2D,EAAE,OAAOD,OAAO,uEAAuE,CAAC,GADhJ,qBAAA;uBAAA;4BAAA;8BAAA;YAEN;QACF;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10992, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/server/route-modules/app-page/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/app-page/module.js')\n} else {\n  if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.prod.js')\n      }\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.prod.js')\n      }\n    }\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","__NEXT_EXPERIMENTAL_REACT","NODE_ENV","TURBOPACK"],"mappings":"AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,QAAQ;;KAElC;IACL,IAAIF,QAAQC,GAAG,CAACK,yBAAyB,EAAE;;SAcpC;QACL,IAAIN,QAAQC,GAAG,CAACM,QAAQ,KAAK,WAAe;YAC1C,IAAIP,QAAQC,GAAG,CAACO,SAAS,eAAE;gBACzBL,OAAOC,OAAO,GAAGC,QAAQ;YAC3B,OAAO;;QAGT,OAAO;;IAOT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11014, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/server/instrumentation/utils.ts"],"sourcesContent":["export function getRevalidateReason(params: {\n  isOnDemandRevalidate?: boolean\n  isRevalidate?: boolean\n}): 'on-demand' | 'stale' | undefined {\n  if (params.isOnDemandRevalidate) {\n    return 'on-demand'\n  }\n  if (params.isRevalidate) {\n    return 'stale'\n  }\n  return undefined\n}\n"],"names":["getRevalidateReason","params","isOnDemandRevalidate","isRevalidate","undefined"],"mappings":";;;AAAO,SAASA,oBAAoBC,MAGnC;IACC,IAAIA,OAAOC,oBAAoB,EAAE;QAC/B,OAAO;IACT;IACA,IAAID,OAAOE,YAAY,EAAE;QACvB,OAAO;IACT;IACA,OAAOC;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11030, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/server/app-render/interop-default.ts"],"sourcesContent":["/**\n * Interop between \"export default\" and \"module.exports\".\n */\nexport function interopDefault(mod: any) {\n  return mod.default || mod\n}\n"],"names":["interopDefault","mod","default"],"mappings":"AAAA;;CAEC,GACD;;;AAAO,SAASA,eAAeC,GAAQ;IACrC,OAAOA,IAAIC,OAAO,IAAID;AACxB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11042, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/server/web/spec-extension/adapters/headers.ts"],"sourcesContent":["import type { IncomingHttpHeaders } from 'http'\n\nimport { ReflectAdapter } from './reflect'\n\n/**\n * @internal\n */\nexport class ReadonlyHeadersError extends Error {\n  constructor() {\n    super(\n      'Headers cannot be modified. Read more: https://nextjs.org/docs/app/api-reference/functions/headers'\n    )\n  }\n\n  public static callable() {\n    throw new ReadonlyHeadersError()\n  }\n}\n\nexport type ReadonlyHeaders = Headers & {\n  /** @deprecated Method unavailable on `ReadonlyHeaders`. Read more: https://nextjs.org/docs/app/api-reference/functions/headers */\n  append(...args: any[]): void\n  /** @deprecated Method unavailable on `ReadonlyHeaders`. Read more: https://nextjs.org/docs/app/api-reference/functions/headers */\n  set(...args: any[]): void\n  /** @deprecated Method unavailable on `ReadonlyHeaders`. Read more: https://nextjs.org/docs/app/api-reference/functions/headers */\n  delete(...args: any[]): void\n}\nexport class HeadersAdapter extends Headers {\n  private readonly headers: IncomingHttpHeaders\n\n  constructor(headers: IncomingHttpHeaders) {\n    // We've already overridden the methods that would be called, so we're just\n    // calling the super constructor to ensure that the instanceof check works.\n    super()\n\n    this.headers = new Proxy(headers, {\n      get(target, prop, receiver) {\n        // Because this is just an object, we expect that all \"get\" operations\n        // are for properties. If it's a \"get\" for a symbol, we'll just return\n        // the symbol.\n        if (typeof prop === 'symbol') {\n          return ReflectAdapter.get(target, prop, receiver)\n        }\n\n        const lowercased = prop.toLowerCase()\n\n        // Let's find the original casing of the key. This assumes that there is\n        // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n        // headers object.\n        const original = Object.keys(headers).find(\n          (o) => o.toLowerCase() === lowercased\n        )\n\n        // If the original casing doesn't exist, return undefined.\n        if (typeof original === 'undefined') return\n\n        // If the original casing exists, return the value.\n        return ReflectAdapter.get(target, original, receiver)\n      },\n      set(target, prop, value, receiver) {\n        if (typeof prop === 'symbol') {\n          return ReflectAdapter.set(target, prop, value, receiver)\n        }\n\n        const lowercased = prop.toLowerCase()\n\n        // Let's find the original casing of the key. This assumes that there is\n        // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n        // headers object.\n        const original = Object.keys(headers).find(\n          (o) => o.toLowerCase() === lowercased\n        )\n\n        // If the original casing doesn't exist, use the prop as the key.\n        return ReflectAdapter.set(target, original ?? prop, value, receiver)\n      },\n      has(target, prop) {\n        if (typeof prop === 'symbol') return ReflectAdapter.has(target, prop)\n\n        const lowercased = prop.toLowerCase()\n\n        // Let's find the original casing of the key. This assumes that there is\n        // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n        // headers object.\n        const original = Object.keys(headers).find(\n          (o) => o.toLowerCase() === lowercased\n        )\n\n        // If the original casing doesn't exist, return false.\n        if (typeof original === 'undefined') return false\n\n        // If the original casing exists, return true.\n        return ReflectAdapter.has(target, original)\n      },\n      deleteProperty(target, prop) {\n        if (typeof prop === 'symbol')\n          return ReflectAdapter.deleteProperty(target, prop)\n\n        const lowercased = prop.toLowerCase()\n\n        // Let's find the original casing of the key. This assumes that there is\n        // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n        // headers object.\n        const original = Object.keys(headers).find(\n          (o) => o.toLowerCase() === lowercased\n        )\n\n        // If the original casing doesn't exist, return true.\n        if (typeof original === 'undefined') return true\n\n        // If the original casing exists, delete the property.\n        return ReflectAdapter.deleteProperty(target, original)\n      },\n    })\n  }\n\n  /**\n   * Seals a Headers instance to prevent modification by throwing an error when\n   * any mutating method is called.\n   */\n  public static seal(headers: Headers): ReadonlyHeaders {\n    return new Proxy<ReadonlyHeaders>(headers, {\n      get(target, prop, receiver) {\n        switch (prop) {\n          case 'append':\n          case 'delete':\n          case 'set':\n            return ReadonlyHeadersError.callable\n          default:\n            return ReflectAdapter.get(target, prop, receiver)\n        }\n      },\n    })\n  }\n\n  /**\n   * Merges a header value into a string. This stores multiple values as an\n   * array, so we need to merge them into a string.\n   *\n   * @param value a header value\n   * @returns a merged header value (a string)\n   */\n  private merge(value: string | string[]): string {\n    if (Array.isArray(value)) return value.join(', ')\n\n    return value\n  }\n\n  /**\n   * Creates a Headers instance from a plain object or a Headers instance.\n   *\n   * @param headers a plain object or a Headers instance\n   * @returns a headers instance\n   */\n  public static from(headers: IncomingHttpHeaders | Headers): Headers {\n    if (headers instanceof Headers) return headers\n\n    return new HeadersAdapter(headers)\n  }\n\n  public append(name: string, value: string): void {\n    const existing = this.headers[name]\n    if (typeof existing === 'string') {\n      this.headers[name] = [existing, value]\n    } else if (Array.isArray(existing)) {\n      existing.push(value)\n    } else {\n      this.headers[name] = value\n    }\n  }\n\n  public delete(name: string): void {\n    delete this.headers[name]\n  }\n\n  public get(name: string): string | null {\n    const value = this.headers[name]\n    if (typeof value !== 'undefined') return this.merge(value)\n\n    return null\n  }\n\n  public has(name: string): boolean {\n    return typeof this.headers[name] !== 'undefined'\n  }\n\n  public set(name: string, value: string): void {\n    this.headers[name] = value\n  }\n\n  public forEach(\n    callbackfn: (value: string, name: string, parent: Headers) => void,\n    thisArg?: any\n  ): void {\n    for (const [name, value] of this.entries()) {\n      callbackfn.call(thisArg, value, name, this)\n    }\n  }\n\n  public *entries(): HeadersIterator<[string, string]> {\n    for (const key of Object.keys(this.headers)) {\n      const name = key.toLowerCase()\n      // We assert here that this is a string because we got it from the\n      // Object.keys() call above.\n      const value = this.get(name) as string\n\n      yield [name, value] as [string, string]\n    }\n  }\n\n  public *keys(): HeadersIterator<string> {\n    for (const key of Object.keys(this.headers)) {\n      const name = key.toLowerCase()\n      yield name\n    }\n  }\n\n  public *values(): HeadersIterator<string> {\n    for (const key of Object.keys(this.headers)) {\n      // We assert here that this is a string because we got it from the\n      // Object.keys() call above.\n      const value = this.get(key) as string\n\n      yield value\n    }\n  }\n\n  public [Symbol.iterator](): HeadersIterator<[string, string]> {\n    return this.entries()\n  }\n}\n"],"names":["ReflectAdapter","ReadonlyHeadersError","Error","constructor","callable","HeadersAdapter","Headers","headers","Proxy","get","target","prop","receiver","lowercased","toLowerCase","original","Object","keys","find","o","set","value","has","deleteProperty","seal","merge","Array","isArray","join","from","append","name","existing","push","delete","forEach","callbackfn","thisArg","entries","call","key","values","Symbol","iterator"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11220, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/compiled/cookie/index.js"],"sourcesContent":["(()=>{\"use strict\";if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var e={};(()=>{var r=e;\n/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */r.parse=parse;r.serialize=serialize;var i=decodeURIComponent;var t=encodeURIComponent;var a=/; */;var n=/^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;function parse(e,r){if(typeof e!==\"string\"){throw new TypeError(\"argument str must be a string\")}var t={};var n=r||{};var o=e.split(a);var s=n.decode||i;for(var p=0;p<o.length;p++){var f=o[p];var u=f.indexOf(\"=\");if(u<0){continue}var v=f.substr(0,u).trim();var c=f.substr(++u,f.length).trim();if('\"'==c[0]){c=c.slice(1,-1)}if(undefined==t[v]){t[v]=tryDecode(c,s)}}return t}function serialize(e,r,i){var a=i||{};var o=a.encode||t;if(typeof o!==\"function\"){throw new TypeError(\"option encode is invalid\")}if(!n.test(e)){throw new TypeError(\"argument name is invalid\")}var s=o(r);if(s&&!n.test(s)){throw new TypeError(\"argument val is invalid\")}var p=e+\"=\"+s;if(null!=a.maxAge){var f=a.maxAge-0;if(isNaN(f)||!isFinite(f)){throw new TypeError(\"option maxAge is invalid\")}p+=\"; Max-Age=\"+Math.floor(f)}if(a.domain){if(!n.test(a.domain)){throw new TypeError(\"option domain is invalid\")}p+=\"; Domain=\"+a.domain}if(a.path){if(!n.test(a.path)){throw new TypeError(\"option path is invalid\")}p+=\"; Path=\"+a.path}if(a.expires){if(typeof a.expires.toUTCString!==\"function\"){throw new TypeError(\"option expires is invalid\")}p+=\"; Expires=\"+a.expires.toUTCString()}if(a.httpOnly){p+=\"; HttpOnly\"}if(a.secure){p+=\"; Secure\"}if(a.sameSite){var u=typeof a.sameSite===\"string\"?a.sameSite.toLowerCase():a.sameSite;switch(u){case true:p+=\"; SameSite=Strict\";break;case\"lax\":p+=\"; SameSite=Lax\";break;case\"strict\":p+=\"; SameSite=Strict\";break;case\"none\":p+=\"; SameSite=None\";break;default:throw new TypeError(\"option sameSite is invalid\")}}return p}function tryDecode(e,r){try{return r(e)}catch(r){return e}}})();module.exports=e})();"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11342, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/server/api-utils/index.ts"],"sourcesContent":["import type { IncomingMessage } from 'http'\nimport type { BaseNextRequest } from '../base-http'\nimport type { CookieSerializeOptions } from 'next/dist/compiled/cookie'\nimport type { NextApiResponse } from '../../shared/lib/utils'\n\nimport { HeadersAdapter } from '../web/spec-extension/adapters/headers'\nimport {\n  PRERENDER_REVALIDATE_HEADER,\n  PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER,\n} from '../../lib/constants'\nimport { getTracer } from '../lib/trace/tracer'\nimport { NodeSpan } from '../lib/trace/constants'\n\nexport type NextApiRequestCookies = Partial<{ [key: string]: string }>\nexport type NextApiRequestQuery = Partial<{ [key: string]: string | string[] }>\n\nexport type __ApiPreviewProps = {\n  previewModeId: string\n  previewModeEncryptionKey: string\n  previewModeSigningKey: string\n}\n\nexport function wrapApiHandler<T extends (...args: any[]) => any>(\n  page: string,\n  handler: T\n): T {\n  return ((...args) => {\n    getTracer().setRootSpanAttribute('next.route', page)\n    // Call API route method\n    return getTracer().trace(\n      NodeSpan.runHandler,\n      {\n        spanName: `executing api route (pages) ${page}`,\n      },\n      () => handler(...args)\n    )\n  }) as T\n}\n\n/**\n *\n * @param res response object\n * @param statusCode `HTTP` status code of response\n */\nexport function sendStatusCode(\n  res: NextApiResponse,\n  statusCode: number\n): NextApiResponse<any> {\n  res.statusCode = statusCode\n  return res\n}\n\n/**\n *\n * @param res response object\n * @param [statusOrUrl] `HTTP` status code of redirect\n * @param url URL of redirect\n */\nexport function redirect(\n  res: NextApiResponse,\n  statusOrUrl: string | number,\n  url?: string\n): NextApiResponse<any> {\n  if (typeof statusOrUrl === 'string') {\n    url = statusOrUrl\n    statusOrUrl = 307\n  }\n  if (typeof statusOrUrl !== 'number' || typeof url !== 'string') {\n    throw new Error(\n      `Invalid redirect arguments. Please use a single argument URL, e.g. res.redirect('/destination') or use a status code and URL, e.g. res.redirect(307, '/destination').`\n    )\n  }\n  res.writeHead(statusOrUrl, { Location: url })\n  res.write(url)\n  res.end()\n  return res\n}\n\nexport function checkIsOnDemandRevalidate(\n  req: Request | IncomingMessage | BaseNextRequest,\n  previewProps: __ApiPreviewProps\n): {\n  isOnDemandRevalidate: boolean\n  revalidateOnlyGenerated: boolean\n} {\n  const headers = HeadersAdapter.from(req.headers)\n\n  const previewModeId = headers.get(PRERENDER_REVALIDATE_HEADER)\n  const isOnDemandRevalidate = previewModeId === previewProps.previewModeId\n\n  const revalidateOnlyGenerated = headers.has(\n    PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER\n  )\n\n  return { isOnDemandRevalidate, revalidateOnlyGenerated }\n}\n\nexport const COOKIE_NAME_PRERENDER_BYPASS = `__prerender_bypass`\nexport const COOKIE_NAME_PRERENDER_DATA = `__next_preview_data`\n\nexport const RESPONSE_LIMIT_DEFAULT = 4 * 1024 * 1024\n\nexport const SYMBOL_PREVIEW_DATA = Symbol(COOKIE_NAME_PRERENDER_DATA)\nexport const SYMBOL_CLEARED_COOKIES = Symbol(COOKIE_NAME_PRERENDER_BYPASS)\n\nexport function clearPreviewData<T>(\n  res: NextApiResponse<T>,\n  options: {\n    path?: string\n  } = {}\n): NextApiResponse<T> {\n  if (SYMBOL_CLEARED_COOKIES in res) {\n    return res\n  }\n\n  const { serialize } =\n    require('next/dist/compiled/cookie') as typeof import('next/dist/compiled/cookie')\n  const previous = res.getHeader('Set-Cookie')\n  res.setHeader(`Set-Cookie`, [\n    ...(typeof previous === 'string'\n      ? [previous]\n      : Array.isArray(previous)\n        ? previous\n        : []),\n    serialize(COOKIE_NAME_PRERENDER_BYPASS, '', {\n      // To delete a cookie, set `expires` to a date in the past:\n      // https://tools.ietf.org/html/rfc6265#section-4.1.1\n      // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n      expires: new Date(0),\n      httpOnly: true,\n      sameSite: process.env.NODE_ENV !== 'development' ? 'none' : 'lax',\n      secure: process.env.NODE_ENV !== 'development',\n      path: '/',\n      ...(options.path !== undefined\n        ? ({ path: options.path } as CookieSerializeOptions)\n        : undefined),\n    }),\n    serialize(COOKIE_NAME_PRERENDER_DATA, '', {\n      // To delete a cookie, set `expires` to a date in the past:\n      // https://tools.ietf.org/html/rfc6265#section-4.1.1\n      // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n      expires: new Date(0),\n      httpOnly: true,\n      sameSite: process.env.NODE_ENV !== 'development' ? 'none' : 'lax',\n      secure: process.env.NODE_ENV !== 'development',\n      path: '/',\n      ...(options.path !== undefined\n        ? ({ path: options.path } as CookieSerializeOptions)\n        : undefined),\n    }),\n  ])\n\n  Object.defineProperty(res, SYMBOL_CLEARED_COOKIES, {\n    value: true,\n    enumerable: false,\n  })\n  return res\n}\n\n/**\n * Custom error class\n */\nexport class ApiError extends Error {\n  readonly statusCode: number\n\n  constructor(statusCode: number, message: string) {\n    super(message)\n    this.statusCode = statusCode\n  }\n}\n\n/**\n * Sends error in `response`\n * @param res response object\n * @param statusCode of response\n * @param message of response\n */\nexport function sendError(\n  res: NextApiResponse,\n  statusCode: number,\n  message: string\n): void {\n  res.statusCode = statusCode\n  res.statusMessage = message\n  res.end(message)\n}\n\ninterface LazyProps {\n  req: IncomingMessage\n}\n\n/**\n * Execute getter function only if its needed\n * @param LazyProps `req` and `params` for lazyProp\n * @param prop name of property\n * @param getter function to get data\n */\nexport function setLazyProp<T>(\n  { req }: LazyProps,\n  prop: string,\n  getter: () => T\n): void {\n  const opts = { configurable: true, enumerable: true }\n  const optsReset = { ...opts, writable: true }\n\n  Object.defineProperty(req, prop, {\n    ...opts,\n    get: () => {\n      const value = getter()\n      // we set the property on the object to avoid recalculating it\n      Object.defineProperty(req, prop, { ...optsReset, value })\n      return value\n    },\n    set: (value) => {\n      Object.defineProperty(req, prop, { ...optsReset, value })\n    },\n  })\n}\n"],"names":["HeadersAdapter","PRERENDER_REVALIDATE_HEADER","PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER","getTracer","NodeSpan","wrapApiHandler","page","handler","args","setRootSpanAttribute","trace","runHandler","spanName","sendStatusCode","res","statusCode","redirect","statusOrUrl","url","Error","writeHead","Location","write","end","checkIsOnDemandRevalidate","req","previewProps","headers","from","previewModeId","get","isOnDemandRevalidate","revalidateOnlyGenerated","has","COOKIE_NAME_PRERENDER_BYPASS","COOKIE_NAME_PRERENDER_DATA","RESPONSE_LIMIT_DEFAULT","SYMBOL_PREVIEW_DATA","Symbol","SYMBOL_CLEARED_COOKIES","clearPreviewData","options","serialize","require","previous","getHeader","setHeader","Array","isArray","expires","Date","httpOnly","sameSite","process","env","NODE_ENV","secure","path","undefined","Object","defineProperty","value","enumerable","ApiError","constructor","message","sendError","statusMessage","setLazyProp","prop","getter","opts","configurable","optsReset","writable","set"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11498, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/server/api-utils/get-cookie-parser.ts"],"sourcesContent":["import type { NextApiRequestCookies } from '.'\n\n/**\n * Parse cookies from the `headers` of request\n * @param req request object\n */\n\nexport function getCookieParser(headers: {\n  [key: string]: string | string[] | null | undefined\n}): () => NextApiRequestCookies {\n  return function parseCookie(): NextApiRequestCookies {\n    const { cookie } = headers\n\n    if (!cookie) {\n      return {}\n    }\n\n    const { parse: parseCookieFn } =\n      require('next/dist/compiled/cookie') as typeof import('next/dist/compiled/cookie')\n    return parseCookieFn(Array.isArray(cookie) ? cookie.join('; ') : cookie)\n  }\n}\n"],"names":["getCookieParser","headers","parseCookie","cookie","parse","parseCookieFn","require","Array","isArray","join"],"mappings":"AAEA;;;CAGC,GAED;;;AAAO,SAASA,gBAAgBC,OAE/B;IACC,OAAO,SAASC;QACd,MAAM,EAAEC,MAAM,EAAE,GAAGF;QAEnB,IAAI,CAACE,QAAQ;YACX,OAAO,CAAC;QACV;QAEA,MAAM,EAAEC,OAAOC,aAAa,EAAE,GAC5BC,QAAQ;QACV,OAAOD,cAAcE,MAAMC,OAAO,CAACL,UAAUA,OAAOM,IAAI,CAAC,QAAQN;IACnE;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11518, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/server/base-http/index.ts"],"sourcesContent":["import type { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http'\nimport type { I18NConfig } from '../config-shared'\n\nimport { RedirectStatusCode } from '../../client/components/redirect-status-code'\nimport type { NextApiRequestCookies } from '../api-utils'\nimport { getCookieParser } from '../api-utils/get-cookie-parser'\n\nexport interface BaseNextRequestConfig {\n  basePath: string | undefined\n  i18n?: I18NConfig\n  trailingSlash?: boolean | undefined\n}\n\nexport type FetchMetric = {\n  url: string\n  idx: number\n  end: number\n  start: number\n  method: string\n  status: number\n  cacheReason: string\n  cacheStatus: 'hit' | 'miss' | 'skip' | 'hmr'\n  cacheWarning?: string\n}\n\nexport type FetchMetrics = Array<FetchMetric>\n\nexport abstract class BaseNextRequest<Body = any> {\n  protected _cookies: NextApiRequestCookies | undefined\n  public abstract headers: IncomingHttpHeaders\n  public abstract fetchMetrics: FetchMetric[] | undefined\n\n  constructor(\n    public method: string,\n    public url: string,\n    public body: Body\n  ) {}\n\n  // Utils implemented using the abstract methods above\n\n  public get cookies() {\n    if (this._cookies) return this._cookies\n    return (this._cookies = getCookieParser(this.headers)())\n  }\n}\n\nexport abstract class BaseNextResponse<Destination = any> {\n  abstract statusCode: number | undefined\n  abstract statusMessage: string | undefined\n  abstract get sent(): boolean\n\n  constructor(public destination: Destination) {}\n\n  /**\n   * Sets a value for the header overwriting existing values\n   */\n  abstract setHeader(name: string, value: string | string[]): this\n\n  /**\n   * Removes a header\n   */\n  abstract removeHeader(name: string): this\n\n  /**\n   * Appends value for the given header name\n   */\n  abstract appendHeader(name: string, value: string): this\n\n  /**\n   * Get all values for a header as an array or undefined if no value is present\n   */\n  abstract getHeaderValues(name: string): string[] | undefined\n\n  abstract hasHeader(name: string): boolean\n\n  /**\n   * Get values for a header concatenated using `,` or undefined if no value is present\n   */\n  abstract getHeader(name: string): string | undefined\n\n  abstract getHeaders(): OutgoingHttpHeaders\n\n  abstract body(value: string): this\n\n  abstract send(): void\n\n  abstract onClose(callback: () => void): void\n\n  // Utils implemented using the abstract methods above\n\n  public redirect(destination: string, statusCode: number) {\n    this.setHeader('Location', destination)\n    this.statusCode = statusCode\n\n    // Since IE11 doesn't support the 308 header add backwards\n    // compatibility using refresh header\n    if (statusCode === RedirectStatusCode.PermanentRedirect) {\n      this.setHeader('Refresh', `0;url=${destination}`)\n    }\n\n    return this\n  }\n}\n"],"names":["RedirectStatusCode","getCookieParser","BaseNextRequest","constructor","method","url","body","cookies","_cookies","headers","BaseNextResponse","destination","redirect","statusCode","setHeader","PermanentRedirect"],"mappings":";;;;AAGA,SAASA,kBAAkB,QAAQ,+CAA8C;AAEjF,SAASC,eAAe,QAAQ,iCAAgC;;;AAsBzD,MAAeC;IAKpBC,YACSC,MAAc,EACdC,GAAW,EACXC,IAAU,CACjB;aAHOF,MAAAA,GAAAA;aACAC,GAAAA,GAAAA;aACAC,IAAAA,GAAAA;IACN;IAEH,qDAAqD;IAErD,IAAWC,UAAU;QACnB,IAAI,IAAI,CAACC,QAAQ,EAAE,OAAO,IAAI,CAACA,QAAQ;QACvC,OAAQ,IAAI,CAACA,QAAQ,gMAAGP,kBAAAA,EAAgB,IAAI,CAACQ,OAAO;IACtD;AACF;AAEO,MAAeC;IAKpBP,YAAmBQ,WAAwB,CAAE;aAA1BA,WAAAA,GAAAA;IAA2B;IAqC9C,qDAAqD;IAE9CC,SAASD,WAAmB,EAAEE,UAAkB,EAAE;QACvD,IAAI,CAACC,SAAS,CAAC,YAAYH;QAC3B,IAAI,CAACE,UAAU,GAAGA;QAElB,0DAA0D;QAC1D,qCAAqC;QACrC,IAAIA,yMAAeb,qBAAAA,CAAmBe,iBAAiB,EAAE;YACvD,IAAI,CAACD,SAAS,CAAC,WAAW,CAAC,MAAM,EAAEH,aAAa;QAClD;QAEA,OAAO,IAAI;IACb;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11558, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/server/base-http/node.ts"],"sourcesContent":["import type { ServerResponse, IncomingMessage } from 'http'\nimport type { Writable, Readable } from 'stream'\n\nimport { SYMBOL_CLEARED_COOKIES } from '../api-utils'\nimport type { NextApiRequestCookies } from '../api-utils'\n\nimport { NEXT_REQUEST_META } from '../request-meta'\nimport type { RequestMeta } from '../request-meta'\n\nimport { BaseNextRequest, BaseNextResponse, type FetchMetric } from './index'\nimport type { OutgoingHttpHeaders } from 'node:http'\n\ntype Req = IncomingMessage & {\n  [NEXT_REQUEST_META]?: RequestMeta\n  cookies?: NextApiRequestCookies\n  fetchMetrics?: FetchMetric[]\n}\n\nexport class NodeNextRequest extends BaseNextRequest<Readable> {\n  public headers = this._req.headers\n  public fetchMetrics: FetchMetric[] | undefined = this._req?.fetchMetrics;\n\n  [NEXT_REQUEST_META]: RequestMeta = this._req[NEXT_REQUEST_META] || {}\n\n  constructor(private _req: Req) {\n    super(_req.method!.toUpperCase(), _req.url!, _req)\n  }\n\n  get originalRequest() {\n    // Need to mimic these changes to the original req object for places where we use it:\n    // render.tsx, api/ssg requests\n    this._req[NEXT_REQUEST_META] = this[NEXT_REQUEST_META]\n    this._req.url = this.url\n    this._req.cookies = this.cookies\n    return this._req\n  }\n\n  set originalRequest(value: Req) {\n    this._req = value\n  }\n\n  private streaming = false\n\n  /**\n   * Returns the request body as a Web Readable Stream. The body here can only\n   * be read once as the body will start flowing as soon as the data handler\n   * is attached.\n   *\n   * @internal\n   */\n  public stream() {\n    if (this.streaming) {\n      throw new Error(\n        'Invariant: NodeNextRequest.stream() can only be called once'\n      )\n    }\n    this.streaming = true\n\n    return new ReadableStream({\n      start: (controller) => {\n        this._req.on('data', (chunk) => {\n          controller.enqueue(new Uint8Array(chunk))\n        })\n        this._req.on('end', () => {\n          controller.close()\n        })\n        this._req.on('error', (err) => {\n          controller.error(err)\n        })\n      },\n    })\n  }\n}\n\nexport class NodeNextResponse extends BaseNextResponse<Writable> {\n  private textBody: string | undefined = undefined\n\n  public [SYMBOL_CLEARED_COOKIES]?: boolean\n\n  get originalResponse() {\n    if (SYMBOL_CLEARED_COOKIES in this) {\n      this._res[SYMBOL_CLEARED_COOKIES] = this[SYMBOL_CLEARED_COOKIES]\n    }\n\n    return this._res\n  }\n\n  constructor(\n    private _res: ServerResponse & { [SYMBOL_CLEARED_COOKIES]?: boolean }\n  ) {\n    super(_res)\n  }\n\n  get sent() {\n    return this._res.finished || this._res.headersSent\n  }\n\n  get statusCode() {\n    return this._res.statusCode\n  }\n\n  set statusCode(value: number) {\n    this._res.statusCode = value\n  }\n\n  get statusMessage() {\n    return this._res.statusMessage\n  }\n\n  set statusMessage(value: string) {\n    this._res.statusMessage = value\n  }\n\n  setHeader(name: string, value: string | string[]): this {\n    this._res.setHeader(name, value)\n    return this\n  }\n\n  removeHeader(name: string): this {\n    this._res.removeHeader(name)\n    return this\n  }\n\n  getHeaderValues(name: string): string[] | undefined {\n    const values = this._res.getHeader(name)\n\n    if (values === undefined) return undefined\n\n    return (Array.isArray(values) ? values : [values]).map((value) =>\n      value.toString()\n    )\n  }\n\n  hasHeader(name: string): boolean {\n    return this._res.hasHeader(name)\n  }\n\n  getHeader(name: string): string | undefined {\n    const values = this.getHeaderValues(name)\n    return Array.isArray(values) ? values.join(',') : undefined\n  }\n\n  getHeaders(): OutgoingHttpHeaders {\n    return this._res.getHeaders()\n  }\n\n  appendHeader(name: string, value: string): this {\n    const currentValues = this.getHeaderValues(name) ?? []\n\n    if (!currentValues.includes(value)) {\n      this._res.setHeader(name, [...currentValues, value])\n    }\n\n    return this\n  }\n\n  body(value: string) {\n    this.textBody = value\n    return this\n  }\n\n  send() {\n    this._res.end(this.textBody)\n  }\n\n  public onClose(callback: () => void) {\n    this.originalResponse.on('close', callback)\n  }\n}\n"],"names":["SYMBOL_CLEARED_COOKIES","NEXT_REQUEST_META","BaseNextRequest","BaseNextResponse","NodeNextRequest","constructor","_req","method","toUpperCase","url","headers","fetchMetrics","streaming","originalRequest","cookies","value","stream","Error","ReadableStream","start","controller","on","chunk","enqueue","Uint8Array","close","err","error","NodeNextResponse","originalResponse","_res","textBody","undefined","sent","finished","headersSent","statusCode","statusMessage","setHeader","name","removeHeader","getHeaderValues","values","getHeader","Array","isArray","map","toString","hasHeader","join","getHeaders","appendHeader","currentValues","includes","body","send","end","onClose","callback"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11692, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/server/lib/experimental/ppr.ts"],"sourcesContent":["/**\n * If set to `incremental`, only those leaf pages that export\n * `experimental_ppr = true` will have partial prerendering enabled. If any\n * page exports this value as `false` or does not export it at all will not\n * have partial prerendering enabled. If set to a boolean, the options for\n * `experimental_ppr` will be ignored.\n */\n\nexport type ExperimentalPPRConfig = boolean | 'incremental'\n\n/**\n * Returns true if partial prerendering is enabled for the application. It does\n * not tell you if a given route has PPR enabled, as that requires analysis of\n * the route's configuration.\n *\n * @see {@link checkIsRoutePPREnabled} - for checking if a specific route has PPR enabled.\n */\nexport function checkIsAppPPREnabled(\n  config: ExperimentalPPRConfig | undefined\n): boolean {\n  // If the config is undefined, partial prerendering is disabled.\n  if (typeof config === 'undefined') return false\n\n  // If the config is a boolean, use it directly.\n  if (typeof config === 'boolean') return config\n\n  // If the config is a string, it must be 'incremental' to enable partial\n  // prerendering.\n  if (config === 'incremental') return true\n\n  return false\n}\n\n/**\n * Returns true if partial prerendering is supported for the current page with\n * the provided app configuration. If the application doesn't have partial\n * prerendering enabled, this function will always return false. If you want to\n * check if the application has partial prerendering enabled\n *\n * @see {@link checkIsAppPPREnabled} for checking if the application has PPR enabled.\n */\nexport function checkIsRoutePPREnabled(\n  config: ExperimentalPPRConfig | undefined,\n  appConfig: {\n    experimental_ppr?: boolean\n  }\n): boolean {\n  // If the config is undefined, partial prerendering is disabled.\n  if (typeof config === 'undefined') return false\n\n  // If the config is a boolean, use it directly.\n  if (typeof config === 'boolean') return config\n\n  // If the config is a string, it must be 'incremental' to enable partial\n  // prerendering.\n  if (config === 'incremental' && appConfig.experimental_ppr === true) {\n    return true\n  }\n\n  return false\n}\n"],"names":["checkIsAppPPREnabled","config","checkIsRoutePPREnabled","appConfig","experimental_ppr"],"mappings":"AAAA;;;;;;CAMC,GAID;;;;;;CAMC,GACD;;;;AAAO,SAASA,qBACdC,MAAyC;IAEzC,gEAAgE;IAChE,IAAI,OAAOA,WAAW,aAAa,OAAO;IAE1C,+CAA+C;IAC/C,IAAI,OAAOA,WAAW,WAAW,OAAOA;IAExC,wEAAwE;IACxE,gBAAgB;IAChB,IAAIA,WAAW,eAAe,OAAO;IAErC,OAAO;AACT;AAUO,SAASC,uBACdD,MAAyC,EACzCE,SAEC;IAED,gEAAgE;IAChE,IAAI,OAAOF,WAAW,aAAa,OAAO;IAE1C,+CAA+C;IAC/C,IAAI,OAAOA,WAAW,WAAW,OAAOA;IAExC,wEAAwE;IACxE,gBAAgB;IAChB,IAAIA,WAAW,iBAAiBE,UAAUC,gBAAgB,KAAK,MAAM;QACnE,OAAO;IACT;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11734, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/shared/lib/utils.ts"],"sourcesContent":["import type { HtmlProps } from './html-context.shared-runtime'\nimport type { ComponentType, JSX } from 'react'\nimport type { DomainLocale } from '../../server/config'\nimport type { Env } from '@next/env'\nimport type { IncomingMessage, ServerResponse } from 'http'\nimport type { NextRouter } from './router/router'\nimport type { ParsedUrlQuery } from 'querystring'\nimport type { PreviewData } from '../../types'\nimport type { COMPILER_NAMES } from './constants'\nimport type fs from 'fs'\n\nexport type NextComponentType<\n  Context extends BaseContext = NextPageContext,\n  InitialProps = {},\n  Props = {},\n> = ComponentType<Props> & {\n  /**\n   * Used for initial page load data population. Data returned from `getInitialProps` is serialized when server rendered.\n   * Make sure to return plain `Object` without using `Date`, `Map`, `Set`.\n   * @param context Context of `page`\n   */\n  getInitialProps?(context: Context): InitialProps | Promise<InitialProps>\n}\n\nexport type DocumentType = NextComponentType<\n  DocumentContext,\n  DocumentInitialProps,\n  DocumentProps\n>\n\nexport type AppType<P = {}> = NextComponentType<\n  AppContextType,\n  P,\n  AppPropsType<any, P>\n>\n\nexport type AppTreeType = ComponentType<\n  AppInitialProps & { [name: string]: any }\n>\n\n/**\n * Web vitals provided to _app.reportWebVitals by Core Web Vitals plugin developed by Google Chrome team.\n * https://nextjs.org/blog/next-9-4#integrated-web-vitals-reporting\n */\nexport const WEB_VITALS = ['CLS', 'FCP', 'FID', 'INP', 'LCP', 'TTFB'] as const\nexport type NextWebVitalsMetric = {\n  id: string\n  startTime: number\n  value: number\n  attribution?: { [key: string]: unknown }\n} & (\n  | {\n      label: 'web-vital'\n      name: (typeof WEB_VITALS)[number]\n    }\n  | {\n      label: 'custom'\n      name:\n        | 'Next.js-hydration'\n        | 'Next.js-route-change-to-render'\n        | 'Next.js-render'\n    }\n)\n\nexport type Enhancer<C> = (Component: C) => C\n\nexport type ComponentsEnhancer =\n  | {\n      enhanceApp?: Enhancer<AppType>\n      enhanceComponent?: Enhancer<NextComponentType>\n    }\n  | Enhancer<NextComponentType>\n\nexport type RenderPageResult = {\n  html: string\n  head?: Array<JSX.Element | null>\n}\n\nexport type RenderPage = (\n  options?: ComponentsEnhancer\n) => DocumentInitialProps | Promise<DocumentInitialProps>\n\nexport type BaseContext = {\n  res?: ServerResponse\n  [k: string]: any\n}\n\nexport type NEXT_DATA = {\n  props: Record<string, any>\n  page: string\n  query: ParsedUrlQuery\n  buildId: string\n  assetPrefix?: string\n  runtimeConfig?: { [key: string]: any }\n  nextExport?: boolean\n  autoExport?: boolean\n  isFallback?: boolean\n  isExperimentalCompile?: boolean\n  dynamicIds?: (string | number)[]\n  err?: Error & {\n    statusCode?: number\n    source?: typeof COMPILER_NAMES.server | typeof COMPILER_NAMES.edgeServer\n  }\n  gsp?: boolean\n  gssp?: boolean\n  customServer?: boolean\n  gip?: boolean\n  appGip?: boolean\n  locale?: string\n  locales?: readonly string[]\n  defaultLocale?: string\n  domainLocales?: readonly DomainLocale[]\n  scriptLoader?: any[]\n  isPreview?: boolean\n  notFoundSrcPage?: string\n}\n\n/**\n * `Next` context\n */\nexport interface NextPageContext {\n  /**\n   * Error object if encountered during rendering\n   */\n  err?: (Error & { statusCode?: number }) | null\n  /**\n   * `HTTP` request object.\n   */\n  req?: IncomingMessage\n  /**\n   * `HTTP` response object.\n   */\n  res?: ServerResponse\n  /**\n   * Path section of `URL`.\n   */\n  pathname: string\n  /**\n   * Query string section of `URL` parsed as an object.\n   */\n  query: ParsedUrlQuery\n  /**\n   * `String` of the actual path including query.\n   */\n  asPath?: string\n  /**\n   * The currently active locale\n   */\n  locale?: string\n  /**\n   * All configured locales\n   */\n  locales?: readonly string[]\n  /**\n   * The configured default locale\n   */\n  defaultLocale?: string\n  /**\n   * `Component` the tree of the App to use if needing to render separately\n   */\n  AppTree: AppTreeType\n}\n\nexport type AppContextType<Router extends NextRouter = NextRouter> = {\n  Component: NextComponentType<NextPageContext>\n  AppTree: AppTreeType\n  ctx: NextPageContext\n  router: Router\n}\n\nexport type AppInitialProps<PageProps = any> = {\n  pageProps: PageProps\n}\n\nexport type AppPropsType<\n  Router extends NextRouter = NextRouter,\n  PageProps = {},\n> = AppInitialProps<PageProps> & {\n  Component: NextComponentType<NextPageContext, any, any>\n  router: Router\n  __N_SSG?: boolean\n  __N_SSP?: boolean\n}\n\nexport type DocumentContext = NextPageContext & {\n  renderPage: RenderPage\n  defaultGetInitialProps(\n    ctx: DocumentContext,\n    options?: { nonce?: string }\n  ): Promise<DocumentInitialProps>\n}\n\nexport type DocumentInitialProps = RenderPageResult & {\n  styles?: React.ReactElement[] | Iterable<React.ReactNode> | JSX.Element\n}\n\nexport type DocumentProps = DocumentInitialProps & HtmlProps\n\n/**\n * Next `API` route request\n */\nexport interface NextApiRequest extends IncomingMessage {\n  /**\n   * Object of `query` values from url\n   */\n  query: Partial<{\n    [key: string]: string | string[]\n  }>\n  /**\n   * Object of `cookies` from header\n   */\n  cookies: Partial<{\n    [key: string]: string\n  }>\n\n  body: any\n\n  env: Env\n\n  draftMode?: boolean\n\n  preview?: boolean\n  /**\n   * Preview data set on the request, if any\n   * */\n  previewData?: PreviewData\n}\n\n/**\n * Send body of response\n */\ntype Send<T> = (body: T) => void\n\n/**\n * Next `API` route response\n */\nexport type NextApiResponse<Data = any> = ServerResponse & {\n  /**\n   * Send data `any` data in response\n   */\n  send: Send<Data>\n  /**\n   * Send data `json` data in response\n   */\n  json: Send<Data>\n  status: (statusCode: number) => NextApiResponse<Data>\n  redirect(url: string): NextApiResponse<Data>\n  redirect(status: number, url: string): NextApiResponse<Data>\n\n  /**\n   * Set draft mode\n   */\n  setDraftMode: (options: { enable: boolean }) => NextApiResponse<Data>\n\n  /**\n   * Set preview data for Next.js' prerender mode\n   */\n  setPreviewData: (\n    data: object | string,\n    options?: {\n      /**\n       * Specifies the number (in seconds) for the preview session to last for.\n       * The given number will be converted to an integer by rounding down.\n       * By default, no maximum age is set and the preview session finishes\n       * when the client shuts down (browser is closed).\n       */\n      maxAge?: number\n      /**\n       * Specifies the path for the preview session to work under. By default,\n       * the path is considered the \"default path\", i.e., any pages under \"/\".\n       */\n      path?: string\n    }\n  ) => NextApiResponse<Data>\n\n  /**\n   * Clear preview data for Next.js' prerender mode\n   */\n  clearPreviewData: (options?: { path?: string }) => NextApiResponse<Data>\n\n  /**\n   * Revalidate a specific page and regenerate it using On-Demand Incremental\n   * Static Regeneration.\n   * The path should be an actual path, not a rewritten path. E.g. for\n   * \"/blog/[slug]\" this should be \"/blog/post-1\".\n   * @link https://nextjs.org/docs/app/building-your-application/data-fetching/incremental-static-regeneration#on-demand-revalidation-with-revalidatepath\n   */\n  revalidate: (\n    urlPath: string,\n    opts?: {\n      unstable_onlyGenerated?: boolean\n    }\n  ) => Promise<void>\n}\n\n/**\n * Next `API` route handler\n */\nexport type NextApiHandler<T = any> = (\n  req: NextApiRequest,\n  res: NextApiResponse<T>\n) => unknown | Promise<unknown>\n\n/**\n * Utils\n */\nexport function execOnce<T extends (...args: any[]) => ReturnType<T>>(\n  fn: T\n): T {\n  let used = false\n  let result: ReturnType<T>\n\n  return ((...args: any[]) => {\n    if (!used) {\n      used = true\n      result = fn(...args)\n    }\n    return result\n  }) as T\n}\n\n// Scheme: https://tools.ietf.org/html/rfc3986#section-3.1\n// Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\nconst ABSOLUTE_URL_REGEX = /^[a-zA-Z][a-zA-Z\\d+\\-.]*?:/\nexport const isAbsoluteUrl = (url: string) => ABSOLUTE_URL_REGEX.test(url)\n\nexport function getLocationOrigin() {\n  const { protocol, hostname, port } = window.location\n  return `${protocol}//${hostname}${port ? ':' + port : ''}`\n}\n\nexport function getURL() {\n  const { href } = window.location\n  const origin = getLocationOrigin()\n  return href.substring(origin.length)\n}\n\nexport function getDisplayName<P>(Component: ComponentType<P>) {\n  return typeof Component === 'string'\n    ? Component\n    : Component.displayName || Component.name || 'Unknown'\n}\n\nexport function isResSent(res: ServerResponse) {\n  return res.finished || res.headersSent\n}\n\nexport function normalizeRepeatedSlashes(url: string) {\n  const urlParts = url.split('?')\n  const urlNoQuery = urlParts[0]\n\n  return (\n    urlNoQuery\n      // first we replace any non-encoded backslashes with forward\n      // then normalize repeated forward slashes\n      .replace(/\\\\/g, '/')\n      .replace(/\\/\\/+/g, '/') +\n    (urlParts[1] ? `?${urlParts.slice(1).join('?')}` : '')\n  )\n}\n\nexport async function loadGetInitialProps<\n  C extends BaseContext,\n  IP = {},\n  P = {},\n>(App: NextComponentType<C, IP, P>, ctx: C): Promise<IP> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (App.prototype?.getInitialProps) {\n      const message = `\"${getDisplayName(\n        App\n      )}.getInitialProps()\" is defined as an instance method - visit https://nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.`\n      throw new Error(message)\n    }\n  }\n  // when called from _app `ctx` is nested in `ctx`\n  const res = ctx.res || (ctx.ctx && ctx.ctx.res)\n\n  if (!App.getInitialProps) {\n    if (ctx.ctx && ctx.Component) {\n      // @ts-ignore pageProps default\n      return {\n        pageProps: await loadGetInitialProps(ctx.Component, ctx.ctx),\n      }\n    }\n    return {} as IP\n  }\n\n  const props = await App.getInitialProps(ctx)\n\n  if (res && isResSent(res)) {\n    return props\n  }\n\n  if (!props) {\n    const message = `\"${getDisplayName(\n      App\n    )}.getInitialProps()\" should resolve to an object. But found \"${props}\" instead.`\n    throw new Error(message)\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (Object.keys(props).length === 0 && !ctx.ctx) {\n      console.warn(\n        `${getDisplayName(\n          App\n        )} returned an empty object from \\`getInitialProps\\`. This de-optimizes and prevents automatic static optimization. https://nextjs.org/docs/messages/empty-object-getInitialProps`\n      )\n    }\n  }\n\n  return props\n}\n\nexport const SP = typeof performance !== 'undefined'\nexport const ST =\n  SP &&\n  (['mark', 'measure', 'getEntriesByName'] as const).every(\n    (method) => typeof performance[method] === 'function'\n  )\n\nexport class DecodeError extends Error {}\nexport class NormalizeError extends Error {}\nexport class PageNotFoundError extends Error {\n  code: string\n\n  constructor(page: string) {\n    super()\n    this.code = 'ENOENT'\n    this.name = 'PageNotFoundError'\n    this.message = `Cannot find module for page: ${page}`\n  }\n}\n\nexport class MissingStaticPage extends Error {\n  constructor(page: string, message: string) {\n    super()\n    this.message = `Failed to load static file for page: ${page} ${message}`\n  }\n}\n\nexport class MiddlewareNotFoundError extends Error {\n  code: string\n  constructor() {\n    super()\n    this.code = 'ENOENT'\n    this.message = `Cannot find the middleware module`\n  }\n}\n\nexport interface CacheFs {\n  existsSync: typeof fs.existsSync\n  readFile: typeof fs.promises.readFile\n  readFileSync: typeof fs.readFileSync\n  writeFile(f: string, d: any): Promise<void>\n  mkdir(dir: string): Promise<void | string>\n  stat(f: string): Promise<{ mtime: Date }>\n}\n\nexport function stringifyError(error: Error) {\n  return JSON.stringify({ message: error.message, stack: error.stack })\n}\n"],"names":["WEB_VITALS","execOnce","fn","used","result","args","ABSOLUTE_URL_REGEX","isAbsoluteUrl","url","test","getLocationOrigin","protocol","hostname","port","window","location","getURL","href","origin","substring","length","getDisplayName","Component","displayName","name","isResSent","res","finished","headersSent","normalizeRepeatedSlashes","urlParts","split","urlNoQuery","replace","slice","join","loadGetInitialProps","App","ctx","process","env","NODE_ENV","prototype","getInitialProps","message","Error","pageProps","props","Object","keys","console","warn","SP","performance","ST","every","method","DecodeError","NormalizeError","PageNotFoundError","constructor","page","code","MissingStaticPage","MiddlewareNotFoundError","stringifyError","error","JSON","stringify","stack"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11887, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/shared/lib/router/utils/route-matcher.ts"],"sourcesContent":["import type { Group } from './route-regex'\nimport { DecodeError } from '../../utils'\nimport type { Params } from '../../../../server/request/params'\n\nexport interface RouteMatchFn {\n  (pathname: string): false | Params\n}\n\ntype RouteMatcherOptions = {\n  // We only use the exec method of the RegExp object. This helps us avoid using\n  // type assertions that the passed in properties are of the correct type.\n  re: Pick<RegExp, 'exec'>\n  groups: Record<string, Group>\n}\n\nexport function getRouteMatcher({\n  re,\n  groups,\n}: RouteMatcherOptions): RouteMatchFn {\n  return (pathname: string) => {\n    const routeMatch = re.exec(pathname)\n    if (!routeMatch) return false\n\n    const decode = (param: string) => {\n      try {\n        return decodeURIComponent(param)\n      } catch {\n        throw new DecodeError('failed to decode param')\n      }\n    }\n\n    const params: Params = {}\n    for (const [key, group] of Object.entries(groups)) {\n      const match = routeMatch[group.pos]\n      if (match !== undefined) {\n        if (group.repeat) {\n          params[key] = match.split('/').map((entry) => decode(entry))\n        } else {\n          params[key] = decode(match)\n        }\n      }\n    }\n\n    return params\n  }\n}\n"],"names":["DecodeError","getRouteMatcher","re","groups","pathname","routeMatch","exec","decode","param","decodeURIComponent","params","key","group","Object","entries","match","pos","undefined","repeat","split","map","entry"],"mappings":";;;AACA,SAASA,WAAW,QAAQ,cAAa;;AAclC,SAASC,gBAAgB,KAGV;IAHU,IAAA,EAC9BC,EAAE,EACFC,MAAM,EACc,GAHU;IAI9B,OAAO,CAACC;QACN,MAAMC,aAAaH,GAAGI,IAAI,CAACF;QAC3B,IAAI,CAACC,YAAY,OAAO;QAExB,MAAME,SAAS,CAACC;YACd,IAAI;gBACF,OAAOC,mBAAmBD;YAC5B,EAAE,OAAA,GAAM;gBACN,MAAM,OAAA,cAAyC,CAAzC,kKAAIR,cAAAA,CAAY,2BAAhB,qBAAA;2BAAA;gCAAA;kCAAA;gBAAwC;YAChD;QACF;QAEA,MAAMU,SAAiB,CAAC;QACxB,KAAK,MAAM,CAACC,KAAKC,MAAM,IAAIC,OAAOC,OAAO,CAACX,QAAS;YACjD,MAAMY,QAAQV,UAAU,CAACO,MAAMI,GAAG,CAAC;YACnC,IAAID,UAAUE,WAAW;gBACvB,IAAIL,MAAMM,MAAM,EAAE;oBAChBR,MAAM,CAACC,IAAI,GAAGI,MAAMI,KAAK,CAAC,KAAKC,GAAG,CAAC,CAACC,QAAUd,OAAOc;gBACvD,OAAO;oBACLX,MAAM,CAACC,IAAI,GAAGJ,OAAOQ;gBACvB;YACF;QACF;QAEA,OAAOL;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11926, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/shared/lib/page-path/ensure-leading-slash.ts"],"sourcesContent":["/**\n * For a given page path, this function ensures that there is a leading slash.\n * If there is not a leading slash, one is added, otherwise it is noop.\n */\nexport function ensureLeadingSlash(path: string) {\n  return path.startsWith('/') ? path : `/${path}`\n}\n"],"names":["ensureLeadingSlash","path","startsWith"],"mappings":"AAAA;;;CAGC,GACD;;;AAAO,SAASA,mBAAmBC,IAAY;IAC7C,OAAOA,KAAKC,UAAU,CAAC,OAAOD,OAAQ,MAAGA;AAC3C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11939, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/shared/lib/router/utils/app-paths.ts"],"sourcesContent":["import { ensureLeadingSlash } from '../../page-path/ensure-leading-slash'\nimport { isGroupSegment } from '../../segment'\n\n/**\n * Normalizes an app route so it represents the actual request path. Essentially\n * performing the following transformations:\n *\n * - `/(dashboard)/user/[id]/page` to `/user/[id]`\n * - `/(dashboard)/account/page` to `/account`\n * - `/user/[id]/page` to `/user/[id]`\n * - `/account/page` to `/account`\n * - `/page` to `/`\n * - `/(dashboard)/user/[id]/route` to `/user/[id]`\n * - `/(dashboard)/account/route` to `/account`\n * - `/user/[id]/route` to `/user/[id]`\n * - `/account/route` to `/account`\n * - `/route` to `/`\n * - `/` to `/`\n *\n * @param route the app route to normalize\n * @returns the normalized pathname\n */\nexport function normalizeAppPath(route: string) {\n  return ensureLeadingSlash(\n    route.split('/').reduce((pathname, segment, index, segments) => {\n      // Empty segments are ignored.\n      if (!segment) {\n        return pathname\n      }\n\n      // Groups are ignored.\n      if (isGroupSegment(segment)) {\n        return pathname\n      }\n\n      // Parallel segments are ignored.\n      if (segment[0] === '@') {\n        return pathname\n      }\n\n      // The last segment (if it's a leaf) should be ignored.\n      if (\n        (segment === 'page' || segment === 'route') &&\n        index === segments.length - 1\n      ) {\n        return pathname\n      }\n\n      return `${pathname}/${segment}`\n    }, '')\n  )\n}\n\n/**\n * Strips the `.rsc` extension if it's in the pathname.\n * Since this function is used on full urls it checks `?` for searchParams handling.\n */\nexport function normalizeRscURL(url: string) {\n  return url.replace(\n    /\\.rsc($|\\?)/,\n    // $1 ensures `?` is preserved\n    '$1'\n  )\n}\n"],"names":["ensureLeadingSlash","isGroupSegment","normalizeAppPath","route","split","reduce","pathname","segment","index","segments","length","normalizeRscURL","url","replace"],"mappings":";;;;AAAA,SAASA,kBAAkB,QAAQ,uCAAsC;AACzE,SAASC,cAAc,QAAQ,gBAAe;;;AAqBvC,SAASC,iBAAiBC,KAAa;IAC5C,8MAAOH,qBAAAA,EACLG,MAAMC,KAAK,CAAC,KAAKC,MAAM,CAAC,CAACC,UAAUC,SAASC,OAAOC;QACjD,8BAA8B;QAC9B,IAAI,CAACF,SAAS;YACZ,OAAOD;QACT;QAEA,sBAAsB;QACtB,wKAAIL,iBAAAA,EAAeM,UAAU;YAC3B,OAAOD;QACT;QAEA,iCAAiC;QACjC,IAAIC,OAAO,CAAC,EAAE,KAAK,KAAK;YACtB,OAAOD;QACT;QAEA,uDAAuD;QACvD,IACGC,CAAAA,YAAY,UAAUA,YAAY,OAAM,KACzCC,UAAUC,SAASC,MAAM,GAAG,GAC5B;YACA,OAAOJ;QACT;QAEA,OAAUA,WAAS,MAAGC;IACxB,GAAG;AAEP;AAMO,SAASI,gBAAgBC,GAAW;IACzC,OAAOA,IAAIC,OAAO,CAChB,eACA,AACA,8BAD8B;AAGlC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11975, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/shared/lib/router/utils/interception-routes.ts"],"sourcesContent":["import { normalizeAppPath } from './app-paths'\n\n// order matters here, the first match will be used\nexport const INTERCEPTION_ROUTE_MARKERS = [\n  '(..)(..)',\n  '(.)',\n  '(..)',\n  '(...)',\n] as const\n\nexport function isInterceptionRouteAppPath(path: string): boolean {\n  // TODO-APP: add more serious validation\n  return (\n    path\n      .split('/')\n      .find((segment) =>\n        INTERCEPTION_ROUTE_MARKERS.find((m) => segment.startsWith(m))\n      ) !== undefined\n  )\n}\n\nexport function extractInterceptionRouteInformation(path: string) {\n  let interceptingRoute: string | undefined,\n    marker: (typeof INTERCEPTION_ROUTE_MARKERS)[number] | undefined,\n    interceptedRoute: string | undefined\n\n  for (const segment of path.split('/')) {\n    marker = INTERCEPTION_ROUTE_MARKERS.find((m) => segment.startsWith(m))\n    if (marker) {\n      ;[interceptingRoute, interceptedRoute] = path.split(marker, 2)\n      break\n    }\n  }\n\n  if (!interceptingRoute || !marker || !interceptedRoute) {\n    throw new Error(\n      `Invalid interception route: ${path}. Must be in the format /<intercepting route>/(..|...|..)(..)/<intercepted route>`\n    )\n  }\n\n  interceptingRoute = normalizeAppPath(interceptingRoute) // normalize the path, e.g. /(blog)/feed -> /feed\n\n  switch (marker) {\n    case '(.)':\n      // (.) indicates that we should match with sibling routes, so we just need to append the intercepted route to the intercepting route\n      if (interceptingRoute === '/') {\n        interceptedRoute = `/${interceptedRoute}`\n      } else {\n        interceptedRoute = interceptingRoute + '/' + interceptedRoute\n      }\n      break\n    case '(..)':\n      // (..) indicates that we should match at one level up, so we need to remove the last segment of the intercepting route\n      if (interceptingRoute === '/') {\n        throw new Error(\n          `Invalid interception route: ${path}. Cannot use (..) marker at the root level, use (.) instead.`\n        )\n      }\n      interceptedRoute = interceptingRoute\n        .split('/')\n        .slice(0, -1)\n        .concat(interceptedRoute)\n        .join('/')\n      break\n    case '(...)':\n      // (...) will match the route segment in the root directory, so we need to use the root directory to prepend the intercepted route\n      interceptedRoute = '/' + interceptedRoute\n      break\n    case '(..)(..)':\n      // (..)(..) indicates that we should match at two levels up, so we need to remove the last two segments of the intercepting route\n\n      const splitInterceptingRoute = interceptingRoute.split('/')\n      if (splitInterceptingRoute.length <= 2) {\n        throw new Error(\n          `Invalid interception route: ${path}. Cannot use (..)(..) marker at the root level or one level up.`\n        )\n      }\n\n      interceptedRoute = splitInterceptingRoute\n        .slice(0, -2)\n        .concat(interceptedRoute)\n        .join('/')\n      break\n    default:\n      throw new Error('Invariant: unexpected marker')\n  }\n\n  return { interceptingRoute, interceptedRoute }\n}\n"],"names":["normalizeAppPath","INTERCEPTION_ROUTE_MARKERS","isInterceptionRouteAppPath","path","split","find","segment","m","startsWith","undefined","extractInterceptionRouteInformation","interceptingRoute","marker","interceptedRoute","Error","slice","concat","join","splitInterceptingRoute","length"],"mappings":";;;;;AAAA,SAASA,gBAAgB,QAAQ,cAAa;;AAGvC,MAAMC,6BAA6B;IACxC;IACA;IACA;IACA;CACD,CAAS;AAEH,SAASC,2BAA2BC,IAAY;IACrD,wCAAwC;IACxC,OACEA,KACGC,KAAK,CAAC,KACNC,IAAI,CAAC,CAACC,UACLL,2BAA2BI,IAAI,CAAC,CAACE,IAAMD,QAAQE,UAAU,CAACD,SACtDE;AAEZ;AAEO,SAASC,oCAAoCP,IAAY;IAC9D,IAAIQ,mBACFC,QACAC;IAEF,KAAK,MAAMP,WAAWH,KAAKC,KAAK,CAAC,KAAM;QACrCQ,SAASX,2BAA2BI,IAAI,CAAC,CAACE,IAAMD,QAAQE,UAAU,CAACD;QACnE,IAAIK,QAAQ;;YACT,CAACD,mBAAmBE,iBAAiB,GAAGV,KAAKC,KAAK,CAACQ,QAAQ;YAC5D;QACF;IACF;IAEA,IAAI,CAACD,qBAAqB,CAACC,UAAU,CAACC,kBAAkB;QACtD,MAAM,OAAA,cAEL,CAFK,IAAIC,MACP,iCAA8BX,OAAK,sFADhC,qBAAA;mBAAA;wBAAA;0BAAA;QAEN;IACF;IAEAQ,gNAAoBX,mBAAAA,EAAiBW,mBAAmB,iDAAiD;;IAEzG,OAAQC;QACN,KAAK;YACH,oIAAoI;YACpI,IAAID,sBAAsB,KAAK;gBAC7BE,mBAAoB,MAAGA;YACzB,OAAO;gBACLA,mBAAmBF,oBAAoB,MAAME;YAC/C;YACA;QACF,KAAK;YACH,uHAAuH;YACvH,IAAIF,sBAAsB,KAAK;gBAC7B,MAAM,OAAA,cAEL,CAFK,IAAIG,MACP,iCAA8BX,OAAK,iEADhC,qBAAA;2BAAA;gCAAA;kCAAA;gBAEN;YACF;YACAU,mBAAmBF,kBAChBP,KAAK,CAAC,KACNW,KAAK,CAAC,GAAG,CAAC,GACVC,MAAM,CAACH,kBACPI,IAAI,CAAC;YACR;QACF,KAAK;YACH,kIAAkI;YAClIJ,mBAAmB,MAAMA;YACzB;QACF,KAAK;YACH,iIAAiI;YAEjI,MAAMK,yBAAyBP,kBAAkBP,KAAK,CAAC;YACvD,IAAIc,uBAAuBC,MAAM,IAAI,GAAG;gBACtC,MAAM,OAAA,cAEL,CAFK,IAAIL,MACP,iCAA8BX,OAAK,oEADhC,qBAAA;2BAAA;gCAAA;kCAAA;gBAEN;YACF;YAEAU,mBAAmBK,uBAChBH,KAAK,CAAC,GAAG,CAAC,GACVC,MAAM,CAACH,kBACPI,IAAI,CAAC;YACR;QACF;YACE,MAAM,OAAA,cAAyC,CAAzC,IAAIH,MAAM,iCAAV,qBAAA;uBAAA;4BAAA;8BAAA;YAAwC;IAClD;IAEA,OAAO;QAAEH;QAAmBE;IAAiB;AAC/C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12063, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/shared/lib/escape-regexp.ts"],"sourcesContent":["// regexp is based on https://github.com/sindresorhus/escape-string-regexp\nconst reHasRegExp = /[|\\\\{}()[\\]^$+*?.-]/\nconst reReplaceRegExp = /[|\\\\{}()[\\]^$+*?.-]/g\n\nexport function escapeStringRegexp(str: string) {\n  // see also: https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/escapeRegExp.js#L23\n  if (reHasRegExp.test(str)) {\n    return str.replace(reReplaceRegExp, '\\\\$&')\n  }\n  return str\n}\n"],"names":["reHasRegExp","reReplaceRegExp","escapeStringRegexp","str","test","replace"],"mappings":"AAAA,0EAA0E;;;;AAC1E,MAAMA,cAAc;AACpB,MAAMC,kBAAkB;AAEjB,SAASC,mBAAmBC,GAAW;IAC5C,+GAA+G;IAC/G,IAAIH,YAAYI,IAAI,CAACD,MAAM;QACzB,OAAOA,IAAIE,OAAO,CAACJ,iBAAiB;IACtC;IACA,OAAOE;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12080, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/shared/lib/router/utils/route-regex.ts"],"sourcesContent":["import {\n  NEXT_INTERCEPTION_MARKER_PREFIX,\n  NEXT_QUERY_PARAM_PREFIX,\n} from '../../../../lib/constants'\nimport { INTERCEPTION_ROUTE_MARKERS } from './interception-routes'\nimport { escapeStringRegexp } from '../../escape-regexp'\nimport { removeTrailingSlash } from './remove-trailing-slash'\n\nexport interface Group {\n  pos: number\n  repeat: boolean\n  optional: boolean\n}\n\nexport interface RouteRegex {\n  groups: { [groupName: string]: Group }\n  re: RegExp\n}\n\ntype GetNamedRouteRegexOptions = {\n  /**\n   * Whether to prefix the route keys with the NEXT_INTERCEPTION_MARKER_PREFIX\n   * or NEXT_QUERY_PARAM_PREFIX. This is only relevant when creating the\n   * routes-manifest during the build.\n   */\n  prefixRouteKeys: boolean\n\n  /**\n   * Whether to include the suffix in the route regex. This means that when you\n   * have something like `/[...slug].json` the `.json` part will be included\n   * in the regex, yielding `/(.*).json` as the regex.\n   */\n  includeSuffix?: boolean\n\n  /**\n   * Whether to include the prefix in the route regex. This means that when you\n   * have something like `/[...slug].json` the `/` part will be included\n   * in the regex, yielding `^/(.*).json$` as the regex.\n   *\n   * Note that interception markers will already be included without the need\n   */\n  includePrefix?: boolean\n\n  /**\n   * Whether to exclude the optional trailing slash from the route regex.\n   */\n  excludeOptionalTrailingSlash?: boolean\n\n  /**\n   * Whether to backtrack duplicate keys. This is only relevant when creating\n   * the routes-manifest during the build.\n   */\n  backreferenceDuplicateKeys?: boolean\n}\n\ntype GetRouteRegexOptions = {\n  /**\n   * Whether to include extra parts in the route regex. This means that when you\n   * have something like `/[...slug].json` the `.json` part will be included\n   * in the regex, yielding `/(.*).json` as the regex.\n   */\n  includeSuffix?: boolean\n\n  /**\n   * Whether to include the prefix in the route regex. This means that when you\n   * have something like `/[...slug].json` the `/` part will be included\n   * in the regex, yielding `^/(.*).json$` as the regex.\n   *\n   * Note that interception markers will already be included without the need\n   * of adding this option.\n   */\n  includePrefix?: boolean\n\n  /**\n   * Whether to exclude the optional trailing slash from the route regex.\n   */\n  excludeOptionalTrailingSlash?: boolean\n}\n\n/**\n * Regular expression pattern used to match route parameters.\n * Matches both single parameters and parameter groups.\n * Examples:\n *   - `[[...slug]]` matches parameter group with key 'slug', repeat: true, optional: true\n *   - `[...slug]` matches parameter group with key 'slug', repeat: true, optional: false\n *   - `[[foo]]` matches parameter with key 'foo', repeat: false, optional: true\n *   - `[bar]` matches parameter with key 'bar', repeat: false, optional: false\n */\nconst PARAMETER_PATTERN = /^([^[]*)\\[((?:\\[[^\\]]*\\])|[^\\]]+)\\](.*)$/\n\n/**\n * Parses a given parameter from a route to a data structure that can be used\n * to generate the parametrized route.\n * Examples:\n *   - `[[...slug]]` -> `{ key: 'slug', repeat: true, optional: true }`\n *   - `[...slug]` -> `{ key: 'slug', repeat: true, optional: false }`\n *   - `[[foo]]` -> `{ key: 'foo', repeat: false, optional: true }`\n *   - `[bar]` -> `{ key: 'bar', repeat: false, optional: false }`\n *   - `fizz` -> `{ key: 'fizz', repeat: false, optional: false }`\n * @param param - The parameter to parse.\n * @returns The parsed parameter as a data structure.\n */\nexport function parseParameter(param: string) {\n  const match = param.match(PARAMETER_PATTERN)\n\n  if (!match) {\n    return parseMatchedParameter(param)\n  }\n\n  return parseMatchedParameter(match[2])\n}\n\n/**\n * Parses a matched parameter from the PARAMETER_PATTERN regex to a data structure that can be used\n * to generate the parametrized route.\n * Examples:\n *   - `[...slug]` -> `{ key: 'slug', repeat: true, optional: true }`\n *   - `...slug` -> `{ key: 'slug', repeat: true, optional: false }`\n *   - `[foo]` -> `{ key: 'foo', repeat: false, optional: true }`\n *   - `bar` -> `{ key: 'bar', repeat: false, optional: false }`\n * @param param - The matched parameter to parse.\n * @returns The parsed parameter as a data structure.\n */\nfunction parseMatchedParameter(param: string) {\n  const optional = param.startsWith('[') && param.endsWith(']')\n  if (optional) {\n    param = param.slice(1, -1)\n  }\n  const repeat = param.startsWith('...')\n  if (repeat) {\n    param = param.slice(3)\n  }\n  return { key: param, repeat, optional }\n}\n\nfunction getParametrizedRoute(\n  route: string,\n  includeSuffix: boolean,\n  includePrefix: boolean\n) {\n  const groups: { [groupName: string]: Group } = {}\n  let groupIndex = 1\n\n  const segments: string[] = []\n  for (const segment of removeTrailingSlash(route).slice(1).split('/')) {\n    const markerMatch = INTERCEPTION_ROUTE_MARKERS.find((m) =>\n      segment.startsWith(m)\n    )\n    const paramMatches = segment.match(PARAMETER_PATTERN) // Check for parameters\n\n    if (markerMatch && paramMatches && paramMatches[2]) {\n      const { key, optional, repeat } = parseMatchedParameter(paramMatches[2])\n      groups[key] = { pos: groupIndex++, repeat, optional }\n      segments.push(`/${escapeStringRegexp(markerMatch)}([^/]+?)`)\n    } else if (paramMatches && paramMatches[2]) {\n      const { key, repeat, optional } = parseMatchedParameter(paramMatches[2])\n      groups[key] = { pos: groupIndex++, repeat, optional }\n\n      if (includePrefix && paramMatches[1]) {\n        segments.push(`/${escapeStringRegexp(paramMatches[1])}`)\n      }\n\n      let s = repeat ? (optional ? '(?:/(.+?))?' : '/(.+?)') : '/([^/]+?)'\n\n      // Remove the leading slash if includePrefix already added it.\n      if (includePrefix && paramMatches[1]) {\n        s = s.substring(1)\n      }\n\n      segments.push(s)\n    } else {\n      segments.push(`/${escapeStringRegexp(segment)}`)\n    }\n\n    // If there's a suffix, add it to the segments if it's enabled.\n    if (includeSuffix && paramMatches && paramMatches[3]) {\n      segments.push(escapeStringRegexp(paramMatches[3]))\n    }\n  }\n\n  return {\n    parameterizedRoute: segments.join(''),\n    groups,\n  }\n}\n\n/**\n * From a normalized route this function generates a regular expression and\n * a corresponding groups object intended to be used to store matching groups\n * from the regular expression.\n */\nexport function getRouteRegex(\n  normalizedRoute: string,\n  {\n    includeSuffix = false,\n    includePrefix = false,\n    excludeOptionalTrailingSlash = false,\n  }: GetRouteRegexOptions = {}\n): RouteRegex {\n  const { parameterizedRoute, groups } = getParametrizedRoute(\n    normalizedRoute,\n    includeSuffix,\n    includePrefix\n  )\n\n  let re = parameterizedRoute\n  if (!excludeOptionalTrailingSlash) {\n    re += '(?:/)?'\n  }\n\n  return {\n    re: new RegExp(`^${re}$`),\n    groups: groups,\n  }\n}\n\n/**\n * Builds a function to generate a minimal routeKey using only a-z and minimal\n * number of characters.\n */\nfunction buildGetSafeRouteKey() {\n  let i = 0\n\n  return () => {\n    let routeKey = ''\n    let j = ++i\n    while (j > 0) {\n      routeKey += String.fromCharCode(97 + ((j - 1) % 26))\n      j = Math.floor((j - 1) / 26)\n    }\n    return routeKey\n  }\n}\n\nfunction getSafeKeyFromSegment({\n  interceptionMarker,\n  getSafeRouteKey,\n  segment,\n  routeKeys,\n  keyPrefix,\n  backreferenceDuplicateKeys,\n}: {\n  interceptionMarker?: string\n  getSafeRouteKey: () => string\n  segment: string\n  routeKeys: Record<string, string>\n  keyPrefix?: string\n  backreferenceDuplicateKeys: boolean\n}) {\n  const { key, optional, repeat } = parseMatchedParameter(segment)\n\n  // replace any non-word characters since they can break\n  // the named regex\n  let cleanedKey = key.replace(/\\W/g, '')\n\n  if (keyPrefix) {\n    cleanedKey = `${keyPrefix}${cleanedKey}`\n  }\n  let invalidKey = false\n\n  // check if the key is still invalid and fallback to using a known\n  // safe key\n  if (cleanedKey.length === 0 || cleanedKey.length > 30) {\n    invalidKey = true\n  }\n  if (!isNaN(parseInt(cleanedKey.slice(0, 1)))) {\n    invalidKey = true\n  }\n\n  if (invalidKey) {\n    cleanedKey = getSafeRouteKey()\n  }\n\n  const duplicateKey = cleanedKey in routeKeys\n\n  if (keyPrefix) {\n    routeKeys[cleanedKey] = `${keyPrefix}${key}`\n  } else {\n    routeKeys[cleanedKey] = key\n  }\n\n  // if the segment has an interception marker, make sure that's part of the regex pattern\n  // this is to ensure that the route with the interception marker doesn't incorrectly match\n  // the non-intercepted route (ie /app/(.)[username] should not match /app/[username])\n  const interceptionPrefix = interceptionMarker\n    ? escapeStringRegexp(interceptionMarker)\n    : ''\n\n  let pattern: string\n  if (duplicateKey && backreferenceDuplicateKeys) {\n    // Use a backreference to the key to ensure that the key is the same value\n    // in each of the placeholders.\n    pattern = `\\\\k<${cleanedKey}>`\n  } else if (repeat) {\n    pattern = `(?<${cleanedKey}>.+?)`\n  } else {\n    pattern = `(?<${cleanedKey}>[^/]+?)`\n  }\n\n  return optional\n    ? `(?:/${interceptionPrefix}${pattern})?`\n    : `/${interceptionPrefix}${pattern}`\n}\n\nfunction getNamedParametrizedRoute(\n  route: string,\n  prefixRouteKeys: boolean,\n  includeSuffix: boolean,\n  includePrefix: boolean,\n  backreferenceDuplicateKeys: boolean\n) {\n  const getSafeRouteKey = buildGetSafeRouteKey()\n  const routeKeys: { [named: string]: string } = {}\n\n  const segments: string[] = []\n  for (const segment of removeTrailingSlash(route).slice(1).split('/')) {\n    const hasInterceptionMarker = INTERCEPTION_ROUTE_MARKERS.some((m) =>\n      segment.startsWith(m)\n    )\n\n    const paramMatches = segment.match(PARAMETER_PATTERN) // Check for parameters\n\n    if (hasInterceptionMarker && paramMatches && paramMatches[2]) {\n      // If there's an interception marker, add it to the segments.\n      segments.push(\n        getSafeKeyFromSegment({\n          getSafeRouteKey,\n          interceptionMarker: paramMatches[1],\n          segment: paramMatches[2],\n          routeKeys,\n          keyPrefix: prefixRouteKeys\n            ? NEXT_INTERCEPTION_MARKER_PREFIX\n            : undefined,\n          backreferenceDuplicateKeys,\n        })\n      )\n    } else if (paramMatches && paramMatches[2]) {\n      // If there's a prefix, add it to the segments if it's enabled.\n      if (includePrefix && paramMatches[1]) {\n        segments.push(`/${escapeStringRegexp(paramMatches[1])}`)\n      }\n\n      let s = getSafeKeyFromSegment({\n        getSafeRouteKey,\n        segment: paramMatches[2],\n        routeKeys,\n        keyPrefix: prefixRouteKeys ? NEXT_QUERY_PARAM_PREFIX : undefined,\n        backreferenceDuplicateKeys,\n      })\n\n      // Remove the leading slash if includePrefix already added it.\n      if (includePrefix && paramMatches[1]) {\n        s = s.substring(1)\n      }\n\n      segments.push(s)\n    } else {\n      segments.push(`/${escapeStringRegexp(segment)}`)\n    }\n\n    // If there's a suffix, add it to the segments if it's enabled.\n    if (includeSuffix && paramMatches && paramMatches[3]) {\n      segments.push(escapeStringRegexp(paramMatches[3]))\n    }\n  }\n\n  return {\n    namedParameterizedRoute: segments.join(''),\n    routeKeys,\n  }\n}\n\n/**\n * This function extends `getRouteRegex` generating also a named regexp where\n * each group is named along with a routeKeys object that indexes the assigned\n * named group with its corresponding key. When the routeKeys need to be\n * prefixed to uniquely identify internally the \"prefixRouteKey\" arg should\n * be \"true\" currently this is only the case when creating the routes-manifest\n * during the build\n */\nexport function getNamedRouteRegex(\n  normalizedRoute: string,\n  options: GetNamedRouteRegexOptions\n) {\n  const result = getNamedParametrizedRoute(\n    normalizedRoute,\n    options.prefixRouteKeys,\n    options.includeSuffix ?? false,\n    options.includePrefix ?? false,\n    options.backreferenceDuplicateKeys ?? false\n  )\n\n  let namedRegex = result.namedParameterizedRoute\n  if (!options.excludeOptionalTrailingSlash) {\n    namedRegex += '(?:/)?'\n  }\n\n  return {\n    ...getRouteRegex(normalizedRoute, options),\n    namedRegex: `^${namedRegex}$`,\n    routeKeys: result.routeKeys,\n  }\n}\n\n/**\n * Generates a named regexp.\n * This is intended to be using for build time only.\n */\nexport function getNamedMiddlewareRegex(\n  normalizedRoute: string,\n  options: {\n    catchAll?: boolean\n  }\n) {\n  const { parameterizedRoute } = getParametrizedRoute(\n    normalizedRoute,\n    false,\n    false\n  )\n  const { catchAll = true } = options\n  if (parameterizedRoute === '/') {\n    let catchAllRegex = catchAll ? '.*' : ''\n    return {\n      namedRegex: `^/${catchAllRegex}$`,\n    }\n  }\n\n  const { namedParameterizedRoute } = getNamedParametrizedRoute(\n    normalizedRoute,\n    false,\n    false,\n    false,\n    false\n  )\n  let catchAllGroupedRegex = catchAll ? '(?:(/.*)?)' : ''\n  return {\n    namedRegex: `^${namedParameterizedRoute}${catchAllGroupedRegex}$`,\n  }\n}\n"],"names":["NEXT_INTERCEPTION_MARKER_PREFIX","NEXT_QUERY_PARAM_PREFIX","INTERCEPTION_ROUTE_MARKERS","escapeStringRegexp","removeTrailingSlash","PARAMETER_PATTERN","parseParameter","param","match","parseMatchedParameter","optional","startsWith","endsWith","slice","repeat","key","getParametrizedRoute","route","includeSuffix","includePrefix","groups","groupIndex","segments","segment","split","markerMatch","find","m","paramMatches","pos","push","s","substring","parameterizedRoute","join","getRouteRegex","normalizedRoute","excludeOptionalTrailingSlash","re","RegExp","buildGetSafeRouteKey","i","routeKey","j","String","fromCharCode","Math","floor","getSafeKeyFromSegment","interceptionMarker","getSafeRouteKey","routeKeys","keyPrefix","backreferenceDuplicateKeys","cleanedKey","replace","invalidKey","length","isNaN","parseInt","duplicateKey","interceptionPrefix","pattern","getNamedParametrizedRoute","prefixRouteKeys","hasInterceptionMarker","some","undefined","namedParameterizedRoute","getNamedRouteRegex","options","result","namedRegex","getNamedMiddlewareRegex","catchAll","catchAllRegex","catchAllGroupedRegex"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12330, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/server/request/fallback-params.ts"],"sourcesContent":["import { getRouteMatcher } from '../../shared/lib/router/utils/route-matcher'\nimport { getRouteRegex } from '../../shared/lib/router/utils/route-regex'\n\nexport type FallbackRouteParams = ReadonlyMap<string, string>\n\nfunction getParamKeys(page: string) {\n  const pattern = getRouteRegex(page)\n  const matcher = getRouteMatcher(pattern)\n\n  // Get the default list of allowed params.\n  return Object.keys(matcher(page))\n}\n\nexport function getFallbackRouteParams(\n  pageOrKeys: string | readonly string[]\n): FallbackRouteParams | null {\n  let keys: readonly string[]\n  if (typeof pageOrKeys === 'string') {\n    keys = getParamKeys(pageOrKeys)\n  } else {\n    keys = pageOrKeys\n  }\n\n  // If there are no keys, we can return early.\n  if (keys.length === 0) return null\n\n  const params = new Map<string, string>()\n\n  // As we're creating unique keys for each of the dynamic route params, we only\n  // need to generate a unique ID once per request because each of the keys will\n  // be also be unique.\n  const uniqueID = Math.random().toString(16).slice(2)\n\n  for (const key of keys) {\n    params.set(key, `%%drp:${key}:${uniqueID}%%`)\n  }\n\n  return params\n}\n"],"names":["getRouteMatcher","getRouteRegex","getParamKeys","page","pattern","matcher","Object","keys","getFallbackRouteParams","pageOrKeys","length","params","Map","uniqueID","Math","random","toString","slice","key","set"],"mappings":";;;AAAA,SAASA,eAAe,QAAQ,8CAA6C;AAC7E,SAASC,aAAa,QAAQ,4CAA2C;;;AAIzE,SAASC,aAAaC,IAAY;IAChC,MAAMC,wMAAUH,gBAAAA,EAAcE;IAC9B,MAAME,0MAAUL,kBAAAA,EAAgBI;IAEhC,0CAA0C;IAC1C,OAAOE,OAAOC,IAAI,CAACF,QAAQF;AAC7B;AAEO,SAASK,uBACdC,UAAsC;IAEtC,IAAIF;IACJ,IAAI,OAAOE,eAAe,UAAU;QAClCF,OAAOL,aAAaO;IACtB,OAAO;QACLF,OAAOE;IACT;IAEA,6CAA6C;IAC7C,IAAIF,KAAKG,MAAM,KAAK,GAAG,OAAO;IAE9B,MAAMC,SAAS,IAAIC;IAEnB,8EAA8E;IAC9E,8EAA8E;IAC9E,qBAAqB;IACrB,MAAMC,WAAWC,KAAKC,MAAM,GAAGC,QAAQ,CAAC,IAAIC,KAAK,CAAC;IAElD,KAAK,MAAMC,OAAOX,KAAM;QACtBI,OAAOQ,GAAG,CAACD,KAAK,CAAC,MAAM,EAAEA,IAAI,CAAC,EAAEL,SAAS,EAAE,CAAC;IAC9C;IAEA,OAAOF;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12366, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/server/app-render/encryption-utils.ts"],"sourcesContent":["import type { ActionManifest } from '../../build/webpack/plugins/flight-client-entry-plugin'\nimport type {\n  ClientReferenceManifest,\n  ClientReferenceManifestForRsc,\n} from '../../build/webpack/plugins/flight-manifest-plugin'\nimport type { DeepReadonly } from '../../shared/lib/deep-readonly'\nimport { InvariantError } from '../../shared/lib/invariant-error'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\nimport { workAsyncStorage } from './work-async-storage.external'\n\nlet __next_loaded_action_key: CryptoKey\n\nexport function arrayBufferToString(\n  buffer: ArrayBuffer | Uint8Array<ArrayBufferLike>\n) {\n  const bytes = new Uint8Array(buffer)\n  const len = bytes.byteLength\n\n  // @anonrig: V8 has a limit of 65535 arguments in a function.\n  // For len < 65535, this is faster.\n  // https://github.com/vercel/next.js/pull/56377#pullrequestreview-1656181623\n  if (len < 65535) {\n    return String.fromCharCode.apply(null, bytes as unknown as number[])\n  }\n\n  let binary = ''\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i])\n  }\n  return binary\n}\n\nexport function stringToUint8Array(binary: string) {\n  const len = binary.length\n  const arr = new Uint8Array(len)\n\n  for (let i = 0; i < len; i++) {\n    arr[i] = binary.charCodeAt(i)\n  }\n\n  return arr\n}\n\nexport function encrypt(key: CryptoKey, iv: Uint8Array, data: Uint8Array) {\n  return crypto.subtle.encrypt(\n    {\n      name: 'AES-GCM',\n      iv,\n    },\n    key,\n    data\n  )\n}\n\nexport function decrypt(key: CryptoKey, iv: Uint8Array, data: Uint8Array) {\n  return crypto.subtle.decrypt(\n    {\n      name: 'AES-GCM',\n      iv,\n    },\n    key,\n    data\n  )\n}\n\n// This is a global singleton that is used to encode/decode the action bound args from\n// the closure. This can't be using a AsyncLocalStorage as it might happen on the module\n// level. Since the client reference manifest won't be mutated, let's use a global singleton\n// to keep it.\nconst SERVER_ACTION_MANIFESTS_SINGLETON = Symbol.for(\n  'next.server.action-manifests'\n)\n\nexport function setReferenceManifestsSingleton({\n  page,\n  clientReferenceManifest,\n  serverActionsManifest,\n  serverModuleMap,\n}: {\n  page: string\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n  serverActionsManifest: DeepReadonly<ActionManifest>\n  serverModuleMap: {\n    [id: string]: {\n      id: string\n      chunks: string[]\n      name: string\n    }\n  }\n}) {\n  // @ts-expect-error\n  const clientReferenceManifestsPerPage = globalThis[\n    SERVER_ACTION_MANIFESTS_SINGLETON\n  ]?.clientReferenceManifestsPerPage as\n    | undefined\n    | DeepReadonly<Record<string, ClientReferenceManifest>>\n\n  // @ts-expect-error\n  globalThis[SERVER_ACTION_MANIFESTS_SINGLETON] = {\n    clientReferenceManifestsPerPage: {\n      ...clientReferenceManifestsPerPage,\n      [normalizeAppPath(page)]: clientReferenceManifest,\n    },\n    serverActionsManifest,\n    serverModuleMap,\n  }\n}\n\nexport function getServerModuleMap() {\n  const serverActionsManifestSingleton = (globalThis as any)[\n    SERVER_ACTION_MANIFESTS_SINGLETON\n  ] as {\n    serverModuleMap: {\n      [id: string]: {\n        id: string\n        chunks: string[]\n        name: string\n      }\n    }\n  }\n\n  if (!serverActionsManifestSingleton) {\n    throw new InvariantError('Missing manifest for Server Actions.')\n  }\n\n  return serverActionsManifestSingleton.serverModuleMap\n}\n\nexport function getClientReferenceManifestForRsc(): DeepReadonly<ClientReferenceManifestForRsc> {\n  const serverActionsManifestSingleton = (globalThis as any)[\n    SERVER_ACTION_MANIFESTS_SINGLETON\n  ] as {\n    clientReferenceManifestsPerPage: DeepReadonly<\n      Record<string, ClientReferenceManifest>\n    >\n  }\n\n  if (!serverActionsManifestSingleton) {\n    throw new InvariantError('Missing manifest for Server Actions.')\n  }\n\n  const { clientReferenceManifestsPerPage } = serverActionsManifestSingleton\n  const workStore = workAsyncStorage.getStore()\n\n  if (!workStore) {\n    // If there's no work store defined, we can assume that a client reference\n    // manifest is needed during module evaluation, e.g. to create a server\n    // action using a higher-order function. This might also use client\n    // components which need to be serialized by Flight, and therefore client\n    // references need to be resolvable. To make this work, we're returning a\n    // merged manifest across all pages. This is fine as long as the module IDs\n    // are not page specific, which they are not for Webpack. TODO: Fix this in\n    // Turbopack.\n    return mergeClientReferenceManifests(clientReferenceManifestsPerPage)\n  }\n\n  const clientReferenceManifest =\n    clientReferenceManifestsPerPage[workStore.route]\n\n  if (!clientReferenceManifest) {\n    throw new InvariantError(\n      `Missing Client Reference Manifest for ${workStore.route}.`\n    )\n  }\n\n  return clientReferenceManifest\n}\n\nexport async function getActionEncryptionKey() {\n  if (__next_loaded_action_key) {\n    return __next_loaded_action_key\n  }\n\n  const serverActionsManifestSingleton = (globalThis as any)[\n    SERVER_ACTION_MANIFESTS_SINGLETON\n  ] as {\n    serverActionsManifest: DeepReadonly<ActionManifest>\n  }\n\n  if (!serverActionsManifestSingleton) {\n    throw new InvariantError('Missing manifest for Server Actions.')\n  }\n\n  const rawKey =\n    process.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEY ||\n    serverActionsManifestSingleton.serverActionsManifest.encryptionKey\n\n  if (rawKey === undefined) {\n    throw new InvariantError('Missing encryption key for Server Actions')\n  }\n\n  __next_loaded_action_key = await crypto.subtle.importKey(\n    'raw',\n    stringToUint8Array(atob(rawKey)),\n    'AES-GCM',\n    true,\n    ['encrypt', 'decrypt']\n  )\n\n  return __next_loaded_action_key\n}\n\nfunction mergeClientReferenceManifests(\n  clientReferenceManifestsPerPage: DeepReadonly<\n    Record<string, ClientReferenceManifest>\n  >\n): ClientReferenceManifestForRsc {\n  const clientReferenceManifests = Object.values(\n    clientReferenceManifestsPerPage as Record<string, ClientReferenceManifest>\n  )\n\n  const mergedClientReferenceManifest: ClientReferenceManifestForRsc = {\n    clientModules: {},\n    edgeRscModuleMapping: {},\n    rscModuleMapping: {},\n  }\n\n  for (const clientReferenceManifest of clientReferenceManifests) {\n    mergedClientReferenceManifest.clientModules = {\n      ...mergedClientReferenceManifest.clientModules,\n      ...clientReferenceManifest.clientModules,\n    }\n    mergedClientReferenceManifest.edgeRscModuleMapping = {\n      ...mergedClientReferenceManifest.edgeRscModuleMapping,\n      ...clientReferenceManifest.edgeRscModuleMapping,\n    }\n    mergedClientReferenceManifest.rscModuleMapping = {\n      ...mergedClientReferenceManifest.rscModuleMapping,\n      ...clientReferenceManifest.rscModuleMapping,\n    }\n  }\n\n  return mergedClientReferenceManifest\n}\n"],"names":["InvariantError","normalizeAppPath","workAsyncStorage","__next_loaded_action_key","arrayBufferToString","buffer","bytes","Uint8Array","len","byteLength","String","fromCharCode","apply","binary","i","stringToUint8Array","length","arr","charCodeAt","encrypt","key","iv","data","crypto","subtle","name","decrypt","SERVER_ACTION_MANIFESTS_SINGLETON","Symbol","for","setReferenceManifestsSingleton","page","clientReferenceManifest","serverActionsManifest","serverModuleMap","globalThis","clientReferenceManifestsPerPage","getServerModuleMap","serverActionsManifestSingleton","getClientReferenceManifestForRsc","workStore","getStore","mergeClientReferenceManifests","route","getActionEncryptionKey","rawKey","process","env","NEXT_SERVER_ACTIONS_ENCRYPTION_KEY","encryptionKey","undefined","importKey","atob","clientReferenceManifests","Object","values","mergedClientReferenceManifest","clientModules","edgeRscModuleMapping","rscModuleMapping"],"mappings":";;;;;;;;;;AAMA,SAASA,cAAc,QAAQ,mCAAkC;AACjE,SAASC,gBAAgB,QAAQ,0CAAyC;AAC1E,SAASC,gBAAgB,QAAQ,gCAA+B;;;;AAEhE,IAAIC;AAEG,SAASC,oBACdC,MAAiD;IAEjD,MAAMC,QAAQ,IAAIC,WAAWF;IAC7B,MAAMG,MAAMF,MAAMG,UAAU;IAE5B,6DAA6D;IAC7D,mCAAmC;IACnC,4EAA4E;IAC5E,IAAID,MAAM,OAAO;QACf,OAAOE,OAAOC,YAAY,CAACC,KAAK,CAAC,MAAMN;IACzC;IAEA,IAAIO,SAAS;IACb,IAAK,IAAIC,IAAI,GAAGA,IAAIN,KAAKM,IAAK;QAC5BD,UAAUH,OAAOC,YAAY,CAACL,KAAK,CAACQ,EAAE;IACxC;IACA,OAAOD;AACT;AAEO,SAASE,mBAAmBF,MAAc;IAC/C,MAAML,MAAMK,OAAOG,MAAM;IACzB,MAAMC,MAAM,IAAIV,WAAWC;IAE3B,IAAK,IAAIM,IAAI,GAAGA,IAAIN,KAAKM,IAAK;QAC5BG,GAAG,CAACH,EAAE,GAAGD,OAAOK,UAAU,CAACJ;IAC7B;IAEA,OAAOG;AACT;AAEO,SAASE,QAAQC,GAAc,EAAEC,EAAc,EAAEC,IAAgB;IACtE,OAAOC,OAAOC,MAAM,CAACL,OAAO,CAC1B;QACEM,MAAM;QACNJ;IACF,GACAD,KACAE;AAEJ;AAEO,SAASI,QAAQN,GAAc,EAAEC,EAAc,EAAEC,IAAgB;IACtE,OAAOC,OAAOC,MAAM,CAACE,OAAO,CAC1B;QACED,MAAM;QACNJ;IACF,GACAD,KACAE;AAEJ;AAEA,sFAAsF;AACtF,wFAAwF;AACxF,4FAA4F;AAC5F,cAAc;AACd,MAAMK,oCAAoCC,OAAOC,GAAG,CAClD;AAGK,SAASC,+BAA+B,EAC7CC,IAAI,EACJC,uBAAuB,EACvBC,qBAAqB,EACrBC,eAAe,EAYhB;QAEyCC;IADxC,mBAAmB;IACnB,MAAMC,kCAAAA,CAAkCD,gDAAAA,UAAU,CAChDR,kCACD,KAAA,OAAA,KAAA,IAFuCQ,8CAErCC,+BAA+B;IAIlC,mBAAmB;IACnBD,UAAU,CAACR,kCAAkC,GAAG;QAC9CS,iCAAiC;YAC/B,GAAGA,+BAA+B;YAClC,6LAACnC,mBAAAA,EAAiB8B,MAAM,EAAEC;QAC5B;QACAC;QACAC;IACF;AACF;AAEO,SAASG;IACd,MAAMC,iCAAkCH,UAAkB,CACxDR,kCACD;IAUD,IAAI,CAACW,gCAAgC;QACnC,MAAM,OAAA,cAA0D,CAA1D,+KAAItC,iBAAAA,CAAe,yCAAnB,qBAAA;mBAAA;wBAAA;0BAAA;QAAyD;IACjE;IAEA,OAAOsC,+BAA+BJ,eAAe;AACvD;AAEO,SAASK;IACd,MAAMD,iCAAkCH,UAAkB,CACxDR,kCACD;IAMD,IAAI,CAACW,gCAAgC;QACnC,MAAM,OAAA,cAA0D,CAA1D,+KAAItC,iBAAAA,CAAe,yCAAnB,qBAAA;mBAAA;wBAAA;0BAAA;QAAyD;IACjE;IAEA,MAAM,EAAEoC,+BAA+B,EAAE,GAAGE;IAC5C,MAAME,gRAAYtC,mBAAAA,CAAiBuC,QAAQ;IAE3C,IAAI,CAACD,WAAW;QACd,0EAA0E;QAC1E,uEAAuE;QACvE,mEAAmE;QACnE,yEAAyE;QACzE,yEAAyE;QACzE,2EAA2E;QAC3E,2EAA2E;QAC3E,aAAa;QACb,OAAOE,8BAA8BN;IACvC;IAEA,MAAMJ,0BACJI,+BAA+B,CAACI,UAAUG,KAAK,CAAC;IAElD,IAAI,CAACX,yBAAyB;QAC5B,MAAM,OAAA,cAEL,CAFK,+KAAIhC,iBAAAA,CACR,CAAC,sCAAsC,EAAEwC,UAAUG,KAAK,CAAC,CAAC,CAAC,GADvD,qBAAA;mBAAA;wBAAA;0BAAA;QAEN;IACF;IAEA,OAAOX;AACT;AAEO,eAAeY;IACpB,IAAIzC,0BAA0B;QAC5B,OAAOA;IACT;IAEA,MAAMmC,iCAAkCH,UAAkB,CACxDR,kCACD;IAID,IAAI,CAACW,gCAAgC;QACnC,MAAM,OAAA,cAA0D,CAA1D,+KAAItC,iBAAAA,CAAe,yCAAnB,qBAAA;mBAAA;wBAAA;0BAAA;QAAyD;IACjE;IAEA,MAAM6C,SACJC,QAAQC,GAAG,CAACC,kCAAkC,IAC9CV,+BAA+BL,qBAAqB,CAACgB,aAAa;IAEpE,IAAIJ,WAAWK,WAAW;QACxB,MAAM,OAAA,cAA+D,CAA/D,+KAAIlD,iBAAAA,CAAe,8CAAnB,qBAAA;mBAAA;wBAAA;0BAAA;QAA8D;IACtE;IAEAG,2BAA2B,MAAMoB,OAAOC,MAAM,CAAC2B,SAAS,CACtD,OACApC,mBAAmBqC,KAAKP,UACxB,WACA,MACA;QAAC;QAAW;KAAU;IAGxB,OAAO1C;AACT;AAEA,SAASuC,8BACPN,+BAEC;IAED,MAAMiB,2BAA2BC,OAAOC,MAAM,CAC5CnB;IAGF,MAAMoB,gCAA+D;QACnEC,eAAe,CAAC;QAChBC,sBAAsB,CAAC;QACvBC,kBAAkB,CAAC;IACrB;IAEA,KAAK,MAAM3B,2BAA2BqB,yBAA0B;QAC9DG,8BAA8BC,aAAa,GAAG;YAC5C,GAAGD,8BAA8BC,aAAa;YAC9C,GAAGzB,wBAAwByB,aAAa;QAC1C;QACAD,8BAA8BE,oBAAoB,GAAG;YACnD,GAAGF,8BAA8BE,oBAAoB;YACrD,GAAG1B,wBAAwB0B,oBAAoB;QACjD;QACAF,8BAA8BG,gBAAgB,GAAG;YAC/C,GAAGH,8BAA8BG,gBAAgB;YACjD,GAAG3B,wBAAwB2B,gBAAgB;QAC7C;IACF;IAEA,OAAOH;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12533, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/shared/lib/router/utils/html-bots.ts"],"sourcesContent":["// This regex contains the bots that we need to do a blocking render for and can't safely stream the response\n// due to how they parse the DOM. For example, they might explicitly check for metadata in the `head` tag, so we can't stream metadata tags after the `head` was sent.\nexport const HTML_LIMITED_BOT_UA_RE =\n  /Mediapartners-Google|Chrome-Lighthouse|Slurp|DuckDuckBot|baiduspider|yandex|sogou|bitlybot|tumblr|vkShare|quora link preview|redditbot|ia_archiver|Bingbot|BingPreview|applebot|facebookexternalhit|facebookcatalog|Twitterbot|LinkedInBot|Slackbot|Discordbot|WhatsApp|SkypeUriPreview|Yeti/i\n"],"names":["HTML_LIMITED_BOT_UA_RE"],"mappings":"AAAA,6GAA6G;AAC7G,sKAAsK;;;;AAC/J,MAAMA,yBACX,gSAA+R","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12543, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/shared/lib/router/utils/is-bot.ts"],"sourcesContent":["import { HTML_LIMITED_BOT_UA_RE } from './html-bots'\n\n// Bot crawler that will spin up a headless browser and execute JS.\n// By default, only googlebots are considered as DOM bots. Blow is where the regex is computed from:\n// x-ref: https://developers.google.com/search/docs/crawling-indexing/google-common-crawlers\nconst HEADLESS_BROWSER_BOT_UA_RE = /google/i\n\nexport const HTML_LIMITED_BOT_UA_RE_STRING = HTML_LIMITED_BOT_UA_RE.source\n\nexport { HTML_LIMITED_BOT_UA_RE }\n\nfunction isDomBotUA(userAgent: string) {\n  return HEADLESS_BROWSER_BOT_UA_RE.test(userAgent)\n}\n\nfunction isHtmlLimitedBotUA(userAgent: string) {\n  return HTML_LIMITED_BOT_UA_RE.test(userAgent)\n}\n\nexport function isBot(userAgent: string): boolean {\n  return isDomBotUA(userAgent) || isHtmlLimitedBotUA(userAgent)\n}\n\nexport function getBotType(userAgent: string): 'dom' | 'html' | undefined {\n  if (isDomBotUA(userAgent)) {\n    return 'dom'\n  }\n  if (isHtmlLimitedBotUA(userAgent)) {\n    return 'html'\n  }\n  return undefined\n}\n"],"names":["HTML_LIMITED_BOT_UA_RE","HEADLESS_BROWSER_BOT_UA_RE","HTML_LIMITED_BOT_UA_RE_STRING","source","isDomBotUA","userAgent","test","isHtmlLimitedBotUA","isBot","getBotType","undefined"],"mappings":";;;;;AAAA,SAASA,sBAAsB,QAAQ,cAAa;;AAEpD,mEAAmE;AACnE,oGAAoG;AACpG,4FAA4F;AAC5F,MAAMC,6BAA6B;AAE5B,MAAMC,wNAAgCF,yBAAAA,CAAuBG,MAAM,CAAA;;AAI1E,SAASC,WAAWC,SAAiB;IACnC,OAAOJ,2BAA2BK,IAAI,CAACD;AACzC;AAEA,SAASE,mBAAmBF,SAAiB;IAC3C,+LAAOL,yBAAAA,CAAuBM,IAAI,CAACD;AACrC;AAEO,SAASG,MAAMH,SAAiB;IACrC,OAAOD,WAAWC,cAAcE,mBAAmBF;AACrD;AAEO,SAASI,WAAWJ,SAAiB;IAC1C,IAAID,WAAWC,YAAY;QACzB,OAAO;IACT;IACA,IAAIE,mBAAmBF,YAAY;QACjC,OAAO;IACT;IACA,OAAOK;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12585, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/server/lib/streaming-metadata.ts"],"sourcesContent":["import {\n  getBotType,\n  HTML_LIMITED_BOT_UA_RE_STRING,\n} from '../../shared/lib/router/utils/is-bot'\nimport type { BaseNextRequest } from '../base-http'\n\nexport function shouldServeStreamingMetadata(\n  userAgent: string,\n  htmlLimitedBots: string | undefined\n): boolean {\n  const blockingMetadataUARegex = new RegExp(\n    htmlLimitedBots || HTML_LIMITED_BOT_UA_RE_STRING,\n    'i'\n  )\n  // Only block metadata for HTML-limited bots\n  if (userAgent && blockingMetadataUARegex.test(userAgent)) {\n    return false\n  }\n  return true\n}\n\n// When the request UA is a html-limited bot, we should do a dynamic render.\n// In this case, postpone state is not sent.\nexport function isHtmlBotRequest(req: {\n  headers: BaseNextRequest['headers']\n}): boolean {\n  const ua = req.headers['user-agent'] || ''\n  const botType = getBotType(ua)\n\n  return botType === 'html'\n}\n"],"names":["getBotType","HTML_LIMITED_BOT_UA_RE_STRING","shouldServeStreamingMetadata","userAgent","htmlLimitedBots","blockingMetadataUARegex","RegExp","test","isHtmlBotRequest","req","ua","headers","botType"],"mappings":";;;;AAAA,SACEA,UAAU,EACVC,6BAA6B,QACxB,uCAAsC;;;AAGtC,SAASC,6BACdC,SAAiB,EACjBC,eAAmC;IAEnC,MAAMC,0BAA0B,IAAIC,OAClCF,wNAAmBH,gCAAAA,EACnB;IAEF,4CAA4C;IAC5C,IAAIE,aAAaE,wBAAwBE,IAAI,CAACJ,YAAY;QACxD,OAAO;IACT;IACA,OAAO;AACT;AAIO,SAASK,iBAAiBC,GAEhC;IACC,MAAMC,KAAKD,IAAIE,OAAO,CAAC,aAAa,IAAI;IACxC,MAAMC,mNAAUZ,aAAAA,EAAWU;IAE3B,OAAOE,YAAY;AACrB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12609, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/server/app-render/action-utils.ts"],"sourcesContent":["import type { ActionManifest } from '../../build/webpack/plugins/flight-client-entry-plugin'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\nimport { pathHasPrefix } from '../../shared/lib/router/utils/path-has-prefix'\nimport { removePathPrefix } from '../../shared/lib/router/utils/remove-path-prefix'\nimport { workAsyncStorage } from './work-async-storage.external'\n\n// This function creates a Flight-acceptable server module map proxy from our\n// Server Reference Manifest similar to our client module map.\n// This is because our manifest contains a lot of internal Next.js data that\n// are relevant to the runtime, workers, etc. that React doesn't need to know.\nexport function createServerModuleMap({\n  serverActionsManifest,\n}: {\n  serverActionsManifest: ActionManifest\n}) {\n  return new Proxy(\n    {},\n    {\n      get: (_, id: string) => {\n        const workers =\n          serverActionsManifest[\n            process.env.NEXT_RUNTIME === 'edge' ? 'edge' : 'node'\n          ]?.[id]?.workers\n\n        if (!workers) {\n          return undefined\n        }\n\n        const workStore = workAsyncStorage.getStore()\n\n        let workerEntry:\n          | { moduleId: string | number; async: boolean }\n          | undefined\n\n        if (workStore) {\n          workerEntry = workers[normalizeWorkerPageName(workStore.page)]\n        } else {\n          // If there's no work store defined, we can assume that a server\n          // module map is needed during module evaluation, e.g. to create a\n          // server action using a higher-order function. Therefore it should be\n          // safe to return any entry from the manifest that matches the action\n          // ID. They all refer to the same module ID, which must also exist in\n          // the current page bundle. TODO: This is currently not guaranteed in\n          // Turbopack, and needs to be fixed.\n          workerEntry = Object.values(workers).at(0)\n        }\n\n        if (!workerEntry) {\n          return undefined\n        }\n\n        const { moduleId, async } = workerEntry\n\n        return { id: moduleId, name: id, chunks: [], async }\n      },\n    }\n  )\n}\n\n/**\n * Checks if the requested action has a worker for the current page.\n * If not, it returns the first worker that has a handler for the action.\n */\nexport function selectWorkerForForwarding(\n  actionId: string,\n  pageName: string,\n  serverActionsManifest: ActionManifest\n) {\n  const workers =\n    serverActionsManifest[\n      process.env.NEXT_RUNTIME === 'edge' ? 'edge' : 'node'\n    ][actionId]?.workers\n  const workerName = normalizeWorkerPageName(pageName)\n\n  // no workers, nothing to forward to\n  if (!workers) return\n\n  // if there is a worker for this page, no need to forward it.\n  if (workers[workerName]) {\n    return\n  }\n\n  // otherwise, grab the first worker that has a handler for this action id\n  return denormalizeWorkerPageName(Object.keys(workers)[0])\n}\n\n/**\n * The flight entry loader keys actions by bundlePath.\n * bundlePath corresponds with the relative path (including 'app') to the page entrypoint.\n */\nfunction normalizeWorkerPageName(pageName: string) {\n  if (pathHasPrefix(pageName, 'app')) {\n    return pageName\n  }\n\n  return 'app' + pageName\n}\n\n/**\n * Converts a bundlePath (relative path to the entrypoint) to a routable page name\n */\nfunction denormalizeWorkerPageName(bundlePath: string) {\n  return normalizeAppPath(removePathPrefix(bundlePath, 'app'))\n}\n"],"names":["normalizeAppPath","pathHasPrefix","removePathPrefix","workAsyncStorage","createServerModuleMap","serverActionsManifest","Proxy","get","_","id","workers","process","env","NEXT_RUNTIME","undefined","workStore","getStore","workerEntry","normalizeWorkerPageName","page","Object","values","at","moduleId","async","name","chunks","selectWorkerForForwarding","actionId","pageName","workerName","denormalizeWorkerPageName","keys","bundlePath"],"mappings":";;;;AACA,SAASA,gBAAgB,QAAQ,0CAAyC;AAC1E,SAASC,aAAa,QAAQ,gDAA+C;AAC7E,SAASC,gBAAgB,QAAQ,mDAAkD;AACnF,SAASC,gBAAgB,QAAQ,gCAA+B;;;;;AAMzD,SAASC,sBAAsB,EACpCC,qBAAqB,EAGtB;IACC,OAAO,IAAIC,MACT,CAAC,GACD;QACEC,KAAK,CAACC,GAAGC;gBAELJ,4BAAAA;YADF,MAAMK,UAAAA,CACJL,0BAAAA,qBAAqB,CACnBM,QAAQC,GAAG,CAACC,YAAY,KAAK,SAAS,0BAAS,OAChD,KAAA,OAAA,KAAA,IAAA,CAFDR,6BAAAA,uBAEG,CAACI,GAAG,KAAA,OAAA,KAAA,IAFPJ,2BAESK,OAAO;YAElB,IAAI,CAACA,SAAS;gBACZ,OAAOI;YACT;YAEA,MAAMC,gRAAYZ,mBAAAA,CAAiBa,QAAQ;YAE3C,IAAIC;YAIJ,IAAIF,WAAW;gBACbE,cAAcP,OAAO,CAACQ,wBAAwBH,UAAUI,IAAI,EAAE;YAChE,OAAO;gBACL,gEAAgE;gBAChE,kEAAkE;gBAClE,sEAAsE;gBACtE,qEAAqE;gBACrE,qEAAqE;gBACrE,qEAAqE;gBACrE,oCAAoC;gBACpCF,cAAcG,OAAOC,MAAM,CAACX,SAASY,EAAE,CAAC;YAC1C;YAEA,IAAI,CAACL,aAAa;gBAChB,OAAOH;YACT;YAEA,MAAM,EAAES,QAAQ,EAAEC,KAAK,EAAE,GAAGP;YAE5B,OAAO;gBAAER,IAAIc;gBAAUE,MAAMhB;gBAAIiB,QAAQ,EAAE;gBAAEF;YAAM;QACrD;IACF;AAEJ;AAMO,SAASG,0BACdC,QAAgB,EAChBC,QAAgB,EAChBxB,qBAAqC;QAGnCA;IADF,MAAMK,UAAAA,CACJL,mCAAAA,qBAAqB,CACnBM,QAAQC,GAAG,CAACC,YAAY,KAAK,SAAS,0BAAS,OAChD,CAACe,SAAS,KAAA,OAAA,KAAA,IAFXvB,iCAEaK,OAAO;IACtB,MAAMoB,aAAaZ,wBAAwBW;IAE3C,oCAAoC;IACpC,IAAI,CAACnB,SAAS;IAEd,6DAA6D;IAC7D,IAAIA,OAAO,CAACoB,WAAW,EAAE;QACvB;IACF;IAEA,yEAAyE;IACzE,OAAOC,0BAA0BX,OAAOY,IAAI,CAACtB,QAAQ,CAAC,EAAE;AAC1D;AAEA;;;CAGC,GACD,SAASQ,wBAAwBW,QAAgB;IAC/C,yMAAI5B,gBAAAA,EAAc4B,UAAU,QAAQ;QAClC,OAAOA;IACT;IAEA,OAAO,QAAQA;AACjB;AAEA;;CAEC,GACD,SAASE,0BAA0BE,UAAkB;IACnD,mMAAOjC,mBAAAA,0MAAiBE,mBAAAA,EAAiB+B,YAAY;AACvD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12687, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/server/lib/server-action-request-meta.ts"],"sourcesContent":["import type { IncomingMessage } from 'http'\nimport type { BaseNextRequest } from '../base-http'\nimport type { NextRequest } from '../web/exports'\nimport { ACTION_HEADER } from '../../client/components/app-router-headers'\n\nexport function getServerActionRequestMetadata(\n  req: IncomingMessage | BaseNextRequest | NextRequest\n): {\n  actionId: string | null\n  isURLEncodedAction: boolean\n  isMultipartAction: boolean\n  isFetchAction: boolean\n  isPossibleServerAction: boolean\n} {\n  let actionId: string | null\n  let contentType: string | null\n\n  if (req.headers instanceof Headers) {\n    actionId = req.headers.get(ACTION_HEADER.toLowerCase()) ?? null\n    contentType = req.headers.get('content-type')\n  } else {\n    actionId = (req.headers[ACTION_HEADER.toLowerCase()] as string) ?? null\n    contentType = req.headers['content-type'] ?? null\n  }\n\n  const isURLEncodedAction = Boolean(\n    req.method === 'POST' && contentType === 'application/x-www-form-urlencoded'\n  )\n  const isMultipartAction = Boolean(\n    req.method === 'POST' && contentType?.startsWith('multipart/form-data')\n  )\n  const isFetchAction = Boolean(\n    actionId !== undefined &&\n      typeof actionId === 'string' &&\n      req.method === 'POST'\n  )\n\n  const isPossibleServerAction = Boolean(\n    isFetchAction || isURLEncodedAction || isMultipartAction\n  )\n\n  return {\n    actionId,\n    isURLEncodedAction,\n    isMultipartAction,\n    isFetchAction,\n    isPossibleServerAction,\n  }\n}\n\nexport function getIsPossibleServerAction(\n  req: IncomingMessage | BaseNextRequest | NextRequest\n): boolean {\n  return getServerActionRequestMetadata(req).isPossibleServerAction\n}\n"],"names":["ACTION_HEADER","getServerActionRequestMetadata","req","actionId","contentType","headers","Headers","get","toLowerCase","isURLEncodedAction","Boolean","method","isMultipartAction","startsWith","isFetchAction","undefined","isPossibleServerAction","getIsPossibleServerAction"],"mappings":";;;;AAGA,SAASA,aAAa,QAAQ,6CAA4C;;AAEnE,SAASC,+BACdC,GAAoD;IAQpD,IAAIC;IACJ,IAAIC;IAEJ,IAAIF,IAAIG,OAAO,YAAYC,SAAS;QAClCH,WAAWD,IAAIG,OAAO,CAACE,GAAG,yLAACP,gBAAAA,CAAcQ,WAAW,OAAO;QAC3DJ,cAAcF,IAAIG,OAAO,CAACE,GAAG,CAAC;IAChC,OAAO;QACLJ,WAAYD,IAAIG,OAAO,yLAACL,gBAAAA,CAAcQ,WAAW,GAAG,IAAe;QACnEJ,cAAcF,IAAIG,OAAO,CAAC,eAAe,IAAI;IAC/C;IAEA,MAAMI,qBAAqBC,QACzBR,IAAIS,MAAM,KAAK,UAAUP,gBAAgB;IAE3C,MAAMQ,oBAAoBF,QACxBR,IAAIS,MAAM,KAAK,UAAA,CAAUP,eAAAA,OAAAA,KAAAA,IAAAA,YAAaS,UAAU,CAAC,sBAAA;IAEnD,MAAMC,gBAAgBJ,QACpBP,aAAaY,aACX,OAAOZ,aAAa,YACpBD,IAAIS,MAAM,KAAK;IAGnB,MAAMK,yBAAyBN,QAC7BI,iBAAiBL,sBAAsBG;IAGzC,OAAO;QACLT;QACAM;QACAG;QACAE;QACAE;IACF;AACF;AAEO,SAASC,0BACdf,GAAoD;IAEpD,OAAOD,+BAA+BC,KAAKc,sBAAsB;AACnE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12722, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/lib/fallback.ts"],"sourcesContent":["/**\n * Describes the different fallback modes that a given page can have.\n */\nexport const enum FallbackMode {\n  /**\n   * A BLOCKING_STATIC_RENDER fallback will block the request until the page is\n   * generated. No fallback page will be rendered, and users will have to wait\n   * to render the page.\n   */\n  BLOCKING_STATIC_RENDER = 'BLOCKING_STATIC_RENDER',\n\n  /**\n   * When set to PRERENDER, a fallback page will be sent to users in place of\n   * forcing them to wait for the page to be generated. This allows the user to\n   * see a rendered page earlier.\n   */\n  PRERENDER = 'PRERENDER',\n\n  /**\n   * When set to NOT_FOUND, pages that are not already prerendered will result\n   * in a not found response.\n   */\n  NOT_FOUND = 'NOT_FOUND',\n}\n\n/**\n * The fallback value returned from the `getStaticPaths` function.\n */\nexport type GetStaticPathsFallback = boolean | 'blocking'\n\n/**\n * Parses the fallback field from the prerender manifest.\n *\n * @param fallbackField The fallback field from the prerender manifest.\n * @returns The fallback mode.\n */\nexport function parseFallbackField(\n  fallbackField: string | boolean | null | undefined\n): FallbackMode | undefined {\n  if (typeof fallbackField === 'string') {\n    return FallbackMode.PRERENDER\n  } else if (fallbackField === null) {\n    return FallbackMode.BLOCKING_STATIC_RENDER\n  } else if (fallbackField === false) {\n    return FallbackMode.NOT_FOUND\n  } else if (fallbackField === undefined) {\n    return undefined\n  } else {\n    throw new Error(\n      `Invalid fallback option: ${fallbackField}. Fallback option must be a string, null, undefined, or false.`\n    )\n  }\n}\n\nexport function fallbackModeToFallbackField(\n  fallback: FallbackMode,\n  page: string | undefined\n): string | false | null {\n  switch (fallback) {\n    case FallbackMode.BLOCKING_STATIC_RENDER:\n      return null\n    case FallbackMode.NOT_FOUND:\n      return false\n    case FallbackMode.PRERENDER:\n      if (!page) {\n        throw new Error(\n          `Invariant: expected a page to be provided when fallback mode is \"${fallback}\"`\n        )\n      }\n\n      return page\n    default:\n      throw new Error(`Invalid fallback mode: ${fallback}`)\n  }\n}\n\n/**\n * Parses the fallback from the static paths result.\n *\n * @param result The result from the static paths function.\n * @returns The fallback mode.\n */\nexport function parseStaticPathsResult(\n  result: GetStaticPathsFallback\n): FallbackMode {\n  if (result === true) {\n    return FallbackMode.PRERENDER\n  } else if (result === 'blocking') {\n    return FallbackMode.BLOCKING_STATIC_RENDER\n  } else {\n    return FallbackMode.NOT_FOUND\n  }\n}\n"],"names":["FallbackMode","parseFallbackField","fallbackField","undefined","Error","fallbackModeToFallbackField","fallback","page","parseStaticPathsResult","result"],"mappings":"AAAA;;CAEC,GACD;;;;;;AAAO,IAAWA,eAAAA,WAAAA,GAAAA,SAAAA,YAAAA;IAChB;;;;GAIC,GAAA,YAAA,CAAA,yBAAA,GAAA;IAGD;;;;GAIC,GAAA,YAAA,CAAA,YAAA,GAAA;IAGD;;;GAGC,GAAA,YAAA,CAAA,YAAA,GAAA;WAlBeA;MAoBjB;AAaM,SAASC,mBACdC,aAAkD;IAElD,IAAI,OAAOA,kBAAkB,UAAU;QACrC,OAAA;IACF,OAAO,IAAIA,kBAAkB,MAAM;QACjC,OAAA;IACF,OAAO,IAAIA,kBAAkB,OAAO;QAClC,OAAA;IACF,OAAO,IAAIA,kBAAkBC,WAAW;QACtC,OAAOA;IACT,OAAO;QACL,MAAM,OAAA,cAEL,CAFK,IAAIC,MACR,CAAC,yBAAyB,EAAEF,cAAc,8DAA8D,CAAC,GADrG,qBAAA;mBAAA;wBAAA;0BAAA;QAEN;IACF;AACF;AAEO,SAASG,4BACdC,QAAsB,EACtBC,IAAwB;IAExB,OAAQD;QACN,KAAA;YACE,OAAO;QACT,KAAA;YACE,OAAO;QACT,KAAA;YACE,IAAI,CAACC,MAAM;gBACT,MAAM,OAAA,cAEL,CAFK,IAAIH,MACR,CAAC,iEAAiE,EAAEE,SAAS,CAAC,CAAC,GAD3E,qBAAA;2BAAA;gCAAA;kCAAA;gBAEN;YACF;YAEA,OAAOC;QACT;YACE,MAAM,OAAA,cAA+C,CAA/C,IAAIH,MAAM,CAAC,uBAAuB,EAAEE,UAAU,GAA9C,qBAAA;uBAAA;4BAAA;8BAAA;YAA8C;IACxD;AACF;AAQO,SAASE,uBACdC,MAA8B;IAE9B,IAAIA,WAAW,MAAM;QACnB,OAAA;IACF,OAAO,IAAIA,WAAW,YAAY;QAChC,OAAA;IACF,OAAO;QACL,OAAA;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12800, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/server/lib/etag.ts"],"sourcesContent":["/**\n * FNV-1a Hash implementation\n * @author Travis Webb (tjwebb) <me@traviswebb.com>\n *\n * Ported from https://github.com/tjwebb/fnv-plus/blob/master/index.js\n *\n * Simplified, optimized and add modified for 52 bit, which provides a larger hash space\n * and still making use of Javascript's 53-bit integer space.\n */\nexport const fnv1a52 = (str: string) => {\n  const len = str.length\n  let i = 0,\n    t0 = 0,\n    v0 = 0x2325,\n    t1 = 0,\n    v1 = 0x8422,\n    t2 = 0,\n    v2 = 0x9ce4,\n    t3 = 0,\n    v3 = 0xcbf2\n\n  while (i < len) {\n    v0 ^= str.charCodeAt(i++)\n    t0 = v0 * 435\n    t1 = v1 * 435\n    t2 = v2 * 435\n    t3 = v3 * 435\n    t2 += v0 << 8\n    t3 += v1 << 8\n    t1 += t0 >>> 16\n    v0 = t0 & 65535\n    t2 += t1 >>> 16\n    v1 = t1 & 65535\n    v3 = (t3 + (t2 >>> 16)) & 65535\n    v2 = t2 & 65535\n  }\n\n  return (\n    (v3 & 15) * 281474976710656 +\n    v2 * 4294967296 +\n    v1 * 65536 +\n    (v0 ^ (v3 >> 4))\n  )\n}\n\nexport const generateETag = (payload: string, weak = false) => {\n  const prefix = weak ? 'W/\"' : '\"'\n  return (\n    prefix + fnv1a52(payload).toString(36) + payload.length.toString(36) + '\"'\n  )\n}\n"],"names":["fnv1a52","str","len","length","i","t0","v0","t1","v1","t2","v2","t3","v3","charCodeAt","generateETag","payload","weak","prefix","toString"],"mappings":"AAAA;;;;;;;;CAQC,GACD;;;;AAAO,MAAMA,UAAU,CAACC;IACtB,MAAMC,MAAMD,IAAIE,MAAM;IACtB,IAAIC,IAAI,GACNC,KAAK,GACLC,KAAK,QACLC,KAAK,GACLC,KAAK,QACLC,KAAK,GACLC,KAAK,QACLC,KAAK,GACLC,KAAK;IAEP,MAAOR,IAAIF,IAAK;QACdI,MAAML,IAAIY,UAAU,CAACT;QACrBC,KAAKC,KAAK;QACVC,KAAKC,KAAK;QACVC,KAAKC,KAAK;QACVC,KAAKC,KAAK;QACVH,MAAMH,MAAM;QACZK,MAAMH,MAAM;QACZD,MAAMF,OAAO;QACbC,KAAKD,KAAK;QACVI,MAAMF,OAAO;QACbC,KAAKD,KAAK;QACVK,KAAMD,KAAMF,CAAAA,OAAO,EAAC,IAAM;QAC1BC,KAAKD,KAAK;IACZ;IAEA,OACGG,CAAAA,KAAK,EAAC,IAAK,kBACZF,KAAK,aACLF,KAAK,QACJF,CAAAA,KAAMM,MAAM,CAAC;AAElB,EAAC;AAEM,MAAME,eAAe,CAACC,SAAiBC,OAAO,KAAK;IACxD,MAAMC,SAASD,OAAO,QAAQ;IAC9B,OACEC,SAASjB,QAAQe,SAASG,QAAQ,CAAC,MAAMH,QAAQZ,MAAM,CAACe,QAAQ,CAAC,MAAM;AAE3E,EAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12841, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/compiled/fresh/index.js"],"sourcesContent":["(()=>{\"use strict\";var e={695:e=>{\n/*!\n * fresh\n * Copyright(c) 2012 TJ Holowaychuk\n * Copyright(c) 2016-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\nvar r=/(?:^|,)\\s*?no-cache\\s*?(?:,|$)/;e.exports=fresh;function fresh(e,a){var t=e[\"if-modified-since\"];var s=e[\"if-none-match\"];if(!t&&!s){return false}var i=e[\"cache-control\"];if(i&&r.test(i)){return false}if(s&&s!==\"*\"){var f=a[\"etag\"];if(!f){return false}var n=true;var u=parseTokenList(s);for(var _=0;_<u.length;_++){var o=u[_];if(o===f||o===\"W/\"+f||\"W/\"+o===f){n=false;break}}if(n){return false}}if(t){var p=a[\"last-modified\"];var v=!p||!(parseHttpDate(p)<=parseHttpDate(t));if(v){return false}}return true}function parseHttpDate(e){var r=e&&Date.parse(e);return typeof r===\"number\"?r:NaN}function parseTokenList(e){var r=0;var a=[];var t=0;for(var s=0,i=e.length;s<i;s++){switch(e.charCodeAt(s)){case 32:if(t===r){t=r=s+1}break;case 44:a.push(e.substring(t,r));t=r=s+1;break;default:r=s+1;break}}a.push(e.substring(t,r));return a}}};var r={};function __nccwpck_require__(a){var t=r[a];if(t!==undefined){return t.exports}var s=r[a]={exports:{}};var i=true;try{e[a](s,s.exports,__nccwpck_require__);i=false}finally{if(i)delete r[a]}return s.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var a=__nccwpck_require__(695);module.exports=a})();"],"names":[],"mappings":"AAAA,CAAC;IAAK;IAAa,IAAI,IAAE;QAAC,KAAI,CAAA;YAC9B;;;;;CAKC,GACD,IAAI,IAAE;YAAiC,EAAE,OAAO,GAAC;YAAM,SAAS,MAAM,CAAC,EAAC,CAAC;gBAAE,IAAI,IAAE,CAAC,CAAC,oBAAoB;gBAAC,IAAI,IAAE,CAAC,CAAC,gBAAgB;gBAAC,IAAG,CAAC,KAAG,CAAC,GAAE;oBAAC,OAAO;gBAAK;gBAAC,IAAI,IAAE,CAAC,CAAC,gBAAgB;gBAAC,IAAG,KAAG,EAAE,IAAI,CAAC,IAAG;oBAAC,OAAO;gBAAK;gBAAC,IAAG,KAAG,MAAI,KAAI;oBAAC,IAAI,IAAE,CAAC,CAAC,OAAO;oBAAC,IAAG,CAAC,GAAE;wBAAC,OAAO;oBAAK;oBAAC,IAAI,IAAE;oBAAK,IAAI,IAAE,eAAe;oBAAG,IAAI,IAAI,IAAE,GAAE,IAAE,EAAE,MAAM,EAAC,IAAI;wBAAC,IAAI,IAAE,CAAC,CAAC,EAAE;wBAAC,IAAG,MAAI,KAAG,MAAI,OAAK,KAAG,OAAK,MAAI,GAAE;4BAAC,IAAE;4BAAM;wBAAK;oBAAC;oBAAC,IAAG,GAAE;wBAAC,OAAO;oBAAK;gBAAC;gBAAC,IAAG,GAAE;oBAAC,IAAI,IAAE,CAAC,CAAC,gBAAgB;oBAAC,IAAI,IAAE,CAAC,KAAG,CAAC,CAAC,cAAc,MAAI,cAAc,EAAE;oBAAE,IAAG,GAAE;wBAAC,OAAO;oBAAK;gBAAC;gBAAC,OAAO;YAAI;YAAC,SAAS,cAAc,CAAC;gBAAE,IAAI,IAAE,KAAG,KAAK,KAAK,CAAC;gBAAG,OAAO,OAAO,MAAI,WAAS,IAAE;YAAG;YAAC,SAAS,eAAe,CAAC;gBAAE,IAAI,IAAE;gBAAE,IAAI,IAAE,EAAE;gBAAC,IAAI,IAAE;gBAAE,IAAI,IAAI,IAAE,GAAE,IAAE,EAAE,MAAM,EAAC,IAAE,GAAE,IAAI;oBAAC,OAAO,EAAE,UAAU,CAAC;wBAAI,KAAK;4BAAG,IAAG,MAAI,GAAE;gCAAC,IAAE,IAAE,IAAE;4BAAC;4BAAC;wBAAM,KAAK;4BAAG,EAAE,IAAI,CAAC,EAAE,SAAS,CAAC,GAAE;4BAAI,IAAE,IAAE,IAAE;4BAAE;wBAAM;4BAAQ,IAAE,IAAE;4BAAE;oBAAK;gBAAC;gBAAC,EAAE,IAAI,CAAC,EAAE,SAAS,CAAC,GAAE;gBAAI,OAAO;YAAC;QAAC;IAAC;IAAE,IAAI,IAAE,CAAC;IAAE,SAAS,oBAAoB,CAAC;QAAE,IAAI,IAAE,CAAC,CAAC,EAAE;QAAC,IAAG,MAAI,WAAU;YAAC,OAAO,EAAE,OAAO;QAAA;QAAC,IAAI,IAAE,CAAC,CAAC,EAAE,GAAC;YAAC,SAAQ,CAAC;QAAC;QAAE,IAAI,IAAE;QAAK,IAAG;YAAC,CAAC,CAAC,EAAE,CAAC,GAAE,EAAE,OAAO,EAAC;YAAqB,IAAE;QAAK,SAAQ;YAAC,IAAG,GAAE,OAAO,CAAC,CAAC,EAAE;QAAA;QAAC,OAAO,EAAE,OAAO;IAAA;IAAC,IAAG,OAAO,wBAAsB,aAAY,oBAAoB,EAAE,GAAC,kFAAU;IAAI,IAAI,IAAE,oBAAoB;IAAK,OAAO,OAAO,GAAC;AAAC,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12944, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/server/lib/cache-control.ts"],"sourcesContent":["import { CACHE_ONE_YEAR } from '../../lib/constants'\n\n/**\n * The revalidate option used internally for pages. A value of `false` means\n * that the page should not be revalidated. A number means that the page\n * should be revalidated after the given number of seconds (this also includes\n * `1` which means to revalidate after 1 second). A value of `0` is not a valid\n * value for this option.\n */\nexport type Revalidate = number | false\n\nexport interface CacheControl {\n  revalidate: Revalidate\n  expire: number | undefined\n}\n\nexport function getCacheControlHeader({\n  revalidate,\n  expire,\n}: CacheControl): string {\n  const swrHeader =\n    typeof revalidate === 'number' &&\n    expire !== undefined &&\n    revalidate < expire\n      ? `, stale-while-revalidate=${expire - revalidate}`\n      : ''\n\n  if (revalidate === 0) {\n    return 'private, no-cache, no-store, max-age=0, must-revalidate'\n  } else if (typeof revalidate === 'number') {\n    return `s-maxage=${revalidate}${swrHeader}`\n  }\n\n  return `s-maxage=${CACHE_ONE_YEAR}${swrHeader}`\n}\n"],"names":["CACHE_ONE_YEAR","getCacheControlHeader","revalidate","expire","swrHeader","undefined"],"mappings":";;;AAAA,SAASA,cAAc,QAAQ,sBAAqB;;AAgB7C,SAASC,sBAAsB,EACpCC,UAAU,EACVC,MAAM,EACO;IACb,MAAMC,YACJ,OAAOF,eAAe,YACtBC,WAAWE,aACXH,aAAaC,SACT,CAAC,yBAAyB,EAAEA,SAASD,YAAY,GACjD;IAEN,IAAIA,eAAe,GAAG;QACpB,OAAO;IACT,OAAO,IAAI,OAAOA,eAAe,UAAU;QACzC,OAAO,CAAC,SAAS,EAAEA,aAAaE,WAAW;IAC7C;IAEA,OAAO,CAAC,SAAS,0JAAEJ,iBAAAA,GAAiBI,WAAW;AACjD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12962, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/server/send-payload.ts"],"sourcesContent":["import type { IncomingMessage, ServerResponse } from 'http'\nimport type RenderResult from './render-result'\nimport type { CacheControl } from './lib/cache-control'\n\nimport { isResSent } from '../shared/lib/utils'\nimport { generateETag } from './lib/etag'\nimport fresh from 'next/dist/compiled/fresh'\nimport { getCacheControlHeader } from './lib/cache-control'\nimport { RSC_CONTENT_TYPE_HEADER } from '../client/components/app-router-headers'\n\nexport function sendEtagResponse(\n  req: IncomingMessage,\n  res: ServerResponse,\n  etag: string | undefined\n): boolean {\n  if (etag) {\n    /**\n     * The server generating a 304 response MUST generate any of the\n     * following header fields that would have been sent in a 200 (OK)\n     * response to the same request: Cache-Control, Content-Location, Date,\n     * ETag, Expires, and Vary. https://tools.ietf.org/html/rfc7232#section-4.1\n     */\n    res.setHeader('ETag', etag)\n  }\n\n  if (fresh(req.headers, { etag })) {\n    res.statusCode = 304\n    res.end()\n    return true\n  }\n\n  return false\n}\n\nexport async function sendRenderResult({\n  req,\n  res,\n  result,\n  type,\n  generateEtags,\n  poweredByHeader,\n  cacheControl,\n}: {\n  req: IncomingMessage\n  res: ServerResponse\n  result: RenderResult\n  type: 'html' | 'json' | 'rsc'\n  generateEtags: boolean\n  poweredByHeader: boolean\n  cacheControl: CacheControl | undefined\n}): Promise<void> {\n  if (isResSent(res)) {\n    return\n  }\n\n  if (poweredByHeader && type === 'html') {\n    res.setHeader('X-Powered-By', 'Next.js')\n  }\n\n  // If cache control is already set on the response we don't\n  // override it to allow users to customize it via next.config\n  if (cacheControl && !res.getHeader('Cache-Control')) {\n    res.setHeader('Cache-Control', getCacheControlHeader(cacheControl))\n  }\n\n  const payload = result.isDynamic ? null : result.toUnchunkedString()\n\n  if (generateEtags && payload !== null) {\n    const etag = generateETag(payload)\n    if (sendEtagResponse(req, res, etag)) {\n      return\n    }\n  }\n\n  if (!res.getHeader('Content-Type')) {\n    res.setHeader(\n      'Content-Type',\n      result.contentType\n        ? result.contentType\n        : type === 'rsc'\n          ? RSC_CONTENT_TYPE_HEADER\n          : type === 'json'\n            ? 'application/json'\n            : 'text/html; charset=utf-8'\n    )\n  }\n\n  if (payload) {\n    res.setHeader('Content-Length', Buffer.byteLength(payload))\n  }\n\n  if (req.method === 'HEAD') {\n    res.end(null)\n    return\n  }\n\n  if (payload !== null) {\n    res.end(payload)\n    return\n  }\n\n  // Pipe the render result to the response after we get a writer for it.\n  await result.pipeToNodeResponse(res)\n}\n"],"names":["isResSent","generateETag","fresh","getCacheControlHeader","RSC_CONTENT_TYPE_HEADER","sendEtagResponse","req","res","etag","setHeader","headers","statusCode","end","sendRenderResult","result","type","generateEtags","poweredByHeader","cacheControl","getHeader","payload","isDynamic","toUnchunkedString","contentType","Buffer","byteLength","method","pipeToNodeResponse"],"mappings":";;;;AAIA,SAASA,SAAS,QAAQ,sBAAqB;AAC/C,SAASC,YAAY,QAAQ,aAAY;AACzC,OAAOC,WAAW,2BAA0B;AAC5C,SAASC,qBAAqB,QAAQ,sBAAqB;AAC3D,SAASC,uBAAuB,QAAQ,0CAAyC;;;;;;AAE1E,SAASC,iBACdC,GAAoB,EACpBC,GAAmB,EACnBC,IAAwB;IAExB,IAAIA,MAAM;QACR;;;;;KAKC,GACDD,IAAIE,SAAS,CAAC,QAAQD;IACxB;IAEA,mKAAIN,UAAAA,EAAMI,IAAII,OAAO,EAAE;QAAEF;IAAK,IAAI;QAChCD,IAAII,UAAU,GAAG;QACjBJ,IAAIK,GAAG;QACP,OAAO;IACT;IAEA,OAAO;AACT;AAEO,eAAeC,iBAAiB,EACrCP,GAAG,EACHC,GAAG,EACHO,MAAM,EACNC,IAAI,EACJC,aAAa,EACbC,eAAe,EACfC,YAAY,EASb;IACC,sKAAIlB,YAAAA,EAAUO,MAAM;QAClB;IACF;IAEA,IAAIU,mBAAmBF,SAAS,QAAQ;QACtCR,IAAIE,SAAS,CAAC,gBAAgB;IAChC;IAEA,2DAA2D;IAC3D,6DAA6D;IAC7D,IAAIS,gBAAgB,CAACX,IAAIY,SAAS,CAAC,kBAAkB;QACnDZ,IAAIE,SAAS,CAAC,8LAAiBN,wBAAAA,EAAsBe;IACvD;IAEA,MAAME,UAAUN,OAAOO,SAAS,GAAG,OAAOP,OAAOQ,iBAAiB;IAElE,IAAIN,iBAAiBI,YAAY,MAAM;QACrC,MAAMZ,wKAAOP,eAAAA,EAAamB;QAC1B,IAAIf,iBAAiBC,KAAKC,KAAKC,OAAO;YACpC;QACF;IACF;IAEA,IAAI,CAACD,IAAIY,SAAS,CAAC,iBAAiB;QAClCZ,IAAIE,SAAS,CACX,gBACAK,OAAOS,WAAW,GACdT,OAAOS,WAAW,GAClBR,SAAS,gMACPX,0BAAAA,GACAW,SAAS,SACP,qBACA;IAEZ;IAEA,IAAIK,SAAS;QACXb,IAAIE,SAAS,CAAC,kBAAkBe,OAAOC,UAAU,CAACL;IACpD;IAEA,IAAId,IAAIoB,MAAM,KAAK,QAAQ;QACzBnB,IAAIK,GAAG,CAAC;QACR;IACF;IAEA,IAAIQ,YAAY,MAAM;QACpBb,IAAIK,GAAG,CAACQ;QACR;IACF;IAEA,uEAAuE;IACvE,MAAMN,OAAOa,kBAAkB,CAACpB;AAClC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 13040, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/juan_/Downloads/full-stack-process/full-stack-process/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport type { IncomingMessage, ServerResponse } from 'node:http'\n\nimport {\n  AppPageRouteModule,\n  type AppPageRouteHandlerContext,\n} from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\n\nimport { RouteKind } from '../../server/route-kind' with { 'turbopack-transition': 'next-server-utility' }\n\nimport { getRevalidateReason } from '../../server/instrumentation/utils'\nimport { getTracer, SpanKind, type Span } from '../../server/lib/trace/tracer'\nimport { getRequestMeta } from '../../server/request-meta'\nimport { BaseServerSpan } from '../../server/lib/trace/constants'\nimport { interopDefault } from '../../server/app-render/interop-default'\nimport { NodeNextRequest, NodeNextResponse } from '../../server/base-http/node'\nimport { checkIsAppPPREnabled } from '../../server/lib/experimental/ppr'\nimport {\n  getFallbackRouteParams,\n  type FallbackRouteParams,\n} from '../../server/request/fallback-params'\nimport { setReferenceManifestsSingleton } from '../../server/app-render/encryption-utils'\nimport {\n  isHtmlBotRequest,\n  shouldServeStreamingMetadata,\n} from '../../server/lib/streaming-metadata'\nimport { createServerModuleMap } from '../../server/app-render/action-utils'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\nimport { getIsPossibleServerAction } from '../../server/lib/server-action-request-meta'\nimport {\n  RSC_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_IS_PRERENDER_HEADER,\n  NEXT_DID_POSTPONE_HEADER,\n} from '../../client/components/app-router-headers'\nimport { getBotType, isBot } from '../../shared/lib/router/utils/is-bot'\nimport {\n  CachedRouteKind,\n  type CachedAppPageValue,\n  type CachedPageValue,\n  type ResponseCacheEntry,\n  type ResponseGenerator,\n} from '../../server/response-cache'\nimport { FallbackMode, parseFallbackField } from '../../lib/fallback'\nimport RenderResult from '../../server/render-result'\nimport { CACHE_ONE_YEAR, NEXT_CACHE_TAGS_HEADER } from '../../lib/constants'\nimport type { CacheControl } from '../../server/lib/cache-control'\nimport { ENCODED_TAGS } from '../../server/stream-utils/encoded-tags'\nimport { sendRenderResult } from '../../server/send-payload'\nimport { NoFallbackError } from '../../shared/lib/no-fallback-error.external'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nimport GlobalError from 'VAR_MODULE_GLOBAL_ERROR' with { 'turbopack-transition': 'next-server-utility' }\n\nexport { GlobalError }\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: (id: string | number) => unknown\ndeclare const __next_app_load_chunk__: (id: string | number) => Promise<unknown>\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nimport * as entryBase from '../../server/app-render/entry-base' with { 'turbopack-transition': 'next-server-utility' }\nimport { RedirectStatusCode } from '../../client/components/redirect-status-code'\n\nexport * from '../../server/app-render/entry-base' with { 'turbopack-transition': 'next-server-utility' }\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n  distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n  projectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n})\n\nexport async function handler(\n  req: IncomingMessage,\n  res: ServerResponse,\n  ctx: {\n    waitUntil: (prom: Promise<void>) => void\n  }\n) {\n  let srcPage = 'VAR_DEFINITION_PAGE'\n\n  // turbopack doesn't normalize `/index` in the page name\n  // so we need to to process dynamic routes properly\n  // TODO: fix turbopack providing differing value from webpack\n  if (process.env.TURBOPACK) {\n    srcPage = srcPage.replace(/\\/index$/, '') || '/'\n  } else if (srcPage === '/index') {\n    // we always normalize /index specifically\n    srcPage = '/'\n  }\n  const multiZoneDraftMode = process.env\n    .__NEXT_MULTI_ZONE_DRAFT_MODE as any as boolean\n\n  const initialPostponed = getRequestMeta(req, 'postponed')\n  // TODO: replace with more specific flags\n  const minimalMode = getRequestMeta(req, 'minimalMode')\n\n  const prepareResult = await routeModule.prepare(req, res, {\n    srcPage,\n    multiZoneDraftMode,\n  })\n\n  if (!prepareResult) {\n    res.statusCode = 400\n    res.end('Bad Request')\n    ctx.waitUntil?.(Promise.resolve())\n    return null\n  }\n\n  const {\n    buildId,\n    query,\n    params,\n    parsedUrl,\n    pageIsDynamic,\n    buildManifest,\n    nextFontManifest,\n    reactLoadableManifest,\n    serverActionsManifest,\n    clientReferenceManifest,\n    subresourceIntegrityManifest,\n    prerenderManifest,\n    isDraftMode,\n    resolvedPathname,\n    revalidateOnlyGenerated,\n    routerServerContext,\n    nextConfig,\n  } = prepareResult\n\n  const pathname = parsedUrl.pathname || '/'\n  const normalizedSrcPage = normalizeAppPath(srcPage)\n\n  let { isOnDemandRevalidate } = prepareResult\n\n  const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage]\n  const isPrerendered = prerenderManifest.routes[resolvedPathname]\n\n  let isSSG = Boolean(\n    prerenderInfo ||\n      isPrerendered ||\n      prerenderManifest.routes[normalizedSrcPage]\n  )\n\n  const userAgent = req.headers['user-agent'] || ''\n  const botType = getBotType(userAgent)\n  const isHtmlBot = isHtmlBotRequest(req)\n\n  /**\n   * If true, this indicates that the request being made is for an app\n   * prefetch request.\n   */\n  const isPrefetchRSCRequest =\n    getRequestMeta(req, 'isPrefetchRSCRequest') ??\n    Boolean(req.headers[NEXT_ROUTER_PREFETCH_HEADER])\n\n  // NOTE: Don't delete headers[RSC] yet, it still needs to be used in renderToHTML later\n\n  const isRSCRequest =\n    getRequestMeta(req, 'isRSCRequest') ?? Boolean(req.headers[RSC_HEADER])\n\n  const isPossibleServerAction = getIsPossibleServerAction(req)\n\n  /**\n   * If the route being rendered is an app page, and the ppr feature has been\n   * enabled, then the given route _could_ support PPR.\n   */\n  const couldSupportPPR: boolean = checkIsAppPPREnabled(\n    nextConfig.experimental.ppr\n  )\n\n  // When enabled, this will allow the use of the `?__nextppronly` query to\n  // enable debugging of the static shell.\n  const hasDebugStaticShellQuery =\n    process.env.__NEXT_EXPERIMENTAL_STATIC_SHELL_DEBUGGING === '1' &&\n    typeof query.__nextppronly !== 'undefined' &&\n    couldSupportPPR\n\n  // When enabled, this will allow the use of the `?__nextppronly` query\n  // to enable debugging of the fallback shell.\n  const hasDebugFallbackShellQuery =\n    hasDebugStaticShellQuery && query.__nextppronly === 'fallback'\n\n  // This page supports PPR if it is marked as being `PARTIALLY_STATIC` in the\n  // prerender manifest and this is an app page.\n  const isRoutePPREnabled: boolean =\n    couldSupportPPR &&\n    ((\n      prerenderManifest.routes[normalizedSrcPage] ??\n      prerenderManifest.dynamicRoutes[normalizedSrcPage]\n    )?.renderingMode === 'PARTIALLY_STATIC' ||\n      // Ideally we'd want to check the appConfig to see if this page has PPR\n      // enabled or not, but that would require plumbing the appConfig through\n      // to the server during development. We assume that the page supports it\n      // but only during development.\n      (hasDebugStaticShellQuery &&\n        (routeModule.isDev === true ||\n          routerServerContext?.experimentalTestProxy === true)))\n\n  const isDebugStaticShell: boolean =\n    hasDebugStaticShellQuery && isRoutePPREnabled\n\n  // We should enable debugging dynamic accesses when the static shell\n  // debugging has been enabled and we're also in development mode.\n  const isDebugDynamicAccesses =\n    isDebugStaticShell && routeModule.isDev === true\n\n  const isDebugFallbackShell = hasDebugFallbackShellQuery && isRoutePPREnabled\n\n  // If we're in minimal mode, then try to get the postponed information from\n  // the request metadata. If available, use it for resuming the postponed\n  // render.\n  const minimalPostponed = isRoutePPREnabled ? initialPostponed : undefined\n\n  // If PPR is enabled, and this is a RSC request (but not a prefetch), then\n  // we can use this fact to only generate the flight data for the request\n  // because we can't cache the HTML (as it's also dynamic).\n  const isDynamicRSCRequest =\n    isRoutePPREnabled && isRSCRequest && !isPrefetchRSCRequest\n\n  // Need to read this before it's stripped by stripFlightHeaders. We don't\n  // need to transfer it to the request meta because it's only read\n  // within this function; the static segment data should have already been\n  // generated, so we will always either return a static response or a 404.\n  const segmentPrefetchHeader = getRequestMeta(req, 'segmentPrefetchRSCRequest')\n\n  // TODO: investigate existing bug with shouldServeStreamingMetadata always\n  // being true for a revalidate due to modifying the base-server this.renderOpts\n  // when fixing this to correct logic it causes hydration issue since we set\n  // serveStreamingMetadata to true during export\n  let serveStreamingMetadata = !userAgent\n    ? true\n    : shouldServeStreamingMetadata(userAgent, nextConfig.htmlLimitedBots)\n\n  if (isHtmlBot && isRoutePPREnabled) {\n    isSSG = false\n    serveStreamingMetadata = false\n  }\n\n  // In development, we always want to generate dynamic HTML.\n  let supportsDynamicResponse: boolean =\n    // If we're in development, we always support dynamic HTML, unless it's\n    // a data request, in which case we only produce static HTML.\n    routeModule.isDev === true ||\n    // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isSSG ||\n    // If this request has provided postponed data, it supports dynamic\n    // HTML.\n    typeof initialPostponed === 'string' ||\n    // If this is a dynamic RSC request, then this render supports dynamic\n    // HTML (it's dynamic).\n    isDynamicRSCRequest\n\n  // When html bots request PPR page, perform the full dynamic rendering.\n  const shouldWaitOnAllReady = isHtmlBot && isRoutePPREnabled\n\n  let ssgCacheKey: string | null = null\n  if (\n    !isDraftMode &&\n    isSSG &&\n    !supportsDynamicResponse &&\n    !isPossibleServerAction &&\n    !minimalPostponed &&\n    !isDynamicRSCRequest\n  ) {\n    ssgCacheKey = resolvedPathname\n  }\n\n  // the staticPathKey differs from ssgCacheKey since\n  // ssgCacheKey is null in dev since we're always in \"dynamic\"\n  // mode in dev to bypass the cache, but we still need to honor\n  // dynamicParams = false in dev mode\n  let staticPathKey = ssgCacheKey\n  if (!staticPathKey && routeModule.isDev) {\n    staticPathKey = resolvedPathname\n  }\n\n  const ComponentMod = {\n    ...entryBase,\n    tree,\n    pages,\n    GlobalError,\n    handler,\n    routeModule,\n    __next_app__,\n  }\n\n  // Before rendering (which initializes component tree modules), we have to\n  // set the reference manifests to our global store so Server Action's\n  // encryption util can access to them at the top level of the page module.\n  if (serverActionsManifest && clientReferenceManifest) {\n    setReferenceManifestsSingleton({\n      page: srcPage,\n      clientReferenceManifest,\n      serverActionsManifest,\n      serverModuleMap: createServerModuleMap({\n        serverActionsManifest,\n      }),\n    })\n  }\n\n  const method = req.method || 'GET'\n  const tracer = getTracer()\n  const activeSpan = tracer.getActiveScopeSpan()\n\n  try {\n    const invokeRouteModule = async (\n      span: Span | undefined,\n      context: AppPageRouteHandlerContext\n    ) => {\n      const nextReq = new NodeNextRequest(req)\n      const nextRes = new NodeNextResponse(res)\n\n      // TODO: adapt for putting the RDC inside the postponed data\n      // If we're in dev, and this isn't a prefetch or a server action,\n      // we should seed the resume data cache.\n      if (process.env.NODE_ENV === 'development') {\n        if (\n          nextConfig.experimental.dynamicIO &&\n          !isPrefetchRSCRequest &&\n          !context.renderOpts.isPossibleServerAction\n        ) {\n          const warmup = await routeModule.warmup(nextReq, nextRes, context)\n\n          // If the warmup is successful, we should use the resume data\n          // cache from the warmup.\n          if (warmup.metadata.renderResumeDataCache) {\n            context.renderOpts.renderResumeDataCache =\n              warmup.metadata.renderResumeDataCache\n          }\n        }\n      }\n\n      return routeModule.render(nextReq, nextRes, context).finally(() => {\n        if (!span) return\n\n        span.setAttributes({\n          'http.status_code': res.statusCode,\n          'next.rsc': false,\n        })\n\n        const rootSpanAttributes = tracer.getRootSpanAttributes()\n        // We were unable to get attributes, probably OTEL is not enabled\n        if (!rootSpanAttributes) {\n          return\n        }\n\n        if (\n          rootSpanAttributes.get('next.span_type') !==\n          BaseServerSpan.handleRequest\n        ) {\n          console.warn(\n            `Unexpected root span type '${rootSpanAttributes.get(\n              'next.span_type'\n            )}'. Please report this Next.js issue https://github.com/vercel/next.js`\n          )\n          return\n        }\n\n        const route = rootSpanAttributes.get('next.route')\n        if (route) {\n          const name = `${method} ${route}`\n\n          span.setAttributes({\n            'next.route': route,\n            'http.route': route,\n            'next.span_name': name,\n          })\n          span.updateName(name)\n        } else {\n          span.updateName(`${method} ${req.url}`)\n        }\n      })\n    }\n\n    const doRender = async ({\n      span,\n      postponed,\n      fallbackRouteParams,\n    }: {\n      span?: Span\n      /**\n       * The postponed data for this render. This is only provided when resuming\n       * a render that has been postponed.\n       */\n      postponed: string | undefined\n\n      /**\n       * The unknown route params for this render.\n       */\n      fallbackRouteParams: FallbackRouteParams | null\n    }): Promise<ResponseCacheEntry> => {\n      const context: AppPageRouteHandlerContext = {\n        query,\n        params,\n        page: normalizedSrcPage,\n        sharedContext: {\n          buildId,\n        },\n        serverComponentsHmrCache: getRequestMeta(\n          req,\n          'serverComponentsHmrCache'\n        ),\n        fallbackRouteParams,\n        renderOpts: {\n          App: () => null,\n          Document: () => null,\n          pageConfig: {},\n          ComponentMod,\n          Component: interopDefault(ComponentMod),\n\n          params,\n          routeModule,\n          page: srcPage,\n          postponed,\n          shouldWaitOnAllReady,\n          serveStreamingMetadata,\n          supportsDynamicResponse:\n            typeof postponed === 'string' || supportsDynamicResponse,\n          buildManifest,\n          nextFontManifest,\n          reactLoadableManifest,\n          subresourceIntegrityManifest,\n          serverActionsManifest,\n          clientReferenceManifest,\n          setIsrStatus: routerServerContext?.setIsrStatus,\n\n          dir: routeModule.projectDir,\n          isDraftMode,\n          isRevalidate: isSSG && !postponed && !isDynamicRSCRequest,\n          botType,\n          isOnDemandRevalidate,\n          isPossibleServerAction,\n          assetPrefix: nextConfig.assetPrefix,\n          nextConfigOutput: nextConfig.output,\n          crossOrigin: nextConfig.crossOrigin,\n          trailingSlash: nextConfig.trailingSlash,\n          previewProps: prerenderManifest.preview,\n          deploymentId: nextConfig.deploymentId,\n          enableTainting: nextConfig.experimental.taint,\n          htmlLimitedBots: nextConfig.htmlLimitedBots,\n          devtoolSegmentExplorer:\n            nextConfig.experimental.devtoolSegmentExplorer,\n          reactMaxHeadersLength: nextConfig.reactMaxHeadersLength,\n\n          multiZoneDraftMode,\n          incrementalCache: getRequestMeta(req, 'incrementalCache'),\n          cacheLifeProfiles: nextConfig.experimental.cacheLife,\n          basePath: nextConfig.basePath,\n          serverActions: nextConfig.experimental.serverActions,\n\n          ...(isDebugStaticShell || isDebugDynamicAccesses\n            ? {\n                nextExport: true,\n                supportsDynamicResponse: false,\n                isStaticGeneration: true,\n                isRevalidate: true,\n                isDebugDynamicAccesses: isDebugDynamicAccesses,\n              }\n            : {}),\n\n          experimental: {\n            isRoutePPREnabled,\n            expireTime: nextConfig.expireTime,\n            staleTimes: nextConfig.experimental.staleTimes,\n            dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n            clientSegmentCache: Boolean(\n              nextConfig.experimental.clientSegmentCache\n            ),\n            dynamicOnHover: Boolean(nextConfig.experimental.dynamicOnHover),\n            inlineCss: Boolean(nextConfig.experimental.inlineCss),\n            authInterrupts: Boolean(nextConfig.experimental.authInterrupts),\n            clientTraceMetadata:\n              nextConfig.experimental.clientTraceMetadata || ([] as any),\n          },\n\n          waitUntil: ctx.waitUntil,\n          onClose: (cb) => {\n            res.on('close', cb)\n          },\n          onAfterTaskError: () => {},\n\n          onInstrumentationRequestError: (error, _request, errorContext) =>\n            routeModule.onRequestError(\n              req,\n              error,\n              errorContext,\n              routerServerContext\n            ),\n          err: getRequestMeta(req, 'invokeError'),\n          dev: routeModule.isDev,\n        },\n      }\n\n      const result = await invokeRouteModule(span, context)\n\n      const { metadata } = result\n\n      const {\n        cacheControl,\n        headers = {},\n        // Add any fetch tags that were on the page to the response headers.\n        fetchTags: cacheTags,\n      } = metadata\n\n      if (cacheTags) {\n        headers[NEXT_CACHE_TAGS_HEADER] = cacheTags\n      }\n\n      // Pull any fetch metrics from the render onto the request.\n      ;(req as any).fetchMetrics = metadata.fetchMetrics\n\n      // we don't throw static to dynamic errors in dev as isSSG\n      // is a best guess in dev since we don't have the prerender pass\n      // to know whether the path is actually static or not\n      if (\n        isSSG &&\n        cacheControl?.revalidate === 0 &&\n        !routeModule.isDev &&\n        !isRoutePPREnabled\n      ) {\n        const staticBailoutInfo = metadata.staticBailoutInfo\n\n        const err = new Error(\n          `Page changed from static to dynamic at runtime ${resolvedPathname}${\n            staticBailoutInfo?.description\n              ? `, reason: ${staticBailoutInfo.description}`\n              : ``\n          }` +\n            `\\nsee more here https://nextjs.org/docs/messages/app-static-to-dynamic-error`\n        )\n\n        if (staticBailoutInfo?.stack) {\n          const stack = staticBailoutInfo.stack\n          err.stack = err.message + stack.substring(stack.indexOf('\\n'))\n        }\n\n        throw err\n      }\n\n      return {\n        value: {\n          kind: CachedRouteKind.APP_PAGE,\n          html: result,\n          headers,\n          rscData: metadata.flightData,\n          postponed: metadata.postponed,\n          status: metadata.statusCode,\n          segmentData: metadata.segmentData,\n        } satisfies CachedAppPageValue,\n        cacheControl,\n      } satisfies ResponseCacheEntry\n    }\n\n    const responseGenerator: ResponseGenerator = async ({\n      hasResolved,\n      previousCacheEntry,\n      isRevalidating,\n      span,\n    }) => {\n      const isProduction = routeModule.isDev === false\n      const didRespond = hasResolved || res.writableEnded\n\n      // skip on-demand revalidate if cache is not present and\n      // revalidate-if-generated is set\n      if (\n        isOnDemandRevalidate &&\n        revalidateOnlyGenerated &&\n        !previousCacheEntry &&\n        !minimalMode\n      ) {\n        if (routerServerContext?.render404) {\n          await routerServerContext.render404(req, res)\n        } else {\n          res.statusCode = 404\n          res.end('This page could not be found')\n        }\n        return null\n      }\n\n      let fallbackMode: FallbackMode | undefined\n\n      if (prerenderInfo) {\n        fallbackMode = parseFallbackField(prerenderInfo.fallback)\n      }\n\n      // When serving a bot request, we want to serve a blocking render and not\n      // the prerendered page. This ensures that the correct content is served\n      // to the bot in the head.\n      if (fallbackMode === FallbackMode.PRERENDER && isBot(userAgent)) {\n        fallbackMode = FallbackMode.BLOCKING_STATIC_RENDER\n      }\n\n      if (previousCacheEntry?.isStale === -1) {\n        isOnDemandRevalidate = true\n      }\n\n      // TODO: adapt for PPR\n      // only allow on-demand revalidate for fallback: true/blocking\n      // or for prerendered fallback: false paths\n      if (\n        isOnDemandRevalidate &&\n        (fallbackMode !== FallbackMode.NOT_FOUND || previousCacheEntry)\n      ) {\n        fallbackMode = FallbackMode.BLOCKING_STATIC_RENDER\n      }\n\n      if (\n        !minimalMode &&\n        fallbackMode !== FallbackMode.BLOCKING_STATIC_RENDER &&\n        staticPathKey &&\n        !didRespond &&\n        !isDraftMode &&\n        pageIsDynamic &&\n        (isProduction || !isPrerendered)\n      ) {\n        // if the page has dynamicParams: false and this pathname wasn't\n        // prerendered trigger the no fallback handling\n        if (\n          // In development, fall through to render to handle missing\n          // getStaticPaths.\n          (isProduction || prerenderInfo) &&\n          // When fallback isn't present, abort this render so we 404\n          fallbackMode === FallbackMode.NOT_FOUND\n        ) {\n          throw new NoFallbackError()\n        }\n\n        let fallbackResponse: ResponseCacheEntry | null | undefined\n\n        if (isRoutePPREnabled && !isRSCRequest) {\n          // We use the response cache here to handle the revalidation and\n          // management of the fallback shell.\n          fallbackResponse = await routeModule.handleResponse({\n            cacheKey: isProduction ? normalizedSrcPage : null,\n            req,\n            nextConfig,\n            routeKind: RouteKind.APP_PAGE,\n            isFallback: true,\n            prerenderManifest,\n            isRoutePPREnabled,\n            responseGenerator: async () =>\n              doRender({\n                span,\n                // We pass `undefined` as rendering a fallback isn't resumed\n                // here.\n                postponed: undefined,\n                fallbackRouteParams:\n                  // If we're in production or we're debugging the fallback\n                  // shell then we should postpone when dynamic params are\n                  // accessed.\n                  isProduction || isDebugFallbackShell\n                    ? getFallbackRouteParams(normalizedSrcPage)\n                    : null,\n              }),\n            waitUntil: ctx.waitUntil,\n          })\n\n          // If the fallback response was set to null, then we should return null.\n          if (fallbackResponse === null) return null\n\n          // Otherwise, if we did get a fallback response, we should return it.\n          if (fallbackResponse) {\n            // Remove the cache control from the response to prevent it from being\n            // used in the surrounding cache.\n            delete fallbackResponse.cacheControl\n\n            return fallbackResponse\n          }\n        }\n      }\n      // Only requests that aren't revalidating can be resumed. If we have the\n      // minimal postponed data, then we should resume the render with it.\n      const postponed =\n        !isOnDemandRevalidate && !isRevalidating && minimalPostponed\n          ? minimalPostponed\n          : undefined\n\n      // When we're in minimal mode, if we're trying to debug the static shell,\n      // we should just return nothing instead of resuming the dynamic render.\n      if (\n        (isDebugStaticShell || isDebugDynamicAccesses) &&\n        typeof postponed !== 'undefined'\n      ) {\n        return {\n          cacheControl: { revalidate: 1, expire: undefined },\n          value: {\n            kind: CachedRouteKind.PAGES,\n            html: RenderResult.fromStatic(''),\n            pageData: {},\n            headers: undefined,\n            status: undefined,\n          } satisfies CachedPageValue,\n        }\n      }\n\n      // If this is a dynamic route with PPR enabled and the default route\n      // matches were set, then we should pass the fallback route params to\n      // the renderer as this is a fallback revalidation request.\n      const fallbackRouteParams =\n        pageIsDynamic &&\n        isRoutePPREnabled &&\n        (getRequestMeta(req, 'renderFallbackShell') || isDebugFallbackShell)\n          ? getFallbackRouteParams(pathname)\n          : null\n\n      // Perform the render.\n      return doRender({\n        span,\n        postponed,\n        fallbackRouteParams,\n      })\n    }\n\n    const handleResponse = async (span?: Span): Promise<null | void> => {\n      const cacheEntry = await routeModule.handleResponse({\n        cacheKey: ssgCacheKey,\n        responseGenerator: (c) =>\n          responseGenerator({\n            span,\n            ...c,\n          }),\n        routeKind: RouteKind.APP_PAGE,\n        isOnDemandRevalidate,\n        isRoutePPREnabled,\n        req,\n        nextConfig,\n        prerenderManifest,\n        waitUntil: ctx.waitUntil,\n      })\n\n      if (isDraftMode) {\n        res.setHeader(\n          'Cache-Control',\n          'private, no-cache, no-store, max-age=0, must-revalidate'\n        )\n      }\n\n      // In dev, we should not cache pages for any reason.\n      if (routeModule.isDev) {\n        res.setHeader('Cache-Control', 'no-store, must-revalidate')\n      }\n\n      if (!cacheEntry) {\n        if (ssgCacheKey) {\n          // A cache entry might not be generated if a response is written\n          // in `getInitialProps` or `getServerSideProps`, but those shouldn't\n          // have a cache key. If we do have a cache key but we don't end up\n          // with a cache entry, then either Next.js or the application has a\n          // bug that needs fixing.\n          throw new Error('invariant: cache entry required but not generated')\n        }\n        return null\n      }\n\n      if (cacheEntry.value?.kind !== CachedRouteKind.APP_PAGE) {\n        throw new Error(\n          `Invariant app-page handler received invalid cache entry ${cacheEntry.value?.kind}`\n        )\n      }\n\n      const didPostpone = typeof cacheEntry.value.postponed === 'string'\n\n      if (\n        isSSG &&\n        // We don't want to send a cache header for requests that contain dynamic\n        // data. If this is a Dynamic RSC request or wasn't a Prefetch RSC\n        // request, then we should set the cache header.\n        !isDynamicRSCRequest &&\n        (!didPostpone || isPrefetchRSCRequest)\n      ) {\n        if (!minimalMode) {\n          // set x-nextjs-cache header to match the header\n          // we set for the image-optimizer\n          res.setHeader(\n            'x-nextjs-cache',\n            isOnDemandRevalidate\n              ? 'REVALIDATED'\n              : cacheEntry.isMiss\n                ? 'MISS'\n                : cacheEntry.isStale\n                  ? 'STALE'\n                  : 'HIT'\n          )\n        }\n        // Set a header used by the client router to signal the response is static\n        // and should respect the `static` cache staleTime value.\n        res.setHeader(NEXT_IS_PRERENDER_HEADER, '1')\n      }\n      const { value: cachedData } = cacheEntry\n\n      // Coerce the cache control parameter from the render.\n      let cacheControl: CacheControl | undefined\n\n      // If this is a resume request in minimal mode it is streamed with dynamic\n      // content and should not be cached.\n      if (minimalPostponed) {\n        cacheControl = { revalidate: 0, expire: undefined }\n      }\n\n      // If this is in minimal mode and this is a flight request that isn't a\n      // prefetch request while PPR is enabled, it cannot be cached as it contains\n      // dynamic content.\n      else if (\n        minimalMode &&\n        isRSCRequest &&\n        !isPrefetchRSCRequest &&\n        isRoutePPREnabled\n      ) {\n        cacheControl = { revalidate: 0, expire: undefined }\n      } else if (!routeModule.isDev) {\n        // If this is a preview mode request, we shouldn't cache it\n        if (isDraftMode) {\n          cacheControl = { revalidate: 0, expire: undefined }\n        }\n\n        // If this isn't SSG, then we should set change the header only if it is\n        // not set already.\n        else if (!isSSG) {\n          if (!res.getHeader('Cache-Control')) {\n            cacheControl = { revalidate: 0, expire: undefined }\n          }\n        } else if (cacheEntry.cacheControl) {\n          // If the cache entry has a cache control with a revalidate value that's\n          // a number, use it.\n          if (typeof cacheEntry.cacheControl.revalidate === 'number') {\n            if (cacheEntry.cacheControl.revalidate < 1) {\n              throw new Error(\n                `Invalid revalidate configuration provided: ${cacheEntry.cacheControl.revalidate} < 1`\n              )\n            }\n\n            cacheControl = {\n              revalidate: cacheEntry.cacheControl.revalidate,\n              expire: cacheEntry.cacheControl?.expire ?? nextConfig.expireTime,\n            }\n          }\n          // Otherwise if the revalidate value is false, then we should use the\n          // cache time of one year.\n          else {\n            cacheControl = { revalidate: CACHE_ONE_YEAR, expire: undefined }\n          }\n        }\n      }\n\n      cacheEntry.cacheControl = cacheControl\n\n      if (\n        typeof segmentPrefetchHeader === 'string' &&\n        cachedData?.kind === CachedRouteKind.APP_PAGE &&\n        cachedData.segmentData\n      ) {\n        // This is a prefetch request issued by the client Segment Cache. These\n        // should never reach the application layer (lambda). We should either\n        // respond from the cache (HIT) or respond with 204 No Content (MISS).\n\n        // Set a header to indicate that PPR is enabled for this route. This\n        // lets the client distinguish between a regular cache miss and a cache\n        // miss due to PPR being disabled. In other contexts this header is used\n        // to indicate that the response contains dynamic data, but here we're\n        // only using it to indicate that the feature is enabled — the segment\n        // response itself contains whether the data is dynamic.\n        res.setHeader(NEXT_DID_POSTPONE_HEADER, '2')\n\n        // Add the cache tags header to the response if it exists and we're in\n        // minimal mode while rendering a static page.\n        const tags = cachedData.headers?.[NEXT_CACHE_TAGS_HEADER]\n        if (minimalMode && isSSG && tags && typeof tags === 'string') {\n          res.setHeader(NEXT_CACHE_TAGS_HEADER, tags)\n        }\n\n        const matchedSegment = cachedData.segmentData.get(segmentPrefetchHeader)\n        if (matchedSegment !== undefined) {\n          // Cache hit\n          return sendRenderResult({\n            req,\n            res,\n            type: 'rsc',\n            generateEtags: nextConfig.generateEtags,\n            poweredByHeader: nextConfig.poweredByHeader,\n            result: RenderResult.fromStatic(matchedSegment),\n            cacheControl: cacheEntry.cacheControl,\n          })\n        }\n\n        // Cache miss. Either a cache entry for this route has not been generated\n        // (which technically should not be possible when PPR is enabled, because\n        // at a minimum there should always be a fallback entry) or there's no\n        // match for the requested segment. Respond with a 204 No Content. We\n        // don't bother to respond with 404, because these requests are only\n        // issued as part of a prefetch.\n        res.statusCode = 204\n        return sendRenderResult({\n          req,\n          res,\n          type: 'rsc',\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: RenderResult.fromStatic(''),\n          cacheControl: cacheEntry.cacheControl,\n        })\n      }\n\n      // If there's a callback for `onCacheEntry`, call it with the cache entry\n      // and the revalidate options.\n      const onCacheEntry = getRequestMeta(req, 'onCacheEntry')\n      if (onCacheEntry) {\n        const finished = await onCacheEntry(\n          {\n            ...cacheEntry,\n            // TODO: remove this when upstream doesn't\n            // always expect this value to be \"PAGE\"\n            value: {\n              ...cacheEntry.value,\n              kind: 'PAGE',\n            },\n          },\n          {\n            url: getRequestMeta(req, 'initURL'),\n          }\n        )\n        if (finished) {\n          // TODO: maybe we have to end the request?\n          return null\n        }\n      }\n\n      // If the request has a postponed state and it's a resume request we\n      // should error.\n      if (didPostpone && minimalPostponed) {\n        throw new Error(\n          'Invariant: postponed state should not be present on a resume request'\n        )\n      }\n\n      if (cachedData.headers) {\n        const headers = { ...cachedData.headers }\n\n        if (!minimalMode || !isSSG) {\n          delete headers[NEXT_CACHE_TAGS_HEADER]\n        }\n\n        for (let [key, value] of Object.entries(headers)) {\n          if (typeof value === 'undefined') continue\n\n          if (Array.isArray(value)) {\n            for (const v of value) {\n              res.appendHeader(key, v)\n            }\n          } else if (typeof value === 'number') {\n            value = value.toString()\n            res.appendHeader(key, value)\n          } else {\n            res.appendHeader(key, value)\n          }\n        }\n      }\n\n      // Add the cache tags header to the response if it exists and we're in\n      // minimal mode while rendering a static page.\n      const tags = cachedData.headers?.[NEXT_CACHE_TAGS_HEADER]\n      if (minimalMode && isSSG && tags && typeof tags === 'string') {\n        res.setHeader(NEXT_CACHE_TAGS_HEADER, tags)\n      }\n\n      // If the request is a data request, then we shouldn't set the status code\n      // from the response because it should always be 200. This should be gated\n      // behind the experimental PPR flag.\n      if (cachedData.status && (!isRSCRequest || !isRoutePPREnabled)) {\n        res.statusCode = cachedData.status\n      }\n\n      // Redirect information is encoded in RSC payload, so we don't need to use redirect status codes\n      if (\n        !minimalMode &&\n        cachedData.status &&\n        RedirectStatusCode[cachedData.status] &&\n        isRSCRequest\n      ) {\n        res.statusCode = 200\n      }\n\n      // Mark that the request did postpone.\n      if (didPostpone) {\n        res.setHeader(NEXT_DID_POSTPONE_HEADER, '1')\n      }\n\n      // we don't go through this block when preview mode is true\n      // as preview mode is a dynamic request (bypasses cache) and doesn't\n      // generate both HTML and payloads in the same request so continue to just\n      // return the generated payload\n      if (isRSCRequest && !isDraftMode) {\n        // If this is a dynamic RSC request, then stream the response.\n        if (typeof cachedData.rscData === 'undefined') {\n          if (cachedData.postponed) {\n            throw new Error('Invariant: Expected postponed to be undefined')\n          }\n\n          return sendRenderResult({\n            req,\n            res,\n            type: 'rsc',\n            generateEtags: nextConfig.generateEtags,\n            poweredByHeader: nextConfig.poweredByHeader,\n            result: cachedData.html,\n            // Dynamic RSC responses cannot be cached, even if they're\n            // configured with `force-static` because we have no way of\n            // distinguishing between `force-static` and pages that have no\n            // postponed state.\n            // TODO: distinguish `force-static` from pages with no postponed state (static)\n            cacheControl: isDynamicRSCRequest\n              ? { revalidate: 0, expire: undefined }\n              : cacheEntry.cacheControl,\n          })\n        }\n\n        // As this isn't a prefetch request, we should serve the static flight\n        // data.\n        return sendRenderResult({\n          req,\n          res,\n          type: 'rsc',\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: RenderResult.fromStatic(cachedData.rscData),\n          cacheControl: cacheEntry.cacheControl,\n        })\n      }\n\n      // This is a request for HTML data.\n      let body = cachedData.html\n\n      // If there's no postponed state, we should just serve the HTML. This\n      // should also be the case for a resume request because it's completed\n      // as a server render (rather than a static render).\n      if (!didPostpone || minimalMode) {\n        return sendRenderResult({\n          req,\n          res,\n          type: 'html',\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: body,\n          cacheControl: cacheEntry.cacheControl,\n        })\n      }\n\n      // If we're debugging the static shell or the dynamic API accesses, we\n      // should just serve the HTML without resuming the render. The returned\n      // HTML will be the static shell so all the Dynamic API's will be used\n      // during static generation.\n      if (isDebugStaticShell || isDebugDynamicAccesses) {\n        // Since we're not resuming the render, we need to at least add the\n        // closing body and html tags to create valid HTML.\n        body.chain(\n          new ReadableStream({\n            start(controller) {\n              controller.enqueue(ENCODED_TAGS.CLOSED.BODY_AND_HTML)\n              controller.close()\n            },\n          })\n        )\n\n        return sendRenderResult({\n          req,\n          res,\n          type: 'html',\n          generateEtags: nextConfig.generateEtags,\n          poweredByHeader: nextConfig.poweredByHeader,\n          result: body,\n          cacheControl: { revalidate: 0, expire: undefined },\n        })\n      }\n\n      // This request has postponed, so let's create a new transformer that the\n      // dynamic data can pipe to that will attach the dynamic data to the end\n      // of the response.\n      const transformer = new TransformStream<Uint8Array, Uint8Array>()\n      body.chain(transformer.readable)\n\n      // Perform the render again, but this time, provide the postponed state.\n      // We don't await because we want the result to start streaming now, and\n      // we've already chained the transformer's readable to the render result.\n      doRender({\n        span,\n        postponed: cachedData.postponed,\n        // This is a resume render, not a fallback render, so we don't need to\n        // set this.\n        fallbackRouteParams: null,\n      })\n        .then(async (result) => {\n          if (!result) {\n            throw new Error('Invariant: expected a result to be returned')\n          }\n\n          if (result.value?.kind !== CachedRouteKind.APP_PAGE) {\n            throw new Error(\n              `Invariant: expected a page response, got ${result.value?.kind}`\n            )\n          }\n\n          // Pipe the resume result to the transformer.\n          await result.value.html.pipeTo(transformer.writable)\n        })\n        .catch((err) => {\n          // An error occurred during piping or preparing the render, abort\n          // the transformers writer so we can terminate the stream.\n          transformer.writable.abort(err).catch((e) => {\n            console.error(\"couldn't abort transformer\", e)\n          })\n        })\n\n      return sendRenderResult({\n        req,\n        res,\n        type: 'html',\n        generateEtags: nextConfig.generateEtags,\n        poweredByHeader: nextConfig.poweredByHeader,\n        result: body,\n        // We don't want to cache the response if it has postponed data because\n        // the response being sent to the client it's dynamic parts are streamed\n        // to the client on the same request.\n        cacheControl: { revalidate: 0, expire: undefined },\n      })\n    }\n\n    // TODO: activeSpan code path is for when wrapped by\n    // next-server can be removed when this is no longer used\n    if (activeSpan) {\n      await handleResponse(activeSpan)\n    } else {\n      return await tracer.withPropagatedContext(req.headers, () =>\n        tracer.trace(\n          BaseServerSpan.handleRequest,\n          {\n            spanName: `${method} ${req.url}`,\n            kind: SpanKind.SERVER,\n            attributes: {\n              'http.method': method,\n              'http.target': req.url,\n            },\n          },\n          handleResponse\n        )\n      )\n    }\n  } catch (err) {\n    // if we aren't wrapped by base-server handle here\n    if (!activeSpan && !(err instanceof NoFallbackError)) {\n      await routeModule.onRequestError(\n        req,\n        err,\n        {\n          routerKind: 'App Router',\n          routePath: srcPage,\n          routeType: 'render',\n          revalidateReason: getRevalidateReason({\n            isRevalidate: isSSG,\n            isOnDemandRevalidate,\n          }),\n        },\n        routerServerContext\n      )\n    }\n\n    // rethrow so that we can handle serving error page\n    throw err\n  }\n}\n"],"names":["AppPageRouteModule","RouteKind","getRevalidateReason","getTracer","SpanKind","getRequestMeta","BaseServerSpan","interopDefault","NodeNextRequest","NodeNextResponse","checkIsAppPPREnabled","getFallbackRouteParams","setReferenceManifestsSingleton","isHtmlBotRequest","shouldServeStreamingMetadata","createServerModuleMap","normalizeAppPath","getIsPossibleServerAction","RSC_HEADER","NEXT_ROUTER_PREFETCH_HEADER","NEXT_IS_PRERENDER_HEADER","NEXT_DID_POSTPONE_HEADER","getBotType","isBot","CachedRouteKind","FallbackMode","parseFallbackField","RenderResult","CACHE_ONE_YEAR","NEXT_CACHE_TAGS_HEADER","ENCODED_TAGS","sendRenderResult","NoFallbackError","tree","pages","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","entryBase","RedirectStatusCode","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree","distDir","process","env","__NEXT_RELATIVE_DIST_DIR","projectDir","__NEXT_RELATIVE_PROJECT_DIR","handler","req","res","ctx","prerenderManifest","srcPage","TURBOPACK","replace","multiZoneDraftMode","__NEXT_MULTI_ZONE_DRAFT_MODE","initialPostponed","minimalMode","prepareResult","prepare","statusCode","end","waitUntil","Promise","resolve","buildId","query","params","parsedUrl","pageIsDynamic","buildManifest","nextFontManifest","reactLoadableManifest","serverActionsManifest","clientReferenceManifest","subresourceIntegrityManifest","isDraftMode","resolvedPathname","revalidateOnlyGenerated","routerServerContext","nextConfig","normalizedSrcPage","isOnDemandRevalidate","prerenderInfo","dynamicRoutes","isPrerendered","routes","isSSG","Boolean","userAgent","headers","botType","isHtmlBot","isPrefetchRSCRequest","isRSCRequest","isPossibleServerAction","couldSupportPPR","experimental","ppr","hasDebugStaticShellQuery","__NEXT_EXPERIMENTAL_STATIC_SHELL_DEBUGGING","__nextppronly","hasDebugFallbackShellQuery","isRoutePPREnabled","renderingMode","isDev","experimentalTestProxy","isDebugStaticShell","isDebugDynamicAccesses","isDebugFallbackShell","minimalPostponed","undefined","isDynamicRSCRequest","segmentPrefetchHeader","serveStreamingMetadata","htmlLimitedBots","supportsDynamicResponse","shouldWaitOnAllReady","ssgCacheKey","staticPathKey","ComponentMod","serverModuleMap","method","tracer","activeSpan","getActiveScopeSpan","invokeRouteModule","span","context","nextReq","nextRes","NODE_ENV","dynamicIO","renderOpts","warmup","metadata","renderResumeDataCache","render","finally","setAttributes","rootSpanAttributes","getRootSpanAttributes","get","handleRequest","console","warn","route","name","updateName","url","doRender","postponed","fallbackRouteParams","sharedContext","serverComponentsHmrCache","App","Document","pageConfig","Component","setIsrStatus","dir","isRevalidate","assetPrefix","nextConfigOutput","output","crossOrigin","trailingSlash","previewProps","preview","deploymentId","enableTainting","taint","devtoolSegmentExplorer","reactMaxHeadersLength","incrementalCache","cacheLifeProfiles","cacheLife","basePath","serverActions","nextExport","isStaticGeneration","expireTime","staleTimes","clientSegmentCache","dynamicOnHover","inlineCss","authInterrupts","clientTraceMetadata","onClose","cb","on","onAfterTaskError","onInstrumentationRequestError","error","_request","errorContext","onRequestError","err","dev","result","cacheControl","fetchTags","cacheTags","fetchMetrics","revalidate","staticBailoutInfo","Error","description","stack","message","substring","indexOf","value","html","rscData","flightData","status","segmentData","responseGenerator","hasResolved","previousCacheEntry","isRevalidating","isProduction","didRespond","writableEnded","render404","fallbackMode","fallback","PRERENDER","BLOCKING_STATIC_RENDER","isStale","NOT_FOUND","fallbackResponse","handleResponse","cacheKey","routeKind","isFallback","expire","PAGES","fromStatic","pageData","cacheEntry","cachedData","c","setHeader","didPostpone","isMiss","getHeader","tags","matchedSegment","type","generateEtags","poweredByHeader","onCacheEntry","finished","key","Object","entries","Array","isArray","v","appendHeader","toString","body","chain","ReadableStream","start","controller","enqueue","CLOSED","BODY_AND_HTML","close","transformer","TransformStream","readable","then","pipeTo","writable","catch","abort","e","withPropagatedContext","trace","spanName","SERVER","attributes","routerKind","routePath","routeType","revalidateReason"],"mappings":"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","ignoreList":[0],"debugId":null}}]
}